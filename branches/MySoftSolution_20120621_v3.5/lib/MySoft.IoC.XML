<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MySoft.IoC</name>
    </assembly>
    <members>
        <member name="T:MySoft.IoC.WarningException">
            <summary>
            警告异常信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.IoCException">
            <summary>
            IoC异常
            </summary>
        </member>
        <member name="M:MySoft.IoC.IoCException.#ctor(System.String)">
            <summary>
            普通异常的构造方法
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.IoC.IoCException.#ctor(System.String,System.Exception)">
            <summary>
            内嵌异常的构造方法
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:MySoft.IoC.IoCException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info">存储对象序列化和反序列化所需的全部数据</param>
            <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文</param>
        </member>
        <member name="P:MySoft.IoC.IoCException.ApplicationName">
            <summary>
            应用名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.IoCException.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.IoCException.ErrorHeader">
            <summary>
            错误头
            </summary>
        </member>
        <member name="M:MySoft.IoC.WarningException.#ctor(System.Int32,System.String)">
            <summary>
            普通异常的构造方法
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.IoC.WarningException.#ctor(System.String)">
            <summary>
            普通异常的构造方法
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.IoC.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info">存储对象序列化和反序列化所需的全部数据</param>
            <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文</param>
        </member>
        <member name="P:MySoft.IoC.WarningException.WarningCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.SecondStatus">
            <summary>
            每秒服务器状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.SecondStatus.RequestCount">
            <summary>
            请求数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.SecondStatus.SuccessCount">
            <summary>
            成功计数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.SecondStatus.ErrorCount">
            <summary>
            错误数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.SecondStatus.ElapsedTime">
            <summary>
            总耗时
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.SecondStatus.AverageElapsedTime">
            <summary>
            平均耗时（每次请求）
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.ServerStatus">
            <summary>
            服务器状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServerStatus.StartDate">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServerStatus.TotalHours">
            <summary>
            统计小时数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServerStatus.Summary">
            <summary>
            汇总状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServerStatus.Highest">
            <summary>
            最高状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServerStatus.Latest">
            <summary>
            最新状态信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.ClientInfo">
            <summary>
            客户端连接信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.AppClient">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.AppClient.AppPath">
            <summary>
            应用路径
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.AppClient.AppName">
            <summary>
            应用名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.AppClient.IPAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.AppClient.HostName">
            <summary>
            客户端名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ClientInfo.ServerIPAddress">
            <summary>
            服务端IP
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ClientInfo.ServerPort">
            <summary>
            服务端Port
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ClientInfo.Count">
            <summary>
            连接数
            </summary>
        </member>
        <member name="T:MySoft.IoC.OperationContext">
            <summary>
            操作上下文对象
            </summary>
        </member>
        <member name="F:MySoft.IoC.OperationContext.callbackType">
            <summary>
            回调类型
            </summary>
        </member>
        <member name="M:MySoft.IoC.OperationContext.GetCallbackChannel``1">
            <summary>
            获取回调代理服务
            </summary>
            <typeparam name="ICallbackService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.OperationContext.Dispose">
            <summary>
            Dispose operation context.
            </summary>
        </member>
        <member name="P:MySoft.IoC.OperationContext.Current">
            <summary>
            当前上下文对象
            </summary>
        </member>
        <member name="P:MySoft.IoC.OperationContext.Container">
            <summary>
            容器对象
            </summary>
        </member>
        <member name="P:MySoft.IoC.OperationContext.Caller">
            <summary>
            调用者
            </summary>
        </member>
        <member name="P:MySoft.IoC.OperationContext.Channel">
            <summary>
            远程客户端
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServerStatusService">
            <summary>
            服务端监控
            </summary>
        </member>
        <member name="T:MySoft.IoC.IStatusService">
            <summary>
            状态服务信息
            </summary>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetAppClients">
            <summary>
            获取所有应用客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.Subscribe(System.String[])">
            <summary>
            订阅服务
            </summary>
        </member>
        <member name="M:MySoft.IoC.IStatusService.Subscribe(MySoft.IoC.SubscribeOptions,System.String[])">
            <summary>
            订阅服务
            </summary>
            <param name="options">订阅选项</param>
        </member>
        <member name="M:MySoft.IoC.IStatusService.Unsubscribe">
            <summary>
            退订服务
            </summary>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetSubscribeTypes">
            <summary>
            获取订阅的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.SubscribeType(System.String)">
            <summary>
            订阅发布类型
            </summary>
            <param name="subscribeType"></param>
        </member>
        <member name="M:MySoft.IoC.IStatusService.UnsubscribeType(System.String)">
            <summary>
            退订发布类型
            </summary>
            <param name="subscribeType"></param>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetSubscribeApps">
            <summary>
            获取订阅的应用
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.SubscribeApp(System.String)">
            <summary>
            订阅发布应用
            </summary>
            <param name="appName"></param>
        </member>
        <member name="M:MySoft.IoC.IStatusService.UnsubscribeApp(System.String)">
            <summary>
            退订发布应用
            </summary>
            <param name="appName"></param>
        </member>
        <member name="M:MySoft.IoC.IStatusService.ContainsService(System.String)">
            <summary>
            是否存在服务
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetServiceList">
            <summary>
            获取服务信息列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetServerStatus">
            <summary>
            获取服务状态信息（包括SummaryStatus，HighestStatus，TimeStatus）
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.ClearServerStatus">
            <summary>
            清除服务器状态
            </summary>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetTimeStatusList">
            <summary>
            获取时段的服务状态信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetClientList">
            <summary>
            获取所有的客户端信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.RefreshWebAPI">
            <summary>
            刷新接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetServerNodes(System.String,System.String)">
            <summary>
            获取服务节点
            </summary>
            <param name="nodeKey"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.#ctor(MySoft.IoC.Communication.Scs.Server.IScsServer,MySoft.IoC.Configuration.CastleServiceConfiguration,MySoft.IoC.IServiceContainer)">
            <summary>
            实例化ServerStatusService
            </summary>
            <param name="server"></param>
            <param name="container"></param>
            <param name="config"></param>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.Counter(MySoft.IoC.Messages.CallEventArgs)">
            <summary>
            进行计数处理并响应
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.GetAppClients">
            <summary>
            获取所有的客户端信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.GetClientList">
            <summary>
            获取连接客户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.ContainsService(System.String)">
            <summary>
            是否存在服务
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.GetServiceList">
            <summary>
            获取服务信息列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.CheckPrimitive(System.Type)">
            <summary>
            检测是否为简单类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.CheckCollection(System.Type)">
            <summary>
            检测是否是集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.GetServerStatus">
            <summary>
            服务状态信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.ClearServerStatus">
            <summary>
            清除所有服务器状态
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.GetLatestStatus">
            <summary>
            获取最后一次服务状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.GetHighestStatus">
            <summary>
            获取最高状态信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.GetSummaryStatus">
            <summary>
            汇总状态信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.GetTimeStatusList">
            <summary>
            获取服务状态列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.Subscribe(System.String[])">
            <summary>
            订阅服务
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.Subscribe(MySoft.IoC.SubscribeOptions,System.String[])">
            <summary>
            订阅服务
            </summary>
            <param name="options">订阅选项</param>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.Unsubscribe">
            <summary>
            退订
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.GetSubscribeTypes">
            <summary>
            获取订阅的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.SubscribeType(System.String)">
            <summary>
            订阅发布类型
            </summary>
            <param name="subscribeType"></param>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.UnsubscribeType(System.String)">
            <summary>
            退订发布类型
            </summary>
            <param name="subscribeType"></param>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.GetSubscribeApps">
            <summary>
            获取订阅的应用
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.SubscribeApp(System.String)">
            <summary>
            订阅发布应用
            </summary>
            <param name="appName"></param>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.UnsubscribeApp(System.String)">
            <summary>
            退订发布应用
            </summary>
            <param name="appName"></param>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.RefreshWebAPI">
            <summary>
            刷新API服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerStatusService.GetServerNodes(System.String,System.String)">
            <summary>
            获取服务节点
            </summary>
            <param name="nodeKey"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="E:MySoft.IoC.ServerStatusService.OnRefresh">
            <summary>
            刷新处理
            </summary>
        </member>
        <member name="E:MySoft.IoC.ServerStatusService.OnServerNode">
            <summary>
            服务节点
            </summary>
        </member>
        <member name="T:MySoft.IoC.HttpServer.HttpApiMethod">
            <summary>
            Http接口方法
            </summary>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpApiMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            初始化HttpApiMethod
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpApiMethod.#ctor(System.Reflection.MethodInfo,System.String)">
            <summary>
            初始化HttpApiMethod
            </summary>
            <param name="method"></param>
            <param name="authParameter"></param>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpApiMethod.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpApiMethod.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpApiMethod.CacheTime">
            <summary>
            数据缓存时间（单位：秒）
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpApiMethod.Authorized">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpApiMethod.AuthParameter">
            <summary>
            认证参数
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpApiMethod.HttpMethod">
            <summary>
            Http响应方式
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpApiMethod.Method">
            <summary>
            调用的方法
            </summary>
        </member>
        <member name="T:MySoft.IoC.HttpServer.DefaultApiResolver">
            <summary>
            默认的Api解析器
            </summary>
        </member>
        <member name="T:MySoft.IoC.HttpServer.IHttpApiResolver">
            <summary>
            Http接口解析器
            </summary>
        </member>
        <member name="M:MySoft.IoC.HttpServer.IHttpApiResolver.MethodResolver(System.Type)">
            <summary>
            解析接口服务为方法
            </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.DefaultApiResolver.MethodResolver(System.Type)">
            <summary>
            将服务解析成Http接口方法
            </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.DefaultApiResolver.ReadFromType(System.Type,MySoft.IoC.HttpServer.Config.HttpApiService)">
            <summary>
            从类型中读取
            </summary>
            <param name="interfaceType"></param>
            <param name="apiService"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Protocols.IScsWireProtocol">
            <summary>
            Represents a byte-level communication protocol between applications.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.IScsWireProtocol.GetBytes(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Serializes a message to a byte array to send to remote application.
            This method is synchronized. So, only one thread can call it concurrently.
            </summary>
            <param name="message">Message to be serialized</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.IScsWireProtocol.CreateMessages(System.Byte[])">
            <summary>
            Builds messages from a byte array that is received from remote application.
            The Byte array may contain just a part of a message, the protocol must
            cumulate bytes to build messages.
            This method is synchronized. So, only one thread can call it concurrently.
            </summary>
            <param name="receivedBytes">Received bytes from remote application</param>
            <returns>
            List of messages.
            Protocol can generate more than one message from a byte array.
            Also, if received bytes are not sufficient to build a message, the protocol
            may return an empty list (and save bytes to combine with next method call).
            </returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.IScsWireProtocol.Reset">
            <summary>
            This method is called when connection with remote application is reset (connection is renewing or first connecting).
            So, wire protocol must reset itself.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Channels.IConnectionListener">
            <summary>
            Represents a communication listener.
            A connection listener is used to accept incoming client connection requests.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.IConnectionListener.Start">
            <summary>
            Starts listening incoming connections.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.IConnectionListener.Stop">
            <summary>
            Stops listening incoming connections.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Channels.IConnectionListener.CommunicationChannelConnected">
            <summary>
            This event is raised when a new communication channel connected.
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceChannel">
            <summary>
            服务通道
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceChannel.#ctor(MySoft.IoC.Configuration.CastleServiceConfiguration,MySoft.IoC.ServiceCaller,MySoft.IoC.ServerStatusService,MySoft.Logger.ILog)">
            <summary>
            实例化ServiceChannel
            </summary>
            <param name="config"></param>
            <param name="caller"></param>
            <param name="status"></param>
            <param name="logger"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceChannel.SendResponse(MySoft.IoC.Communication.Scs.Server.IScsServerClient,MySoft.IoC.CallerContext)">
            <summary>
            发送响应消息
            </summary>
            <param name="channel"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceChannel.HandleResponse(MySoft.IoC.Communication.Scs.Server.IScsServerClient,MySoft.IoC.CallerContext)">
            <summary>
            处理响应
            </summary>
            <param name="channel"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceChannel.WaitCallback(System.Object)">
            <summary>
            响应信息
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceChannel.GetTimeoutResponse(MySoft.IoC.Messages.RequestMessage,System.String)">
            <summary>
            获取超时响应信息
            </summary>
            <param name="reqMsg"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServiceChannel.HandleResponse(MySoft.IoC.CallerContext)">
            <summary>
            处理消息
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceChannel.SetMessageError(MySoft.IoC.CallerContext)">
            <summary>
            设置消息异常
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceChannel.SendMessage(MySoft.IoC.Communication.Scs.Server.IScsServerClient,MySoft.IoC.CallerContext)">
            <summary>
            发送消息
            </summary>
            <param name="channel"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceChannel.Dispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="T:MySoft.IoC.Nodes.DefaultNodeResolver">
            <summary>
            默认的服务节点解析器
            </summary>
        </member>
        <member name="T:MySoft.IoC.Nodes.IServerNodeResolver">
            <summary>
            服务节点选择器接口
            </summary>
        </member>
        <member name="M:MySoft.IoC.Nodes.IServerNodeResolver.GetServerNodes(System.String,System.String)">
            <summary>
            获取服务器节点
            </summary>
            <param name="nodeKey"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Nodes.DefaultNodeResolver.#ctor">
            <summary>
            实例化DefaultNodeResolver
            </summary>
        </member>
        <member name="M:MySoft.IoC.Nodes.DefaultNodeResolver.GetServerNodes(System.String,System.String)">
            <summary>
            服务节点解析
            </summary>
            <param name="nodeKey"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Nodes.DefaultNodeResolver.InitServerConfig">
            <summary>
            初始化服务节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.SocketAsyncEventArgsPool">
            <summary>
            通讯异步套接字池
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.SocketAsyncEventArgsPool.pool">
            <summary>
            SocketAsyncEventArgs栈
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.SocketAsyncEventArgsPool.#ctor(System.Int32)">
            <summary>
            初始化SocketAsyncEventArgs池
            </summary>
            <param name="capacity">最大可能使用的SocketAsyncEventArgs对象.</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.SocketAsyncEventArgsPool.Pop">
            <summary>
            弹出一个SocketAsyncEventArgs
            </summary>
            <returns>SocketAsyncEventArgs removed from the pool.</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.SocketAsyncEventArgsPool.Push(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            添加一个 SocketAsyncEventArgs
            </summary>
            <param name="item">SocketAsyncEventArgs instance to add to the pool.</param>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.SocketAsyncEventArgsPool.Count">
            <summary>
            返回SocketAsyncEventArgs池中的 数量
            </summary>
        </member>
        <member name="T:MySoft.IoC.Aspect.AspectProxyAttribute">
            <summary>
            拦截器属性
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.AspectProxyAttribute.InterceptorType">
            <summary>
            拦截器对象
            </summary>
        </member>
        <member name="T:MySoft.IoC.AppClientComparer">
            <summary>
            Appclient 对比类
            </summary>
        </member>
        <member name="M:MySoft.IoC.AppClientComparer.Equals(MySoft.IoC.Messages.AppClient,MySoft.IoC.Messages.AppClient)">
            <summary>
            数据对比
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.AppClientComparer.GetHashCode(MySoft.IoC.Messages.AppClient)">
            <summary>
            获取hash值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Messages.HighestStatus">
            <summary>
            最高峰状态
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.HighestStatus.RequestCount">
            <summary>
            最大请求数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.HighestStatus.RequestCountCounterTime">
            <summary>
            最大请求发生时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.HighestStatus.SuccessCountCounterTime">
            <summary>
            最多成功请求发生时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.HighestStatus.ErrorCountCounterTime">
            <summary>
            最多错误请求发生时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.HighestStatus.ElapsedTimeCounterTime">
            <summary>
            最耗时请求发生时间
            </summary>
        </member>
        <member name="T:MySoft.IoC.Services.WaitResult">
            <summary>
            返回值对象
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.WaitResult.#ctor(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            实例化WaitResult
            </summary>
            <param name="reqMsg"></param>
        </member>
        <member name="M:MySoft.IoC.Services.WaitResult.WaitOne(System.TimeSpan)">
            <summary>
            等待信号
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.WaitResult.Set(MySoft.IoC.Messages.ResponseMessage)">
            <summary>
            响应信号
            </summary>
            <param name="resMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.WaitResult.Dispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="P:MySoft.IoC.Services.WaitResult.Message">
            <summary>
            消息对象
            </summary>
        </member>
        <member name="T:MySoft.IoC.Services.BaseService">
            <summary>
            The base class of services.
            </summary>
        </member>
        <member name="T:MySoft.IoC.IService">
            <summary>
            interface of all services.
            </summary>
        </member>
        <member name="M:MySoft.IoC.IService.CallService(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            Calls the service.
            </summary>
            <param name="reqMsg">The MSG.</param>
            <returns>The result.</returns>
        </member>
        <member name="P:MySoft.IoC.IService.ServiceName">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="F:MySoft.IoC.Services.BaseService.serviceType">
            <summary>
             The service type
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.BaseService.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.Services.BaseService"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
        </member>
        <member name="M:MySoft.IoC.Services.BaseService.Run(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            Runs the specified MSG.
            </summary>
            <param name="reqMsg">The MSG.</param>
            <returns>The msg.</returns>
        </member>
        <member name="M:MySoft.IoC.Services.BaseService.CallService(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            Calls the service.
            </summary>
            <param name="reqMsg">The MSG.</param>
            <returns>The msg.</returns>
        </member>
        <member name="P:MySoft.IoC.Services.BaseService.ServiceName">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="T:MySoft.IoC.Configuration.CastleServiceConfiguration">
            <summary>
            The service factory configuration.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Configuration.CastleServiceConfiguration.GetConfig">
            <summary>
            获取远程对象配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Configuration.CastleServiceConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="xmlnode"></param>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.HttpPort">
            <summary>
            Gets or sets the httpport
            </summary>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.HttpEnabled">
            <summary>
            Gets or sets the httpenabled
            </summary>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.ApiResolverType">
            <summary>
            Gets or sets the apiResolverType
            </summary>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.NodeResolverType">
            <summary>
            Gets or sets the nodeResolverType
            </summary>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.Compress">
            <summary>
            Gets or sets the compress.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.RecordHours">
            <summary>
            Gets or sets the recordHours
            </summary>
            <value>The recordHours.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.EnableCache">
            <summary>
            Gets or sets the enableCache
            </summary>
            <value>The enableCache.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.MaxCaller">
            <summary>
            Gets or sets the maxCaller
            </summary>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.Timeout">
            <summary>
            Gets or sets the timeout
            </summary>
        </member>
        <member name="T:MySoft.IoC.HttpServer.HttpServiceResult">
            <summary>
            http服务结果
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpServiceResult.Code">
            <summary>
            代码
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpServiceResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.CustomWireProtocolFactory">
            <summary>
            自定义工厂类
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Protocols.IScsWireProtocolFactory">
            <summary>
             Defines a Wire Protocol Factory class that is used to create Wire Protocol objects.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.IScsWireProtocolFactory.CreateWireProtocol">
            <summary>
            Creates a new Wire Protocol object.
            </summary>
            <returns>Newly created wire protocol object</returns>
        </member>
        <member name="M:MySoft.IoC.Messages.CustomWireProtocolFactory.#ctor(System.Boolean)">
            <summary>
            实例化CustomWireProtocolFactory
            </summary>
            <param name="compress"></param>
        </member>
        <member name="M:MySoft.IoC.Messages.CustomWireProtocolFactory.CreateWireProtocol">
            <summary>
            创建WireProtocol
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Server.ScsServerBase">
            <summary>
            This class provides base functionality for server classes.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Server.IScsServer">
            <summary>
            Represents a SCS server that is used to accept and manage client connections.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.IScsServer.Start">
            <summary>
            Starts the server.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.IScsServer.Stop">
            <summary>
            Stops the server.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Server.IScsServer.ClientConnected">
            <summary>
            This event is raised when a new client connected to the server.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Server.IScsServer.ClientDisconnected">
            <summary>
            This event is raised when a client disconnected from the server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.IScsServer.WireProtocolFactory">
            <summary>
            Gets/sets wire protocol factory to create IWireProtocol objects.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.IScsServer.Clients">
            <summary>
            A collection of clients that are connected to the server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.IScsServer.EndPoint">
            <summary>
            Get scs end point.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Server.ScsServerBase._connectionListener">
            <summary>
            This object is used to listen incoming connections.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerBase.Start">
            <summary>
            Starts the server.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerBase.Stop">
            <summary>
            Stops the server.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerBase.CreateConnectionListener">
            <summary>
            This method is implemented by derived classes to create appropriate connection listener to listen incoming connection requets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerBase.ConnectionListener_CommunicationChannelConnected(System.Object,MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelEventArgs)">
            <summary>
            Handles CommunicationChannelConnected event of _connectionListener object.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerBase.Client_Disconnected(System.Object,System.EventArgs)">
            <summary>
            Handles Disconnected events of all connected clients.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerBase.OnClientConnected(MySoft.IoC.Communication.Scs.Server.IScsServerClient)">
            <summary>
            Raises ClientConnected event.
            </summary>
            <param name="channel">Connected client</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerBase.OnClientDisconnected(MySoft.IoC.Communication.Scs.Server.IScsServerClient)">
            <summary>
            Raises ClientDisconnected event.
            </summary>
            <param name="client">Disconnected client</param>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Server.ScsServerBase.ClientConnected">
            <summary>
            This event is raised when a new client is connected.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Server.ScsServerBase.ClientDisconnected">
            <summary>
            This event is raised when a client disconnected from the server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ScsServerBase.WireProtocolFactory">
            <summary>
            Gets/sets wire protocol that is used while reading and writing messages.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ScsServerBase.Clients">
            <summary>
            A collection of clients that are connected to the server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ScsServerBase.EndPoint">
            <summary>
            Get scs end point.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Channels.ConnectionListenerBase">
            <summary>
            This class provides base functionality for communication listener classes.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.ConnectionListenerBase.Start">
            <summary>
            Starts listening incoming connections.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.ConnectionListenerBase.Stop">
            <summary>
            Stops listening incoming connections.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.ConnectionListenerBase.OnCommunicationChannelConnected(MySoft.IoC.Communication.Scs.Communication.Channels.ICommunicationChannel)">
            <summary>
            Raises CommunicationChannelConnected event.
            </summary>
            <param name="client"></param>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Channels.ConnectionListenerBase.CommunicationChannelConnected">
            <summary>
            This event is raised when a new communication channel is connected.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.TcpSocketAsyncEventArgs">
            <summary>
            Tcp socket async event args.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.TcpSocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            完成事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.TcpSocketAsyncEventArgs.Channel">
            <summary>
            回调通道
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.TcpSocketAsyncEventArgs.IsPushed">
            <summary>
            是否加入队列中
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.SummaryStatus">
            <summary>
            汇总状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.SummaryStatus.RunningSeconds">
            <summary>
            运行总时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.SummaryStatus.RequestCount">
            <summary>
            请求数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.SummaryStatus.AverageRequestCount">
            <summary>
            平均请求数（每秒）
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.SummaryStatus.AverageSuccessCount">
            <summary>
            平均成功数（每秒）
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.SummaryStatus.AverageErrorCount">
            <summary>
            平均错误数（每秒）
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Messages.ScsRawDataMessage">
            <summary>
            This message is used to send/receive a raw byte array as message data.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Messages.ScsMessage">
            <summary>
            Represents a message that is sent and received by server and client.
            This is the base class for all messages.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage">
            <summary>
            Represents a message that is sent and received by server and client.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage.MessageId">
            <summary>
            Unique identified for this message. 
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage.RepliedMessageId">
            <summary>
            Unique identified for this message. 
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage.DataLength">
            <summary>
            Total data size.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsMessage.#ctor">
            <summary>
            Creates a new ScsMessage.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsMessage.#ctor(System.String)">
            <summary>
            Creates a new reply ScsMessage.
            </summary>
            <param name="repliedMessageId">
            Replied message id if this is a reply for
            a message.
            </param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsMessage.ToString">
            <summary>
            Creates a string to represents this object.
            </summary>
            <returns>A string to represents this object</returns>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messages.ScsMessage.MessageId">
            <summary>
            Unique identified for this message.
            Default value: New GUID.
            Do not change if you do not want to do low level changes
            such as custom wire protocols.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messages.ScsMessage.RepliedMessageId">
            <summary>
            This property is used to indicate that this is
            a Reply message to a message.
            It may be null if this is not a reply message.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messages.ScsMessage.DataLength">
            <summary>
            Total data size.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsRawDataMessage.#ctor">
            <summary>
            Default empty constructor.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsRawDataMessage.#ctor(System.Byte[])">
            <summary>
            Creates a new ScsRawDataMessage object with MessageData property.
            </summary>
            <param name="messageData">Message data that is being transmitted</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsRawDataMessage.#ctor(System.Byte[],System.String)">
            <summary>
            Creates a new reply ScsRawDataMessage object with MessageData property.
            </summary>
            <param name="messageData">Message data that is being transmitted</param>
            <param name="repliedMessageId">
            Replied message id if this is a reply for
            a message.
            </param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsRawDataMessage.ToString">
            <summary>
            Creates a string to represents this object.
            </summary>
            <returns>A string to represents this object</returns>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messages.ScsRawDataMessage.MessageData">
            <summary>
            Message data that is being transmitted.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Channels.ICommunicationChannel">
            <summary>
            Represents a communication channel.
            A communication channel is used to communicate (send/receive messages) with a remote application.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Messengers.IMessenger">
            <summary>
            Represents an object that can send and receive messages.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messengers.IMessenger.SendMessage(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Sends a message to the remote application.
            </summary>
            <param name="message">Message to be sent</param>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Messengers.IMessenger.MessageReceived">
            <summary>
            This event is raised when a new message is received.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Messengers.IMessenger.MessageSent">
            <summary>
            This event is raised when a new message is sent without any error.
            It does not guaranties that message is properly handled and processed by remote application.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Messengers.IMessenger.MessageError">
            <summary>
            Receive error message.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messengers.IMessenger.WireProtocol">
            <summary>
            Gets/sets wire protocol that is used while reading and writing messages.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messengers.IMessenger.LastReceivedMessageTime">
            <summary>
            Gets the time of the last succesfully received message.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messengers.IMessenger.LastSentMessageTime">
            <summary>
            Gets the time of the last succesfully sent message.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.ICommunicationChannel.Start">
            <summary>
            Starts the communication with remote application.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.ICommunicationChannel.Disconnect">
            <summary>
            Closes messenger.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Channels.ICommunicationChannel.Disconnected">
            <summary>
            This event is raised when client disconnected from server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Channels.ICommunicationChannel.RemoteEndPoint">
            <summary>
             Gets endpoint of remote application.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Channels.ICommunicationChannel.CommunicationState">
            <summary>
            Gets the current communication state.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase">
            <summary>
            This class provides base functionality for all communication channel classes.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.Disconnect">
            <summary>
            Disconnects from remote application and closes this channel.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.Start">
            <summary>
            Starts the communication with remote application.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.SendMessage(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Sends a message to the remote application.
            </summary>
            <param name="message">Message to be sent</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException if message is null</exception>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.StartInternal">
            <summary>
            Starts the communication with remote application really.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.SendMessageInternal(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Sends a message to the remote application.
            This method is overrided by derived classes to really send to message.
            </summary>
            <param name="message">Message to be sent</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.OnDisconnected">
            <summary>
            Raises Disconnected event.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.OnMessageReceived(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Raises MessageReceived event.
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.OnMessageSent(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Raises MessageSent event.
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.OnMessageError(System.Exception)">
            <summary>
            Raises MessageError event.
            </summary>
            <param name="error"></param>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.MessageReceived">
            <summary>
            This event is raised when a new message is received.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.MessageSent">
            <summary>
            This event is raised when a new message is sent without any error.
            It does not guaranties that message is properly handled and processed by remote application.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.MessageError">
            <summary>
            Receive error message.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.Disconnected">
            <summary>
            This event is raised when communication channel closed.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.RemoteEndPoint">
            <summary>
             Gets endpoint of remote application.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.CommunicationState">
            <summary>
            Gets the current communication state.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.LastReceivedMessageTime">
            <summary>
            Gets the time of the last succesfully received message.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.LastSentMessageTime">
            <summary>
            Gets the time of the last succesfully sent message.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelBase.WireProtocol">
            <summary>
            Gets/sets wire protocol that the channel uses.
            This property must set before first communication.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Client.ScsClientFactory">
            <summary>
            This class is used to create SCS Clients to connect to a SCS server.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientFactory.CreateClient(MySoft.IoC.Communication.Scs.Communication.EndPoints.ScsEndPoint)">
            <summary>
            Creates a new client to connect to a server using an end point.
            </summary>
            <param name="endpoint">End point of the server to connect it</param>
            <returns>Created TCP client</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientFactory.CreateClient(System.String)">
            <summary>
            Creates a new client to connect to a server using an end point.
            </summary>
            <param name="endpointAddress">End point address of the server to connect it</param>
            <returns>Created TCP client</returns>
        </member>
        <member name="T:MySoft.IoC.Logger.RecordEventArgs">
            <summary>
            记录事件
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.BaseEventArgs">
            <summary>
            基类
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.BaseEventArgs.Caller">
            <summary>
            调用参数信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.BaseEventArgs.ElapsedTime">
            <summary>
            耗时时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.BaseEventArgs.Error">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.BaseEventArgs.Count">
            <summary>
            数据数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.BaseEventArgs.IsError">
            <summary>
            是否错误
            </summary>
        </member>
        <member name="M:MySoft.IoC.Logger.RecordEventArgs.#ctor(MySoft.IoC.Messages.AppCaller)">
            <summary>
            实例化RecordEventArgs
            </summary>
        </member>
        <member name="P:MySoft.IoC.Logger.RecordEventArgs.ServerHostName">
            <summary>
            客户端名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Logger.RecordEventArgs.ServerIPAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:MySoft.IoC.Logger.RecordEventArgs.ServerPort">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="T:MySoft.IoC.Services.CallbackProxy">
            <summary>
            回调代理
            </summary>
        </member>
        <member name="T:MySoft.IoC.Services.RemoteProxy">
            <summary>
            服务代理
            </summary>
        </member>
        <member name="T:MySoft.IoC.IServerConnect">
            <summary>
            Server connection
            </summary>
        </member>
        <member name="E:MySoft.IoC.IServerConnect.OnConnected">
            <summary>
            Connected
            </summary>
        </member>
        <member name="E:MySoft.IoC.IServerConnect.OnDisconnected">
            <summary>
            Disconnected
            </summary>
        </member>
        <member name="F:MySoft.IoC.Services.RemoteProxy.hashtable">
            <summary>
            结果队列
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.RemoteProxy.#ctor(MySoft.IoC.ServerNode,MySoft.Logger.ILog)">
            <summary>
            实例化RemoteProxy
            </summary>
            <param name="node"></param>
            <param name="container"></param>
        </member>
        <member name="M:MySoft.IoC.Services.RemoteProxy.InitServiceRequest">
            <summary>
            初始化请求
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.RemoteProxy.CreateServiceRequest(System.Boolean)">
            <summary>
            创建一个服务请求项
            </summary>
            <param name="subscribed"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.RemoteProxy.OnMessageCallback(System.Object,MySoft.IoC.Messages.ServiceMessageEventArgs)">
            <summary>
            消息回调
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.Services.RemoteProxy.OnMessageError(System.Object,MySoft.IoC.Messages.ErrorMessageEventArgs)">
            <summary>
            异常处理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.Services.RemoteProxy.QueueMessage(System.String,MySoft.IoC.Messages.ResponseMessage)">
            <summary>
            添加消息到队列
            </summary>
            <param name="messageId"></param>
            <param name="resMsg"></param>
        </member>
        <member name="M:MySoft.IoC.Services.RemoteProxy.CallService(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            调用方法
            </summary>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.RemoteProxy.GetTimeoutResponse(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            获取超时响应信息
            </summary>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.RemoteProxy.GetServiceRequest">
            <summary>
            获取一个服务请求
            </summary>
            <returns></returns>
        </member>
        <member name="E:MySoft.IoC.Services.RemoteProxy.OnConnected">
            <summary>
            连接服务器
            </summary>
        </member>
        <member name="E:MySoft.IoC.Services.RemoteProxy.OnDisconnected">
            <summary>
            断开服务器
            </summary>
        </member>
        <member name="P:MySoft.IoC.Services.RemoteProxy.Node">
            <summary>
            远程节点
            </summary>
        </member>
        <member name="P:MySoft.IoC.Services.RemoteProxy.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.CallbackProxy.InitServiceRequest">
            <summary>
            初始化请求项
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.CallbackProxy.GetServiceRequest">
            <summary>
            获取一个服务请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.CallbackProxy.OnMessageCallback(System.Object,MySoft.IoC.Messages.ServiceMessageEventArgs)">
            <summary>
            消息回调
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:MySoft.IoC.CastleFactory">
            <summary>
            The service factory.
            </summary>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.#ctor(MySoft.IoC.Configuration.CastleFactoryConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.CastleFactory"/> class.
            </summary>
            <param name="config">The container.</param>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.InitCaller(MySoft.Cache.IDataCache)">
            <summary>
            初始化调用器
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.CreateInternal(System.Boolean)">
            <summary>
            创建内部服务
            </summary>
            <param name="exists"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetDefaultNode">
            <summary>
            获取默认的节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetServerNode(System.String)">
            <summary>
            通过nodeKey查找节点
            </summary>
            <param name="nodeKey"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetServerNodes">
            <summary>
            获取所有远程节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.RegisterCache(MySoft.Cache.IDataCache)">
            <summary>
            注册缓存
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.RegisterLogger(MySoft.IoC.Logger.IServiceLog)">
            <summary>
            注册日志依赖
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetChannel``1">
            <summary>
            Create service channel.
            </summary>
            <returns>The service implemetation instance.</returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetChannel``1(System.String)">
            <summary>
            Create service channel.
            </summary>
            <param name="nodeKey">The node key.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetChannel``1(MySoft.IoC.ServerNode)">
            <summary>
            Create service channel.
            </summary>
            <param name="node">The node name.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetChannel``1(MySoft.IoC.IService,MySoft.IoC.ServerNode)">
            <summary>
            获取通道服务
            </summary>
            <typeparam name="IServiceInterfaceType"></typeparam>
            <param name="service"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetProxyChannel``1(MySoft.IoC.IService,System.Boolean)">
            <summary>
            Create service channel.
            </summary>
            <typeparam name="IServiceInterfaceType"></typeparam>
            <param name="proxy"></param>
            <param name="isCacheService"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetChannel``1(System.Object)">
            <summary>
            获取回调发布服务
            </summary>
            <typeparam name="IPublishService"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetChannel``1(System.String,System.Object)">
            <summary>
            获取回调发布服务
            </summary>
            <typeparam name="IPublishService"></typeparam>
            <param name="nodeKey"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetChannel``1(MySoft.IoC.ServerNode,System.Object)">
            <summary>
            获取回调发布服务
            </summary>
            <typeparam name="IPublishService"></typeparam>
            <param name="node"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.Invoke(MySoft.IoC.Messages.InvokeMessage)">
            <summary>
            调用分布式服务
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.Invoke(System.String,MySoft.IoC.Messages.InvokeMessage)">
            <summary>
            调用分布式服务
            </summary>
            <param name="nodeKey"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.Invoke(MySoft.IoC.ServerNode,MySoft.IoC.Messages.InvokeMessage)">
            <summary>
            调用分布式服务
            </summary>
            <param name="node"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.Invoke(MySoft.IoC.IService,MySoft.IoC.ServerNode,MySoft.IoC.Messages.InvokeMessage)">
            <summary>
            响应服务
            </summary>
            <param name="service"></param>
            <param name="node"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetInvokeData(MySoft.IoC.IService,MySoft.IoC.Messages.InvokeMessage)">
            <summary>
            获取调用的数据
            </summary>
            <param name="service"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetLocalService``1">
            <summary>
            获取本地服务
            </summary>
            <typeparam name="IServiceInterfaceType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetLocalService(System.String)">
            <summary>
            获取本地服务
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetCacheServerNodes(System.String,System.String)">
            <summary>
            获取服务节点
            </summary>
            <param name="nodeKey"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetServerNodesFromChannel(System.String,System.String)">
            <summary>
            获取服务节点列表
            </summary>
            <param name="nodeKey"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.IoC.CastleFactory.Container">
            <summary>
            Gets the service container.
            </summary>
            <value>The service container.</value>
        </member>
        <member name="E:MySoft.IoC.CastleFactory.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="E:MySoft.IoC.CastleFactory.OnError">
            <summary>
            OnError event.
            </summary>
        </member>
        <member name="E:MySoft.IoC.CastleFactory.OnConnected">
            <summary>
            OnConnected event
            </summary>
        </member>
        <member name="E:MySoft.IoC.CastleFactory.OnDisconnected">
            <summary>
            OnDisconnected event
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.CallbackMessage">
            <summary>
            回调消息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallbackMessage.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallbackMessage.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallbackMessage.Parameters">
            <summary>
            参数信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Server.ScsServerManager">
            <summary>
            Provides some functionality that are used by servers.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Server.ScsServerManager._lastClientId">
            <summary>
            Used to set an auto incremential unique identifier to clients.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerManager.GetClientId">
            <summary>
            Gets an unique number to be used as idenfitier of a client.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Client.Tcp.TcpHelper">
            <summary>
            This class is used to simplify TCP socket operations.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.Tcp.TcpHelper.ConnectToServer(System.Net.EndPoint,System.Int32)">
            <summary>
            This code is used to connect to a TCP socket with timeout option.
            </summary>
            <param name="endPoint">IP endpoint of remote server</param>
            <param name="timeoutMs">Timeout to wait until connect</param>
            <returns>Socket object connected to server</returns>
            <exception cref="T:System.Net.Sockets.SocketException">Throws SocketException if can not connect.</exception>
            <exception cref="T:System.TimeoutException">Throws TimeoutException if can not connect within specified timeoutMs</exception>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Client.ScsClientBase">
            <summary>
            This class provides base functionality for client classes.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Client.IScsClient">
            <summary>
            Represents a client to connect to server.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Client.IConnectableClient">
            <summary>
            Represents a client for SCS servers.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.IConnectableClient.Connect">
            <summary>
            Connects to server.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.IConnectableClient.Disconnect">
            <summary>
            Disconnects from server.
            Does nothing if already disconnected.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Client.IConnectableClient.Connected">
            <summary>
            This event is raised when client connected to server.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Client.IConnectableClient.Disconnected">
            <summary>
            This event is raised when client disconnected from server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Client.IConnectableClient.ConnectTimeout">
            <summary>
            Timeout for connecting to a server (as milliseconds).
            Default value: 15 seconds (15000 ms).
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Client.IConnectableClient.CommunicationState">
            <summary>
            Gets the current communication state.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Client.ScsClientBase.DefaultConnectionAttemptTimeout">
            <summary>
            Default timeout value for connecting a server.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Client.ScsClientBase._communicationChannel">
            <summary>
            The communication channel that is used by client to send and receive messages.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Client.ScsClientBase._pingTimer">
            <summary>
            This timer is used to send PingMessage messages to server periodically.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.Connect">
            <summary>
            Connects to server.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.Disconnect">
            <summary>
            Disconnects from server.
            Does nothing if already disconnected.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.SendMessage(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Sends a message to the server.
            </summary>
            <param name="message">Message to be sent</param>
            <exception cref="T:MySoft.IoC.Communication.Scs.Communication.CommunicationStateException">Throws a CommunicationStateException if client is not connected to the server.</exception>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.CreateCommunicationChannel">
            <summary>
            This method is implemented by derived classes to create appropriate communication channel.
            </summary>
            <returns>Ready communication channel to communicate</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.CommunicationChannel_MessageReceived(System.Object,MySoft.IoC.Communication.Scs.Communication.Messages.MessageEventArgs)">
            <summary>
            Handles MessageReceived event of _communicationChannel object.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.CommunicationChannel_MessageSent(System.Object,MySoft.IoC.Communication.Scs.Communication.Messages.MessageEventArgs)">
            <summary>
            Handles MessageSent event of _communicationChannel object.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.CommunicationChannel_Disconnected(System.Object,System.EventArgs)">
            <summary>
            Handles Disconnected event of _communicationChannel object.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.PingTimer_Elapsed(System.Object,System.EventArgs)">
            <summary>
            Handles Elapsed event of _pingTimer to send PingMessage messages to server.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.OnConnected">
            <summary>
            Raises Connected event.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.OnDisconnected">
            <summary>
            Raises Disconnected event.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.OnMessageReceived(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Raises MessageReceived event.
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.OnMessageSent(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Raises MessageSent event.
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ScsClientBase.OnMessageError(System.Exception)">
            <summary>
            Raises MessageReceived event.
            </summary>
            <param name="error"></param>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Client.ScsClientBase.MessageReceived">
            <summary>
            This event is raised when a new message is received.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Client.ScsClientBase.MessageSent">
            <summary>
            This event is raised when a new message is sent without any error.
            It does not guaranties that message is properly handled and processed by remote application.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Client.ScsClientBase.MessageError">
            <summary>
            Receive error message.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Client.ScsClientBase.Connected">
            <summary>
            This event is raised when communication channel closed.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Client.ScsClientBase.Disconnected">
            <summary>
            This event is raised when client disconnected from server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Client.ScsClientBase.ConnectTimeout">
            <summary>
            Timeout for connecting to a server (as milliseconds).
            Default value: 15 seconds (15000 ms).
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Client.ScsClientBase.WireProtocol">
            <summary>
            Gets/sets wire protocol that is used while reading and writing messages.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Client.ScsClientBase.CommunicationState">
            <summary>
            Gets the communication state of the Client.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Client.ScsClientBase.LastReceivedMessageTime">
            <summary>
            Gets the time of the last succesfully received message.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Client.ScsClientBase.LastSentMessageTime">
            <summary>
            Gets the time of the last succesfully received message.
            </summary>
        </member>
        <member name="T:MySoft.IoC.HttpServer.TcpDocument">
            <summary>
            API文档类
            </summary>
        </member>
        <member name="M:MySoft.IoC.HttpServer.TcpDocument.MakeDocument">
            <summary>
            生成文档
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.TcpDocument.GetItemDocument(MySoft.IoC.Messages.ServiceInfo)">
            <summary>
            获取Item文档
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Messages.ServiceInfo">
            <summary>
            服务情况
            </summary>
        </member>
        <member name="M:MySoft.IoC.Messages.ServiceInfo.ToString">
            <summary>
            重载ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceInfo.Assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceInfo.Name">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceInfo.FullName">
            <summary>
            服务全称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceInfo.ServiceName">
            <summary>
            服务发布名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceInfo.ServiceDescription">
            <summary>
            服务发布描述
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceInfo.Methods">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.MethodInfo">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="M:MySoft.IoC.Messages.MethodInfo.ToString">
            <summary>
            重载ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.IoC.Messages.MethodInfo.Name">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.MethodInfo.FullName">
            <summary>
            服务全称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.MethodInfo.MethodName">
            <summary>
            方法发布名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.MethodInfo.MethodDescription">
            <summary>
            方法发布描述
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.MethodInfo.ReturnTypeName">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.MethodInfo.ReturnTypeFullName">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.MethodInfo.IsPrimitive">
            <summary>
            是否简单类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.MethodInfo.IsCollection">
            <summary>
            是否集合类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.MethodInfo.Parameters">
            <summary>
            参数信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.ParameterInfo">
            <summary>
            参数信息
            </summary>
        </member>
        <member name="M:MySoft.IoC.Messages.ParameterInfo.ToString">
            <summary>
            重载ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterInfo.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterInfo.TypeName">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterInfo.TypeFullName">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterInfo.IsByRef">
            <summary>
            是否引用类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterInfo.IsOut">
            <summary>
            是否输出类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterInfo.IsEnum">
            <summary>
            是否枚举
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterInfo.IsPrimitive">
            <summary>
            是否简单类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterInfo.EnumValue">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterInfo.SubParameters">
            <summary>
            子参数信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.EnumInfo">
            <summary>
            枚举信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.EnumInfo.Name">
            <summary>
            枚举名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.EnumInfo.Value">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="T:MySoft.IoC.IServiceContainer">
            <summary>
            The service container interface.
            </summary>
        </member>
        <member name="M:MySoft.IoC.IServiceContainer.RegisterComponent(System.String,System.Type,System.Object)">
            <summary>
            Registers the component.
            </summary>
            <param name="key">The key.</param>
            <param name="instance">Type of the class.</param>
        </member>
        <member name="M:MySoft.IoC.IServiceContainer.RegisterComponent(System.String,System.Type,System.Type)">
            <summary>
            Registers the component.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="classType">Type of the class.</param>
        </member>
        <member name="M:MySoft.IoC.IServiceContainer.RegisterComponents(System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Registers the components.
            </summary>
            <param name="serviceKeyTypes">The service key types.</param>
        </member>
        <member name="M:MySoft.IoC.IServiceContainer.GetServiceTypes``1">
            <summary>
            Get contract interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IServiceContainer.Contains``1(System.String)">
            <summary>
            Contains service
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.IoC.IServiceContainer.Kernel">
            <summary>
            Gets the kernel.
            </summary>
            <value>The kernel.</value>
        </member>
        <member name="T:MySoft.IoC.CastleFactoryType">
            <summary>
            Service facrory type
            </summary>
        </member>
        <member name="F:MySoft.IoC.CastleFactoryType.Local">
            <summary>
            Local
            </summary>
        </member>
        <member name="F:MySoft.IoC.CastleFactoryType.Remote">
            <summary>
            Remote
            </summary>
        </member>
        <member name="F:MySoft.IoC.CastleFactoryType.LocalRemote">
            <summary>
            LocalRemote
            </summary>
        </member>
        <member name="T:MySoft.IoC.CastleService">
            <summary>
            Castle服务
            </summary>
        </member>
        <member name="M:MySoft.IoC.CastleService.#ctor(MySoft.IoC.Configuration.CastleServiceConfiguration)">
            <summary>
            实例化CastleService
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.Create``1(System.Type)">
            <summary>
            创建指定类型的实例
            </summary>
            <typeparam name="InterfaceType"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleService.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:MySoft.IoC.CastleService.httpServer_OnServerException(System.Exception)">
            <summary>
            HttpServer异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:MySoft.IoC.CastleService.server_ClientConnected(System.Object,MySoft.IoC.Communication.Scs.Server.ServerClientEventArgs)">
            <summary>
            开始链接
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.server_ClientDisconnected(System.Object,MySoft.IoC.Communication.Scs.Server.ServerClientEventArgs)">
            <summary>
            断开链接
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.Channel_MessageSent(System.Object,MySoft.IoC.Communication.Scs.Communication.Messages.MessageEventArgs)">
            <summary>
            数据发送
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.Channel_MessageReceived(System.Object,MySoft.IoC.Communication.Scs.Communication.Messages.MessageEventArgs)">
            <summary>
            接收数据
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.CreateCaller(System.String,MySoft.IoC.Messages.RequestMessage)">
            <summary>
            获取AppCaller
            </summary>
            <param name="appPath"></param>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleService.SendResponse(MySoft.IoC.Communication.Scs.Server.IScsServerClient,System.String,MySoft.IoC.Messages.RequestMessage)">
            <summary>
            发送消息
            </summary>
            <param name="channel"></param>
            <param name="messageId"></param>
            <param name="reqMsg"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.NotifyResult(System.Object,MySoft.IoC.Messages.CallEventArgs)">
            <summary>
            响应结果
            </summary>
            <param name="sender"></param>
            <param name="callArgs"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.Channel_MessageError(System.Object,MySoft.IoC.Communication.Scs.Communication.Messages.ErrorEventArgs)">
            <summary>
            异常处理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.PushConnectInfo(MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint,System.Boolean,System.Int32)">
            <summary>
            推送链接信息
            </summary>
            <param name="endPoint"></param>
            <param name="connected"></param>
            <param name="count"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.PushAppClient(MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint,MySoft.IoC.Messages.AppClient)">
            <summary>
            推送客户端信息
            </summary>
            <param name="endPoint"></param>
            <param name="appClient"></param>
        </member>
        <member name="P:MySoft.IoC.CastleService.Container">
            <summary>
            Gets the service container.
            </summary>
            <value>The service container.</value>
        </member>
        <member name="P:MySoft.IoC.CastleService.Server">
            <summary>
            处理服务
            </summary>
        </member>
        <member name="P:MySoft.IoC.CastleService.ServerUrl">
            <summary>
            获取服务的ServerUrl地址
            </summary>
        </member>
        <member name="P:MySoft.IoC.CastleService.ServiceCount">
            <summary>
            服务数
            </summary>
        </member>
        <member name="E:MySoft.IoC.CastleService.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="E:MySoft.IoC.CastleService.OnError">
            <summary>
            OnError event.
            </summary>
        </member>
        <member name="E:MySoft.IoC.CastleService.Completed">
            <summary>
            Completed event.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Services.ServiceDiscoverFacility">
            <summary>
            The facility is used toautomatically discover services from castle config.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.ServiceDiscoverFacility.CheckWaitingList">
            <summary>
            For each new component registered,
            some components in the WaitingDependency
            state may have became valid, so we check them
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.ServiceDiscoverFacility.#ctor(MySoft.IoC.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.Services.ServiceDiscoverFacility"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MySoft.IoC.Services.ServiceDiscoverFacility.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.ReturnMessage">
            <summary>
            返回消息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.ServiceMessage">
            <summary>
            消息基类
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceMessage.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceMessage.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceMessage.Parameters">
            <summary>
            参数信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ReturnMessage.Value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ReturnMessage.Error">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ReturnMessage.Count">
            <summary>
            记录数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ReturnMessage.IsError">
            <summary>
            是否有异常
            </summary>
        </member>
        <member name="T:MySoft.IoC.HttpServer.HttpRequestHandlerFactory">
            <summary>
            http解析工厂类
            </summary>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpRequestHandlerFactory.#ctor(MySoft.Net.Http.IHTTPRequestHandler)">
            <summary>
            初始化CastleServiceHandler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpRequestHandlerFactory.CreateRequestHandler(MySoft.Net.Http.HTTPServerRequest)">
            <summary>
            返回请求句柄
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.BufferMessage">
            <summary>
            Buffer Message
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.BufferMessage.#ctor(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage,System.Byte[])">
            <summary>
            实例化BufferMessage
            </summary>
            <param name="message"></param>
            <param name="messageBytes"></param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.BufferMessage.Dispose">
            <summary>
            Dispose resource.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.BufferMessage.Message">
            <summary>
            Send message value.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.BufferMessage.Buffer">
            <summary>
            Send message buffer.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Aspect.AspectFactory">
            <summary>
            AOP工厂类
            </summary>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectFactory.GetInterceptors(System.Type)">
            <summary>
            获取拦截器列表
            </summary>
            <param name="classType"></param>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectFactory.CreateProxy(System.Type,System.Object,Castle.DynamicProxy.IInterceptor[])">
            <summary>
            创建一个实例方式的拦截器
            </summary>
            <param name="proxyType"></param>
            <param name="target"></param>
            <param name="interceptors"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectFactory.CreateProxy(System.Type,Castle.DynamicProxy.IInterceptor[])">
            <summary>
            创建一个类型方式的拦截器
            </summary>
            <param name="classType"></param>
            <param name="interceptors"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectFactory.CreateProxy(System.Type,System.Object[],Castle.DynamicProxy.IInterceptor[])">
            <summary>
            创建一个类型方式的拦截器（可传入参数）
            </summary>
            <param name="classType"></param>
            <param name="arguments"></param>
            <param name="interceptors"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectFactory.CreateProxy(System.Type,System.Object,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
            创建一个实例方式的拦截器
            </summary>
            <param name="proxyType"></param>
            <param name="target"></param>
            <param name="options"></param>
            <param name="interceptors"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectFactory.CreateProxy(System.Type,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
            创建一个类型方式的拦截器
            </summary>
            <param name="classType"></param>
            <param name="options"></param>
            <param name="interceptors"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectFactory.CreateProxy(System.Type,System.Object[],Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
            创建一个类型方式的拦截器（可传入参数）
            </summary>
            <param name="classType"></param>
            <param name="arguments"></param>
            <param name="options"></param>
            <param name="interceptors"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectFactory.CreateProxy``1(``0,Castle.DynamicProxy.IInterceptor[])">
            <summary>
            创建服务代理
            </summary>
            <typeparam name="IServiceInterfaceType"></typeparam>
            <param name="service"></param>
            <param name="interceptors"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectFactory.CreateProxy``1(``0,Castle.DynamicProxy.ProxyGenerationOptions,Castle.DynamicProxy.IInterceptor[])">
            <summary>
            创建服务代理
            </summary>
            <typeparam name="IServiceInterfaceType"></typeparam>
            <param name="service"></param>
            <param name="options"></param>
            <param name="interceptors"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Callback.CallbackInvocationHandler">
            <summary>
            回调代理
            </summary>
        </member>
        <member name="M:MySoft.IoC.Callback.CallbackInvocationHandler.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            响应消息
            </summary>
            <param name="proxy"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Messages.ScsClientMessage">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="M:MySoft.IoC.Messages.ScsClientMessage.#ctor(MySoft.IoC.Messages.AppClient)">
            <summary>
            客户端信息
            </summary>
            <param name="client"></param>
        </member>
        <member name="P:MySoft.IoC.Messages.ScsClientMessage.Client">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Callback.MessageCenter">
            <summary>
            消息中心；
            </summary>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageCenter.GetListener(MySoft.IoC.Communication.Scs.Server.IScsServerClient)">
            <summary>
            获取监控器
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageCenter.AddListener(MySoft.IoC.Callback.MessageListener)">
            <summary>
            添加监听器
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageCenter.RemoveListener(MySoft.IoC.Callback.MessageListener)">
            <summary>
            移除监听器
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageCenter.Notify(MySoft.IoC.Messages.ServerStatus)">
            <summary>
            响应状态信息
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageCenter.Notify(MySoft.IoC.Messages.CallEventArgs)">
            <summary>
            调用事件信息
            </summary>
            <param name="callArgs"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageCenter.Notify(MySoft.IoC.Messages.ConnectInfo)">
            <summary>
            通知消息
            </summary>
            <param name="connectInfo"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageCenter.Notify(System.String,System.Int32,MySoft.IoC.Messages.AppClient)">
            <summary>
            改变客户端信息
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="appClient"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageCenter.WriteError(MySoft.IoC.Callback.MessageListener,System.Exception)">
            <summary>
            输出异常
            </summary>
            <param name="lstn"></param>
            <param name="ex"></param>
        </member>
        <member name="P:MySoft.IoC.Callback.MessageCenter.Instance">
            <summary>
            返回 MessageCenter 的唯一实例；
            </summary>
        </member>
        <member name="P:MySoft.IoC.Callback.MessageCenter.Count">
            <summary>
            监听数
            </summary>
        </member>
        <member name="E:MySoft.IoC.Callback.MessageCenter.OnLog">
            <summary>
            日志处理
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Messages.ScsPingMessage">
            <summary>
            This message is used to send/receive ping messages.
            Ping messages is used to keep connection alive between server and client.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsPingMessage.#ctor">
            <summary>
             Creates a new PingMessage object.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsPingMessage.#ctor(System.String)">
            <summary>
            Creates a new reply PingMessage object.
            </summary>
            <param name="repliedMessageId">
            Replied message id if this is a reply for
            a message.
            </param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsPingMessage.ToString">
            <summary>
            Creates a string to represents this object.
            </summary>
            <returns>A string to represents this object</returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint">
            <summary>
            Represens a TCP end point in SCS.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.EndPoints.ScsEndPoint">
            <summary>
             Represents a server side end point in SCS.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.EndPoints.ScsEndPoint.CreateEndPoint(System.String)">
            <summary>
            Create a Scs End Point from a string.
            Address must be formatted as: protocol://address
            For example: tcp://89.43.104.179:10048 for a TCP endpoint with
            IP 89.43.104.179 and port 10048.
            </summary>
            <param name="endPointAddress">Address to create endpoint</param>
            <returns>Created end point</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.EndPoints.ScsEndPoint.CreateServer">
            <summary>
            Creates a Scs Server that uses this end point to listen incoming connections.
            </summary>
            <returns>Scs Server</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.EndPoints.ScsEndPoint.CreateClient">
            <summary>
            Creates a Scs Server that uses this end point to connect to server.
            </summary>
            <returns>Scs Client</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint.#ctor(System.Int32)">
            <summary>
            Creates a new ScsTcpEndPoint object with specified port number.
            </summary>
            <param name="tcpPort">Listening TCP Port for incoming connection requests on server</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new ScsTcpEndPoint object with specified IP address and port number.
            </summary>
            <param name="ipAddress">IP address of the server</param>
            <param name="port">Listening TCP Port for incoming connection requests on server</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint.#ctor(System.String)">
            <summary>
            Creates a new ScsTcpEndPoint from a string address.
            Address format must be like IPAddress:Port (For example: 127.0.0.1:10085).
            </summary>
            <param name="address">TCP end point Address</param>
            <returns>Created ScsTcpEndpoint object</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint.CreateServer">
            <summary>
            Creates a Scs Server that uses this end point to listen incoming connections.
            </summary>
            <returns>Scs Server</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint.CreateClient">
            <summary>
            Creates a Scs Client that uses this end point to connect to server.
            </summary>
            <returns>Scs Client</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint.ToString">
            <summary>
            Generates a string representation of this end point object.
            </summary>
            <returns>String representation of this end point object</returns>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint.IpAddress">
            <summary>
             IP address of the server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint.TcpPort">
            <summary>
             Listening TCP Port for incoming connection requests on server.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelEventArgs">
            <summary>
            Stores communication channel information to be used by an event.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelEventArgs.#ctor(MySoft.IoC.Communication.Scs.Communication.Channels.ICommunicationChannel)">
            <summary>
            Creates a new CommunicationChannelEventArgs object.
            </summary>
            <param name="channel">Communication channel that is associated with this event</param>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Channels.CommunicationChannelEventArgs.Channel">
            <summary>
            Communication channel that is associated with this event.
            </summary>
        </member>
        <member name="P:MySoft.IoC.CacheKey.UniqueId">
            <summary>
            缓存唯一Id
            </summary>
        </member>
        <member name="P:MySoft.IoC.CacheKey.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.CacheKey.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="T:MySoft.IoC.Aspect.InnerInvocation">
            <summary>
            内部调用对象
            </summary>
        </member>
        <member name="T:MySoft.IoC.Aspect.IInvocation">
            <summary>
            Aspect调用接口
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.IInvocation.Parameters">
            <summary>
            参数集合信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.IInvocation.Description">
            <summary>
            操作描述信息
            </summary>
        </member>
        <member name="M:MySoft.IoC.Aspect.InnerInvocation.GetArgumentValue(System.Int32)">
            <summary>
            获取参数值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Aspect.InnerInvocation.GetConcreteMethod">
            <summary>
            具体方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Aspect.InnerInvocation.GetConcreteMethodInvocationTarget">
            <summary>
            具体调用方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Aspect.InnerInvocation.Proceed">
            <summary>
            调用
            </summary>
        </member>
        <member name="M:MySoft.IoC.Aspect.InnerInvocation.SetArgumentValue(System.Int32,System.Object)">
            <summary>
            设置参数值
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="P:MySoft.IoC.Aspect.InnerInvocation.Arguments">
            <summary>
            调用参数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.InnerInvocation.GenericArguments">
            <summary>
            泛型参数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.InnerInvocation.InvocationTarget">
            <summary>
            调用对象
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.InnerInvocation.Method">
            <summary>
            当前方法
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.InnerInvocation.MethodInvocationTarget">
            <summary>
            当前调用方法
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.InnerInvocation.Proxy">
            <summary>
            代理对象
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.InnerInvocation.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.InnerInvocation.TargetType">
            <summary>
            目标对象类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.InnerInvocation.Parameters">
            <summary>
            参数集合信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.InnerInvocation.Description">
            <summary>
            响应的消息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Configuration.CastleServiceConfigurationHandler">
            <summary>
            服务配置类
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceRequestPool">
            <summary>
            服务消息池
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceRequestPool.pool">
            <summary>
            ServiceRequest栈
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceRequestPool.#ctor(System.Int32)">
            <summary>
            初始化ServiceRequest池
            </summary>
            <param name="capacity">最大可能使用的ServiceRequest对象.</param>
        </member>
        <member name="M:MySoft.IoC.ServiceRequestPool.Pop">
            <summary>
            弹出一个ServiceRequest
            </summary>
            <returns>ServiceRequest removed from the pool.</returns>
        </member>
        <member name="M:MySoft.IoC.ServiceRequestPool.Push(MySoft.IoC.ServiceRequest)">
            <summary>
            添加一个 ServiceRequest
            </summary>
            <param name="item">ServiceRequest instance to add to the pool.</param>
        </member>
        <member name="P:MySoft.IoC.ServiceRequestPool.Count">
            <summary>
            返回ServiceRequest池中的 数量
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceCaller">
            <summary>
            服务调用者
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceCaller.#ctor(MySoft.IoC.Configuration.CastleServiceConfiguration,MySoft.IoC.IServiceContainer,MySoft.IoC.Services.SyncCaller)">
            <summary>
            初始化ServiceCaller
            </summary>
            <param name="config"></param>
            <param name="container"></param>
            <param name="caller"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceCaller.InvokeResponse(MySoft.IoC.Communication.Scs.Server.IScsServerClient,MySoft.IoC.IDataContext)">
            <summary>
            调用方法
            </summary>
            <param name="channel"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServiceCaller.GetOperationContext(MySoft.IoC.Communication.Scs.Server.IScsServerClient,MySoft.IoC.Messages.AppCaller)">
            <summary>
            获取上下文
            </summary>
            <param name="channel"></param>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServiceCaller.ParseService(MySoft.IoC.Messages.AppCaller)">
            <summary>
            Gets the service.
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.HttpServer.Config.HttpApiConfig">
            <summary>
            HttpApiConfig类
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.Config.HttpApiConfig.ApiServices">
            <summary>
            Api服务集合
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.CommunicationException">
            <summary>
            This application is thrown in a communication error.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.CommunicationException.#ctor">
            <summary>
            Contstructor.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Contstructor for serializing.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.CommunicationException.#ctor(System.String)">
            <summary>
            Contstructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.CommunicationException.#ctor(System.String,System.Exception)">
            <summary>
            Contstructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:MySoft.IoC.Nodes.ServerNodeEventHandler">
            <summary>
            服务节点委托
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Nodes.NodeEventArgs">
            <summary>
            Node节点
            </summary>
        </member>
        <member name="M:MySoft.IoC.Nodes.NodeEventArgs.#ctor(System.String)">
            <summary>
            实例化NodeEventArgs
            </summary>
            <param name="nodeKey"></param>
        </member>
        <member name="P:MySoft.IoC.Nodes.NodeEventArgs.NodeKey">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Nodes.NodeEventArgs.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Threading.Timer">
            <summary>
            This class is a timer that performs some tasks periodically.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Threading.Timer._taskTimer">
            <summary>
            This timer is used to perfom the task at spesified intervals.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Threading.Timer._running">
            <summary>
            Indicates that whether timer is running or stopped.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Threading.Timer._performingTasks">
            <summary>
            Indicates that whether performing the task or _taskTimer is in sleep mode.
            This field is used to wait executing tasks when stopping Timer.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.Timer.#ctor(System.Int32)">
            <summary>
            Creates a new Timer.
            </summary>
            <param name="period">Task period of timer (as milliseconds)</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.Timer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new Timer.
            </summary>
            <param name="period">Task period of timer (as milliseconds)</param>
            <param name="runOnStart">Indicates whether timer raises Elapsed event on Start method of Timer for once</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.Timer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.Timer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.Timer.WaitToStop">
            <summary>
            Waits the service to stop.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.Timer.TimerCallBack(System.Object)">
            <summary>
            This method is called by _taskTimer.
            </summary>
            <param name="state">Not used argument</param>
        </member>
        <member name="E:MySoft.IoC.Communication.Threading.Timer.Elapsed">
            <summary>
            This event is raised periodically according to Period of Timer.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Threading.Timer.Period">
            <summary>
            Task period of timer (as milliseconds).
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Threading.Timer.RunOnStart">
            <summary>
            Indicates whether timer raises Elapsed event on Start method of Timer for once.
            Default: False.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.ConnectInfo">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ConnectInfo.ConnectTime">
            <summary>
            调用时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ConnectInfo.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ConnectInfo.ServerIPAddress">
            <summary>
            服务端IP
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ConnectInfo.ServerPort">
            <summary>
            服务端Port
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ConnectInfo.Connected">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.CallError">
            <summary>
            调用异常信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallError.Caller">
            <summary>
            调用信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallError.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallError.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallError.HtmlError">
            <summary>
            html错误信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.CallTimeout">
            <summary>
            调用超时
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallTimeout.Caller">
            <summary>
            调用信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallTimeout.ElapsedTime">
            <summary>
            总耗时
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallTimeout.Count">
            <summary>
            数据数
            </summary>
        </member>
        <member name="T:MySoft.IoC.SimpleServiceContainer">
            <summary>
            The simple service container.
            </summary>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.DiscoverServices(System.String)">
            <summary>
            处理服务
            </summary>
            <param name="sectionKey"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.CreateComponents(Castle.Core.ComponentModel[])">
            <summary>
            创建组件
            </summary>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.GetComponentModels``1(Castle.Windsor.WindsorContainer)">
            <summary>
            获取约束的实现
            </summary>
            <typeparam name="ContractType"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.#ctor(MySoft.IoC.CastleFactoryType)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.SimpleServiceContainer"/> class.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.RegisterComponent(System.String,System.Type,System.Type)">
            <summary>
            Registers the component.
            </summary>
            <param name="key"></param>
            <param name="serviceType"></param>
            <param name="classType"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.RegisterComponent(System.String,System.Type,System.Object)">
            <summary>
            Registers the component.
            </summary>
            <param name="key"></param>
            <param name="serviceType"></param>
            <param name="instance"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.RegisterComponents(System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Registers the components.
            </summary>
            <param name="serviceKeyTypes">The service key types.</param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Register(System.Type,System.Type)">
            <summary>
            Register ocal service
            </summary>
            <param name="serviceType"></param>
            <param name="classType"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Register(System.String,System.Type,System.Type)">
            <summary>
            Register ocal service
            </summary>
            <param name="key"></param>
            <param name="serviceType"></param>
            <param name="instance"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Register(System.Type,System.Object)">
            <summary>
            Register ocal service
            </summary>
            <param name="serviceType"></param>
            <param name="classType"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Register(System.String,System.Type,System.Object)">
            <summary>
            Register ocal service
            </summary>
            <param name="key"></param>
            <param name="serviceType"></param>
            <param name="instance"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Release(System.Object)">
            <summary>
            Releases the specified obj.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Resolve(System.Type)">
            <summary>
            Resolve local service
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Resolve(System.String)">
            <summary>
            Resolve local service
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Resolve``1">
            <summary>
            Resolve local service
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Resolve``1(System.String)">
            <summary>
            Resolve local service
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Contains``1(System.String)">
            <summary>
            是否包含服务
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.GetServiceTypes``1">
            <summary>
            获取约束的接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.WriteLog(System.String,MySoft.Logger.LogType)">
            <summary>
            输出日志
            </summary>
            <param name="log"></param>
            <param name="type"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.WriteError(System.Exception)">
            <summary>
            输出错误
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Dispose">
            <summary>
            Disposes this object and closes underlying connection.
            </summary>
        </member>
        <member name="P:MySoft.IoC.SimpleServiceContainer.Kernel">
            <summary>
            Gets the kernel.
            </summary>
            <value>The kernel.</value>
        </member>
        <member name="P:MySoft.IoC.SimpleServiceContainer.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="E:MySoft.IoC.SimpleServiceContainer.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="E:MySoft.IoC.SimpleServiceContainer.OnError">
            <summary>
            OnError event.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Configuration.CastleFactoryConfigurationHandler">
            <summary>
            服务配置类
            </summary>
        </member>
        <member name="T:MySoft.IoC.Mvp.IPresenter">
            <summary>
            The extended interface of all presenters
            </summary>
        </member>
        <member name="M:MySoft.IoC.Mvp.IPresenter.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Mvp.IPresenter.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Mvp.IPresenter.TypeOfView">
            <summary>
            Gets the type of view.
            </summary>
            <value>The type of view.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.IPresenter.TypeOfModels">
            <summary>
            Gets the types of model.
            </summary>
            <value>The types of model.</value>
        </member>
        <member name="T:MySoft.IoC.Mvp.Presenter`1">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`1.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`1.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`1.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`1.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Mvp.Presenter`1"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`1.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`1.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Mvp.Presenter`2">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`2.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`2.model">
            <summary>
            The model
            </summary>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`2.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`2.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`2.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Mvp.Presenter`2"/> is initialized.
            Only when both view and model are binded, a presenter is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`2.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`2.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Mvp.Presenter`3">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType1"></typeparam>
            <typeparam name="IModelType2"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`3.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`3.model1">
            <summary>
            The model 1
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`3.model2">
            <summary>
            The model 2
            </summary>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`3.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`3.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`3.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Mvp.Presenter`3"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`3.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`3.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Mvp.Presenter`4">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType1"></typeparam>
            <typeparam name="IModelType2"></typeparam>
            <typeparam name="IModelType3"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`4.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`4.model1">
            <summary>
            The model 1
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`4.model2">
            <summary>
            The model 2
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`4.model3">
            <summary>
            The model 3
            </summary>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`4.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`4.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`4.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Mvp.Presenter`4"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`4.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`4.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Mvp.Presenter`5">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType1"></typeparam>
            <typeparam name="IModelType2"></typeparam>
            <typeparam name="IModelType3"></typeparam>
            <typeparam name="IModelType4"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`5.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`5.model1">
            <summary>
            The model 1
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`5.model2">
            <summary>
            The model 2
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`5.model3">
            <summary>
            The model 3
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`5.model4">
            <summary>
            The model 4
            </summary>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`5.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`5.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`5.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Mvp.Presenter`5"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`5.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`5.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Mvp.Presenter`6">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType1"></typeparam>
            <typeparam name="IModelType2"></typeparam>
            <typeparam name="IModelType3"></typeparam>
            <typeparam name="IModelType4"></typeparam>
            <typeparam name="IModelType5"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`6.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`6.model1">
            <summary>
            The model 1
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`6.model2">
            <summary>
            The model 2
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`6.model3">
            <summary>
            The model 3
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`6.model4">
            <summary>
            The model 4
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`6.model5">
            <summary>
            The model 5
            </summary>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`6.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`6.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`6.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Mvp.Presenter`6"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`6.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`6.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Mvp.Presenter`7">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType1"></typeparam>
            <typeparam name="IModelType2"></typeparam>
            <typeparam name="IModelType3"></typeparam>
            <typeparam name="IModelType4"></typeparam>
            <typeparam name="IModelType5"></typeparam>
            <typeparam name="IModelType6"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`7.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`7.model1">
            <summary>
            The model 1
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`7.model2">
            <summary>
            The model 2
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`7.model3">
            <summary>
            The model 3
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`7.model4">
            <summary>
            The model 4
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`7.model5">
            <summary>
            The model 5
            </summary>
        </member>
        <member name="F:MySoft.IoC.Mvp.Presenter`7.model6">
            <summary>
            The model 6
            </summary>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`7.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Mvp.Presenter`7.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`7.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Mvp.Presenter`7"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`7.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Mvp.Presenter`7.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Services.ChannelResult">
            <summary>
            通道等待响应
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.ChannelResult.#ctor(MySoft.IoC.Communication.Scs.Server.IScsServerClient,MySoft.IoC.IDataContext)">
            <summary>
            实例化ChannelResult
            </summary>
            <param name="channel"></param>
            <param name="context"></param>
        </member>
        <member name="P:MySoft.IoC.Services.ChannelResult.Channel">
            <summary>
            通道
            </summary>
        </member>
        <member name="P:MySoft.IoC.Services.ChannelResult.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:MySoft.IoC.Callback.MessageListener">
            <summary>
            消息监听
            </summary>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageListener.#ctor(MySoft.IoC.Communication.Scs.Server.IScsServerClient,MySoft.IoC.IStatusListener)">
            <summary>
            初始化消息监听器
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageListener.#ctor(MySoft.IoC.Communication.Scs.Server.IScsServerClient,MySoft.IoC.IStatusListener,MySoft.IoC.SubscribeOptions,System.String[])">
            <summary>
            初始化消息监听器
            </summary>
            <param name="channel"></param>
            <param name="innerListener"></param>
            <param name="options"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageListener.Notify(MySoft.IoC.Messages.ConnectInfo)">
            <summary>
            通知消息
            </summary>
            <param name="connectInfo"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageListener.Notify(System.String,System.Int32,MySoft.IoC.Messages.AppClient)">
            <summary>
            通知消息
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="appClient"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageListener.Notify(MySoft.IoC.Messages.ServerStatus)">
            <summary>
            通知消息
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageListener.Notify(MySoft.IoC.Messages.CallError)">
            <summary>
            错误信息
            </summary>
            <param name="callError"></param>
        </member>
        <member name="M:MySoft.IoC.Callback.MessageListener.Notify(MySoft.IoC.Messages.CallTimeout)">
            <summary>
            超时信息
            </summary>
            <param name="callTimeout"></param>
        </member>
        <member name="P:MySoft.IoC.Callback.MessageListener.PushTime">
            <summary>
            推送时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.Callback.MessageListener.Channel">
            <summary>
            远程客户端
            </summary>
        </member>
        <member name="P:MySoft.IoC.Callback.MessageListener.Options">
            <summary>
            订阅选项
            </summary>
        </member>
        <member name="P:MySoft.IoC.Callback.MessageListener.Types">
            <summary>
            订阅的类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Callback.MessageListener.Apps">
            <summary>
            订阅的应用
            </summary>
        </member>
        <member name="T:MySoft.IoC.HttpServer.Config.HttpApiItem">
            <summary>
            HttpApiItem类
            </summary>
        </member>
        <member name="T:MySoft.IoC.HttpServer.Config.HttpApiService">
            <summary>
            HttpApiService类
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.Config.HttpApiService.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.Config.HttpApiService.FullName">
            <summary>
            名称全称
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.Config.HttpApiService.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.Config.HttpApiService.ApiItems">
            <summary>
            Api集合
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.Config.HttpApiItem.CacheTime">
            <summary>
            数据缓存时间（单位：秒）
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.Config.HttpApiItem.Authorized">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.Config.HttpApiItem.AuthParameter">
            <summary>
            认证参数
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.Config.HttpApiItem.Method">
            <summary>
            Http响应方式
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.Config.HttpApiItem.HttpMethod">
            <summary>
            Http响应方式
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Client.Tcp.ScsTcpClient">
            <summary>
            This class is used to communicate with server over TCP/IP protocol.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Client.Tcp.ScsTcpClient._serverEndPoint">
            <summary>
            The endpoint address of the server.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.Tcp.ScsTcpClient.#ctor(MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint)">
            <summary>
            Creates a new ScsTcpClient object.
            </summary>
            <param name="serverEndPoint">The endpoint address to connect to the server</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.Tcp.ScsTcpClient.CreateCommunicationChannel">
            <summary>
            Creates a communication channel using ServerIpAddress and ServerPort.
            </summary>
            <returns>Ready communication channel to communicate</returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.CommunicationHelper">
            <summary>
            CommunicationHelper
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.CommunicationHelper.MaxCommunicationCount">
            <summary>
            Max communication count.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.CommunicationHelper.#cctor">
            <summary>
            实例化CommunicationHelper
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.CommunicationHelper.Pop(MySoft.IoC.Communication.Scs.Communication.ICommunicationProtocol)">
            <summary>
            Pop SocketAsyncEventArgs.
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.CommunicationHelper.Push(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Push SocketAsyncEventArgs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.CommunicationHelper.Count">
            <summary>
            Pool count.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Logger.IServiceRecorder">
            <summary>
            服务日志记录
            </summary>
        </member>
        <member name="M:MySoft.IoC.Logger.IServiceRecorder.Call(System.Object,MySoft.IoC.Logger.RecordEventArgs)">
            <summary>
            记录服务请求
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:MySoft.IoC.IDataContext.Caller">
            <summary>
            Caller信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.IDataContext.Request">
            <summary>
            请求信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.IDataContext.Buffer">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="P:MySoft.IoC.IDataContext.Count">
            <summary>
            记录数
            </summary>
        </member>
        <member name="T:MySoft.IoC.CallerContext">
            <summary>
            调用上下文
            </summary>
        </member>
        <member name="P:MySoft.IoC.CallerContext.MessageId">
            <summary>
            消息Id
            </summary>
        </member>
        <member name="P:MySoft.IoC.CallerContext.Caller">
            <summary>
            Caller信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.CallerContext.Request">
            <summary>
            请求信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.CallerContext.Message">
            <summary>
            响应消息
            </summary>
        </member>
        <member name="P:MySoft.IoC.CallerContext.Buffer">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="P:MySoft.IoC.CallerContext.Count">
            <summary>
            记录数
            </summary>
        </member>
        <member name="T:MySoft.IoC.ResponseType">
            <summary>
            数据传输类型
            </summary>
        </member>
        <member name="F:MySoft.IoC.ResponseType.Binary">
            <summary>
            二进制格式
            </summary>
        </member>
        <member name="F:MySoft.IoC.ResponseType.Json">
            <summary>
            Json格式
            </summary>
        </member>
        <member name="T:MySoft.IoC.Services.SyncCaller">
            <summary>
            同步调用器
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.SyncCaller.#ctor(System.Boolean)">
            <summary>
            实例化SyncCaller
            </summary>
            <param name="fromServer"></param>
        </member>
        <member name="M:MySoft.IoC.Services.SyncCaller.#ctor(System.Boolean,MySoft.Cache.IDataCache)">
            <summary>
            实例化SyncCaller
            </summary>
            <param name="fromServer"></param>
            <param name="cache"></param>
        </member>
        <member name="M:MySoft.IoC.Services.SyncCaller.Run(MySoft.IoC.IService,MySoft.IoC.OperationContext,MySoft.IoC.Messages.RequestMessage)">
            <summary>
            同步调用服务
            </summary>
            <param name="service"></param>
            <param name="context"></param>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.SyncCaller.CheckCache(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            判断是否需要缓存
            </summary>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.SyncCaller.SetResponse(MySoft.IoC.Messages.RequestMessage,MySoft.IoC.ResponseItem)">
            <summary>
            获取响应信息
            </summary>
            <param name="reqMsg"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.SyncCaller.GetResponse(MySoft.IoC.IService,MySoft.IoC.OperationContext,MySoft.IoC.Messages.RequestMessage)">
            <summary>
            调用方法
            </summary>
            <param name="service"></param>
            <param name="context"></param>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.SyncCaller.GetResponseFromCache(MySoft.IoC.IService,MySoft.IoC.OperationContext,MySoft.IoC.Messages.RequestMessage)">
            <summary>
            从缓存中获取数据
            </summary>
            <param name="service"></param>
            <param name="context"></param>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.SyncCaller.GetResponseFromLocalCache(System.String,MySoft.IoC.IService,MySoft.IoC.OperationContext,MySoft.IoC.Messages.RequestMessage)">
            <summary>
            获取响应从本地缓存
            </summary>
            <param name="callKey"></param>
            <param name="service"></param>
            <param name="context"></param>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.SyncCaller.GetResponseFromRemoteCache(System.String,MySoft.IoC.IService,MySoft.IoC.OperationContext,MySoft.IoC.Messages.RequestMessage)">
            <summary>
            获取响应从远程缓存
            </summary>
            <param name="callKey"></param>
            <param name="service"></param>
            <param name="context"></param>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.SyncCaller.GetCallerKey(MySoft.IoC.IService,MySoft.IoC.Messages.AppCaller)">
            <summary>
            获取CallerKey
            </summary>
            <param name="service"></param>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.SyncCaller.CheckResponse(MySoft.IoC.Messages.ResponseMessage)">
            <summary>
            检测响应是否有效
            </summary>
            <param name="resMsg"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Messages.CallEventArgs">
            <summary>
            调用事件参数
            </summary>
        </member>
        <member name="M:MySoft.IoC.Messages.CallEventArgs.#ctor(MySoft.IoC.Messages.AppCaller)">
            <summary>
            实例化CallEventArgs
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallEventArgs.Value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.CustomWireProtocol">
            <summary>
            自定义系列化协议
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol">
            <summary>
            Default communication protocol between server and clients to send and receive a message.
            It uses .NET binary serialization to write and read messages.
            
            A Message format:
            [Message Length (4 bytes)][Serialized Message Content]
            
            If a message is serialized to byte array as N bytes, this protocol
            adds 4 bytes size information to head of the message bytes, so total length is (4 + N) bytes.
            
            This class can be derived to change serializer (default: BinaryFormatter). To do this,
            SerializeMessage and DeserializeMessage methods must be overrided.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.MaxMessageLength">
            <summary>
            Maximum length of a message.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol._receiveMemoryStream">
            <summary>
            This MemoryStream object is used to collect receiving bytes to build messages.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.#ctor">
            <summary>
            Creates a new instance of BinarySerializationProtocol.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.GetBytes(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Serializes a message to a byte array to send to remote application.
            This method is synchronized. So, only one thread can call it concurrently.
            </summary>
            <param name="message">Message to be serialized</param>
            <exception cref="T:MySoft.IoC.Communication.Scs.Communication.CommunicationException">Throws CommunicationException if message is bigger than maximum allowed message length.</exception>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.CreateMessages(System.Byte[])">
            <summary>
            Builds messages from a byte array that is received from remote application.
            The Byte array may contain just a part of a message, the protocol must
            cumulate bytes to build messages.
            This method is synchronized. So, only one thread can call it concurrently.
            </summary>
            <param name="receivedBytes">Received bytes from remote application</param>
            <returns>
            List of messages.
            Protocol can generate more than one message from a byte array.
            Also, if received bytes are not sufficient to build a message, the protocol
            may return an empty list (and save bytes to combine with next method call).
            </returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.Reset">
            <summary>
            This method is called when connection with remote application is reset (connection is renewing or first connecting).
            So, wire protocol must reset itself.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.SerializeMessage(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            This method is used to serialize a IScsMessage to a byte array.
            This method can be overrided by derived classes to change serialization strategy.
            It is a couple with DeserializeMessage method and must be overrided together.
            </summary>
            <param name="message">Message to be serialized</param>
            <returns>
            Serialized message bytes.
            Does not include length of the message.
            </returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.DeserializeMessage(System.Byte[])">
            <summary>
            This method is used to deserialize a IScsMessage from it's bytes.
            This method can be overrided by derived classes to change deserialization strategy.
            It is a couple with SerializeMessage method and must be overrided together.
            </summary>
            <param name="bytes">
            Bytes of message to be deserialized (does not include message length. It consist
            of a single whole message)
            </param>
            <returns>Deserialized message</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.ReadSingleMessage(System.Collections.Generic.ICollection{MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage})">
            <summary>
            This method tries to read a single message and add to the messages collection. 
            </summary>
            <param name="messages">Messages collection to collect messages</param>
            <returns>
            Returns a boolean value indicates that if there is a need to re-call this method.
            </returns>
            <exception cref="T:MySoft.IoC.Communication.Scs.Communication.CommunicationException">Throws CommunicationException if message is bigger than maximum allowed message length.</exception>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.WriteInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a int value to a byte array from a starting index.
            </summary>
            <param name="buffer">Byte array to write int value</param>
            <param name="startIndex">Start index of byte array to write</param>
            <param name="number">An integer value to write</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.ReadInt32(System.IO.Stream)">
            <summary>
            Deserializes and returns a serialized integer.
            </summary>
            <returns>Deserialized integer</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.ReadByteArray(System.IO.Stream,System.Int32)">
            <summary>
            Reads a byte array with specified length.
            </summary>
            <param name="stream">Stream to read from</param>
            <param name="length">Length of the byte array to read</param>
            <returns>Read byte array</returns>
            <exception cref="T:System.IO.EndOfStreamException">Throws EndOfStreamException if can not read from stream.</exception>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocol.DeserializationAppDomainBinder">
            <summary>
            This class is used in deserializing to allow deserializing objects that are defined
            in assemlies that are load in runtime (like PlugIns).
            </summary>
        </member>
        <member name="M:MySoft.IoC.Messages.CustomWireProtocol.#ctor(System.Boolean)">
            <summary>
            实例化CustomWireProtocol
            </summary>
            <param name="compress"></param>
        </member>
        <member name="M:MySoft.IoC.Messages.CustomWireProtocol.SerializeMessage(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            序列化流
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Messages.CustomWireProtocol.DeserializeMessage(System.Byte[])">
            <summary>
            反序列化流
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Server.ScsServerClient">
            <summary>
            This class represents a client in server side.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Server.IScsServerClient">
            <summary>
            Represents a client from a perspective of a server.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.IScsServerClient.Disconnect">
            <summary>
            Disconnects from server.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Server.IScsServerClient.Disconnected">
            <summary>
            This event is raised when client disconnected from server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.IScsServerClient.ClientId">
            <summary>
            Unique identifier for this client in server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.IScsServerClient.RemoteEndPoint">
            <summary>
             Gets endpoint of remote application.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.IScsServerClient.CommunicationState">
            <summary>
            Gets the current communication state.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.IScsServerClient.UserToken">
            <summary>
            User token info.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Server.ScsServerClient._communicationChannel">
            <summary>
            The communication channel that is used by client to send and receive messages.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerClient.#ctor(MySoft.IoC.Communication.Scs.Communication.Channels.ICommunicationChannel)">
            <summary>
            Creates a new ScsClient object.
            </summary>
            <param name="communicationChannel">The communication channel that is used by client to send and receive messages</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerClient.Disconnect">
            <summary>
            Disconnects from client and closes underlying communication channel.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerClient.SendMessage(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Sends a message to the client.
            </summary>
            <param name="message">Message to be sent</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerClient.CommunicationChannel_Disconnected(System.Object,System.EventArgs)">
            <summary>
            Handles Disconnected event of _communicationChannel object.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerClient.CommunicationChannel_MessageReceived(System.Object,MySoft.IoC.Communication.Scs.Communication.Messages.MessageEventArgs)">
            <summary>
            Handles MessageReceived event of _communicationChannel object.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerClient.CommunicationChannel_MessageSent(System.Object,MySoft.IoC.Communication.Scs.Communication.Messages.MessageEventArgs)">
            <summary>
            Handles MessageSent event of _communicationChannel object.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerClient.OnDisconnected">
            <summary>
            Raises Disconnected event.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerClient.OnMessageReceived(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Raises MessageReceived event.
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerClient.OnMessageSent(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Raises MessageSent event.
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerClient.OnMessageError(System.Exception)">
            <summary>
            Raises MessageReceived event.
            </summary>
            <param name="error"></param>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Server.ScsServerClient.MessageReceived">
            <summary>
            This event is raised when a new message is received.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Server.ScsServerClient.MessageSent">
            <summary>
            This event is raised when a new message is sent without any error.
            It does not guaranties that message is properly handled and processed by remote application.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Server.ScsServerClient.MessageError">
            <summary>
            Receive error message.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Server.ScsServerClient.Disconnected">
            <summary>
            This event is raised when client is disconnected from server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ScsServerClient.ClientId">
            <summary>
            Unique identifier for this client in server.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ScsServerClient.CommunicationState">
            <summary>
            Gets the communication state of the Client.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ScsServerClient.UserToken">
            <summary>
            Get or set user token info.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ScsServerClient.WireProtocol">
            <summary>
            Gets/sets wire protocol that is used while reading and writing messages.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ScsServerClient.RemoteEndPoint">
            <summary>
             Gets endpoint of remote application.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ScsServerClient.LastReceivedMessageTime">
            <summary>
            Gets the time of the last succesfully received message.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ScsServerClient.LastSentMessageTime">
            <summary>
            Gets the time of the last succesfully received message.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Messages.MessageEventArgs">
            <summary>
            Stores message to be used by an event.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.MessageEventArgs.#ctor(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Creates a new MessageEventArgs object.
            </summary>
            <param name="message">Message object that is associated with this event</param>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messages.MessageEventArgs.Message">
            <summary>
            Message object that is associated with this event.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Messages.ErrorEventArgs">
            <summary>
            Error message args.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new MessageEventArgs object.
            </summary>
            <param name="message">Message object that is associated with this event</param>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messages.ErrorEventArgs.Error">
            <summary>
            Message error.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.CommunicationStateException">
            <summary>
            This application is thrown if communication is not expected state.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.CommunicationStateException.#ctor">
            <summary>
            Contstructor.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.CommunicationStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Contstructor for serializing.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.CommunicationStateException.#ctor(System.String)">
            <summary>
            Contstructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.CommunicationStateException.#ctor(System.String,System.Exception)">
            <summary>
            Contstructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Client.ClientReConnecter">
            <summary>
            This class is used to automatically re-connect to server if disconnected.
            It attempts to reconnect to server periodically until connection established.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Client.ClientReConnecter._client">
            <summary>
            Reference to client object.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Client.ClientReConnecter._reconnectTimer">
            <summary>
            Timer to  attempt ro reconnect periodically.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Client.ClientReConnecter._disposed">
            <summary>
            Indicates the dispose state of this object.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ClientReConnecter.#ctor(MySoft.IoC.Communication.Scs.Client.IConnectableClient)">
            <summary>
            Creates a new ClientReConnecter object.
            It is not needed to start ClientReConnecter since it automatically
            starts when the client disconnected.
            </summary>
            <param name="client">Reference to client object</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException if client is null.</exception>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ClientReConnecter.Dispose">
            <summary>
            Disposes this object.
            Does nothing if already disposed.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ClientReConnecter.Client_Disconnected(System.Object,System.EventArgs)">
            <summary>
            Handles Disconnected event of _client object.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Client.ClientReConnecter.ReconnectTimer_Elapsed(System.Object,System.EventArgs)">
            <summary>
            Hadles Elapsed event of _reconnectTimer.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Client.ClientReConnecter.ReConnectCheckPeriod">
            <summary>
            Reconnect check period.
            Default: 20 seconds.
            </summary>
        </member>
        <member name="T:MySoft.IoC.IStartable">
            <summary>
            自启动接口
            </summary>
        </member>
        <member name="T:MySoft.IoC.IInitializable">
            <summary>
            初始化接口
            </summary>
        </member>
        <member name="T:MySoft.IoC.Aspect.AspectSwitcherAttribute">
            <summary>
            切面方法选择器
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.AspectSwitcherAttribute.InterceptorTypes">
            <summary>
            使用拦截器的类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.AspectSwitcherAttribute.UseAspect">
            <summary>
            是否使用切面处理
            </summary>
        </member>
        <member name="P:MySoft.IoC.Aspect.AspectSwitcherAttribute.Description">
            <summary>
            响应的消息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.TimeStatus">
            <summary>
            时间状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.TimeStatus.CounterTime">
            <summary>
            记数时间
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.TimeStatusCollection">
            <summary>
            时间状态集合
            </summary>
        </member>
        <member name="M:MySoft.IoC.Messages.TimeStatusCollection.GetOrCreate(System.DateTime)">
            <summary>
            获取或创建
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Messages.TimeStatusCollection.ToList">
            <summary>
            返回列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Messages.TimeStatusCollection.GetNewest">
            <summary>
            获取最后一条
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Messages.TimeStatusCollection.Clear">
            <summary>
            清除字典中的数据
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.TimeStatusCollection.Count">
            <summary>
            记录数
            </summary>
        </member>
        <member name="T:MySoft.IoC.Services.DynamicService">
            <summary>
            The dynamic service.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.DynamicService.#ctor(MySoft.IoC.IContainer,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.Services.DynamicService"/> class.
            </summary>
            <param name="container"></param>
            <param name="serviceType">Type of the service interface.</param>
        </member>
        <member name="M:MySoft.IoC.Services.DynamicService.Run(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            Runs the specified MSG.
            </summary>
            <param name="reqMsg">The MSG.</param>
            <returns>The msg.</returns>
        </member>
        <member name="M:MySoft.IoC.Services.DynamicService.InvokeMethod(System.Reflection.MethodInfo,MySoft.IoC.Messages.RequestMessage)">
            <summary>
            调用方法
            </summary>
            <param name="callMethod"></param>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Services.DynamicService.ResolveParameters(System.Reflection.MethodInfo,MySoft.IoC.Messages.RequestMessage)">
            <summary>
            解析参数
            </summary>
            <param name="callMethod"></param>
            <param name="reqMsg"></param>
        </member>
        <member name="M:MySoft.IoC.Services.DynamicService.HandleMessage(MySoft.IoC.Messages.RequestMessage,MySoft.IoC.Messages.ResponseMessage)">
            <summary>
            处理消息
            </summary>
            <param name="reqMsg"></param>
            <param name="resMsg"></param>
        </member>
        <member name="T:MySoft.IoC.ServiceNodeInfo">
            <summary>
            The service node info.
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceNodeInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.ServiceNodeInfo"/> class.
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceNodeInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:MySoft.IoC.ServiceNodeInfo.Key">
            <summary>
            Gets or sets the DEFAULT_KEY.
            </summary>
            <value>The DEFAULT_KEY.</value>
        </member>
        <member name="P:MySoft.IoC.ServiceNodeInfo.Sevice">
            <summary>
            Gets or sets the sevice.
            </summary>
            <value>The sevice.</value>
        </member>
        <member name="P:MySoft.IoC.ServiceNodeInfo.Implementation">
            <summary>
            Gets or sets the implementation.
            </summary>
            <value>The implementation.</value>
        </member>
        <member name="T:MySoft.IoC.Messages.ParameterCollection">
            <summary>
            The parameter collection type used by request msg.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Messages.ParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.Messages.ParameterCollection"/> class.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Messages.ParameterCollection.Remove(System.String)">
            <summary>
            Removes the specified param name.
            </summary>
            <param name="paramName">Name of the param.</param>
        </member>
        <member name="M:MySoft.IoC.Messages.ParameterCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Messages.ParameterCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> with the specified param name.
            </summary>
            <value></value>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterCollection.Count">
            <summary>
            Get param count.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ParameterCollection.Keys">
            <summary>
            Get param Keys;
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.ServiceMessageEventArgs">
            <summary>
            服务响应事件参数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceMessageEventArgs.MessageId">
            <summary>
            消息Id
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceMessageEventArgs.Request">
            <summary>
            请求消息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ServiceMessageEventArgs.Result">
            <summary>
            响应的消息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.ErrorMessageEventArgs">
            <summary>
            错误消息事件参数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ErrorMessageEventArgs.MessageId">
            <summary>
            消息Id
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ErrorMessageEventArgs.Request">
            <summary>
            请求信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ErrorMessageEventArgs.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Mvp.PresenterFactory">
            <summary>
            Presenter Factory
            </summary>
        </member>
        <member name="M:MySoft.IoC.Mvp.PresenterFactory.Create">
            <summary>
            Creates this singleton instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Mvp.PresenterFactory.GetPresenter``1(System.Object)">
            <summary>
            Gets the presenter.
            </summary>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Logger.IServiceLog">
            <summary>
            执行并输出日志的接口
            </summary>
        </member>
        <member name="M:MySoft.IoC.Logger.IServiceLog.Begin(MySoft.IoC.Messages.CallMessage)">
            <summary>
            开始执行命令
            </summary>
            <param name="reqMsg"></param>
        </member>
        <member name="M:MySoft.IoC.Logger.IServiceLog.End(MySoft.IoC.Messages.CallMessage,MySoft.IoC.Messages.ReturnMessage,System.Int64)">
            <summary>
            结束执行命令
            </summary>
            <param name="reqMsg"></param>
            <param name="resMsg"></param>
            <param name="elapsedTime"></param>
        </member>
        <member name="T:MySoft.IoC.Aspect.InterceptorSelector">
            <summary>
            拦截器选择
            </summary>
        </member>
        <member name="T:MySoft.IoC.IStatusListener">
            <summary>
            状态信息监听
            </summary>
        </member>
        <member name="M:MySoft.IoC.IStatusListener.Push(MySoft.IoC.Messages.ConnectInfo)">
            <summary>
            推送客户端连接信息
            </summary>
            <param name="connectInfo"></param>
        </member>
        <member name="M:MySoft.IoC.IStatusListener.Change(System.String,System.Int32,MySoft.IoC.Messages.AppClient)">
            <summary>
            推送改变客户端信息
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="appClient"></param>
        </member>
        <member name="M:MySoft.IoC.IStatusListener.Push(MySoft.IoC.Messages.CallError)">
            <summary>
            推送实时错误信息
            </summary>
            <param name="callError"></param>
        </member>
        <member name="M:MySoft.IoC.IStatusListener.Push(MySoft.IoC.Messages.CallTimeout)">
            <summary>
            调用超时事件信息
            </summary>
            <param name="callTimeout"></param>
        </member>
        <member name="M:MySoft.IoC.IStatusListener.Push(MySoft.IoC.Messages.ServerStatus)">
            <summary>
            推送服务状态信息（包括SummaryStatus，HighestStatus，TimeStatus）
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Messages.ResponseMessage">
            <summary>
            The response msg.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.MessageBase">
            <summary>
            request base
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.MessageBase.TransactionId">
            <summary>
            Gets or sets the transaction id.
            </summary>
            <value>The transaction id.</value>
        </member>
        <member name="P:MySoft.IoC.Messages.MessageBase.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:MySoft.IoC.Messages.MessageBase.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the sub service.</value>
        </member>
        <member name="P:MySoft.IoC.Messages.MessageBase.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:MySoft.IoC.Messages.MessageBase.Message">
            <summary>
            响应的消息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ResponseMessage.ElapsedTime">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ResponseMessage.Value">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:MySoft.IoC.Messages.ResponseMessage.Error">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:MySoft.IoC.Messages.ResponseMessage.IsError">
            <summary>
            是否有异常
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ResponseMessage.Count">
            <summary>
            记录数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ResponseMessage.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:MySoft.IoC.Messages.ScsResultMessage">
            <summary>
            This message is used to send/receive a raw byte array as message data.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Messages.ScsResultMessage.#ctor(MySoft.IoC.Messages.MessageBase)">
            <summary>
            Creates a new ScsResultMessage object with Data property.
            </summary>
            <param name="Data">Message data that is being transmitted</param>
        </member>
        <member name="M:MySoft.IoC.Messages.ScsResultMessage.#ctor(MySoft.IoC.Messages.MessageBase,System.String)">
            <summary>
            Creates a new reply ScsResultMessage object with Data property.
            </summary>
            <param name="Data">Message data that is being transmitted</param>
            <param name="repliedMessageId">
            Replied message id if this is a reply for
            a message.
            </param>
        </member>
        <member name="M:MySoft.IoC.Messages.ScsResultMessage.ToString">
            <summary>
            Creates a string to represents this object.
            </summary>
            <returns>A string to represents this object</returns>
        </member>
        <member name="P:MySoft.IoC.Messages.ScsResultMessage.MessageValue">
            <summary>
            Message data that is being transmitted.
            </summary>
        </member>
        <member name="T:MySoft.IoC.HttpServer.HttpServiceHandler">
            <summary>
            Castle服务处理器
            </summary>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceHandler.#ctor(MySoft.IoC.HttpServer.HttpServiceCaller)">
            <summary>
            初始化CastleServiceHandler
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceHandler.HandleRequest(MySoft.Net.Http.HTTPServerRequest,MySoft.Net.Http.HTTPServerResponse)">
            <summary>
            实现Request响应
            </summary>
            <param name="request"></param>
            <param name="response"></param>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceHandler.ConvertCollection(System.String)">
            <summary>
            转换成NameValueCollection
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceHandler.ConvertJsonString(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            转换成JObject
            </summary>
            <param name="nvget"></param>
            <param name="nvpost"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceHandler.UrlDecodeString(System.String)">
            <summary>
            反编码字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocolFactory">
            <summary>
            This class is used to create Binary Serialization Protocol objects.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.BinarySerialization.BinarySerializationProtocolFactory.CreateWireProtocol">
            <summary>
            Creates a new Wire Protocol object.
            </summary>
            <returns>Newly created wire protocol object</returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Messages.ScsTextMessage">
            <summary>
            This message is used to send/receive a text as message data.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsTextMessage.#ctor">
            <summary>
            Creates a new ScsTextMessage object.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsTextMessage.#ctor(System.String)">
            <summary>
            Creates a new ScsTextMessage object with Text property.
            </summary>
            <param name="text">Message text that is being transmitted</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsTextMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new reply ScsTextMessage object with Text property.
            </summary>
            <param name="text">Message text that is being transmitted</param>
            <param name="repliedMessageId">
            Replied message id if this is a reply for
            a message.
            </param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Messages.ScsTextMessage.ToString">
            <summary>
            Creates a string to represents this object.
            </summary>
            <returns>A string to represents this object</returns>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Messages.ScsTextMessage.Text">
            <summary>
            Message text that is being transmitted.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener">
            <summary>
            This class is used to listen and accept incoming TCP
            connection requests on a TCP port.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.ICommunicationProtocol">
            <summary>
            Communication protocol.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.ICommunicationProtocol.IOCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            On IO completed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener._endPoint">
            <summary>
            The endpoint address of the server to listen incoming connections.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener._listenerSocket">
            <summary>
            Server socket to listen incoming connection requests.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener.#ctor(MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint)">
            <summary>
            Creates a new TcpConnectionListener for given endpoint.
            </summary>
            <param name="endPoint">The endpoint address of the server to listen incoming connections</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener.MySoft#IoC#Communication#Scs#Communication#ICommunicationProtocol#IOCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            IO回调处理
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener.Start">
            <summary>
            Starts listening incoming connections.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener.Stop">
            <summary>
            Stops listening incoming connections.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener.StartSocket">
            <summary>
            Starts listening socket.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener.StopSocket">
            <summary>
            Stops listening socket.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener.StartAcceptSocket">
            <summary>
            Start accept socket.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener.OnAcceptCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Socket accept completed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener.CreateAsyncSEA">
            <summary>
            Create socket event args.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpConnectionListener.DisposeAsyncSEA(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Dispose socket event args.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:MySoft.IoC.Messages.InvokeData">
            <summary>
            Invoke 值
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.InvokeData.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.InvokeData.Count">
            <summary>
            记录数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.InvokeData.ElapsedTime">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.InvokeData.OutParameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.InvokeMessage">
            <summary>
            调用消息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.InvokeMessage.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.InvokeMessage.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.InvokeMessage.Parameters">
            <summary>
            参数值，必须为json格式
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.InvokeMessage.CacheTime">
            <summary>
            缓存时间（单位：秒）
            </summary>
        </member>
        <member name="T:MySoft.IoC.HttpServer.HttpServiceCaller">
            <summary>
            Http服务调用
            </summary>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceCaller.#ctor(MySoft.IoC.Configuration.CastleServiceConfiguration,MySoft.IoC.IServiceContainer,MySoft.IoC.Services.SyncCaller)">
            <summary>
            HttpServiceCaller初始化
            </summary>
            <param name="config"></param>
            <param name="container"></param>
            <param name="caller"></param>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceCaller.InitCaller(MySoft.IoC.HttpServer.IHttpApiResolver)">
            <summary>
            初始化Caller
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceCaller.GetHttpDocument(System.String)">
            <summary>
            获取Http方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceCaller.GetTcpDocument">
            <summary>
            获取服务文档
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceCaller.GetAPIText">
            <summary>
            获取API文档
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceCaller.GetCaller(System.String)">
            <summary>
            获取调用信息
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceCaller.CallMethod(System.String,System.String)">
            <summary>
            调用服务，并返回字符串
            </summary>
            <param name="name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceCaller.GetInvokeData(MySoft.IoC.IService,MySoft.IoC.Messages.InvokeMessage)">
            <summary>
            返回响应数据
            </summary>
            <param name="service"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpServiceCaller.ParseService(System.String)">
            <summary>
            Gets the service.
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Server.ServerClientEventArgs">
            <summary>
            Stores client information to be used by an event.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ServerClientEventArgs.#ctor(MySoft.IoC.Communication.Scs.Server.IScsServerClient)">
            <summary>
            Creates a new ServerClientEventArgs object.
            </summary>
            <param name="channel">Client that is associated with this event</param>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ServerClientEventArgs.Channel">
            <summary>
            Client that is associated with this event.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.ServerClientEventArgs.ConnectCount">
            <summary>
            Get or set server client count.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.SendMessageQueue">
            <summary>
            Send message queue.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.SendMessageQueue.#ctor(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            实例化ScsMessageQueue
            </summary>
            <param name="clientSocket"></param>
            <param name="sendEventArgs"></param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.SendMessageQueue.Send(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage,System.Byte[])">
            <summary>
            发送数据服务
            </summary>
            <param name="message"></param>
            <param name="messageBytes"></param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.SendMessageQueue.ContinueSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            发送数据服务
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.SendMessageQueue.SendAsync(System.Net.Sockets.SocketAsyncEventArgs,MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.BufferMessage)">
            <summary>
            异步发送消息
            </summary>
            <param name="e"></param>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.SendMessageQueue.Dispose">
            <summary>
            Dispose resource.
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.SendMessageQueue.Completed">
            <summary>
            用于完成异步操作的事件
            </summary>
        </member>
        <member name="E:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.SendMessageQueue.Disposed">
            <summary>
            销毁对象
            </summary>
        </member>
        <member name="T:MySoft.IoC.ResponseItem">
            <summary>
            缓存项
            </summary>
        </member>
        <member name="P:MySoft.IoC.ResponseItem.Message">
            <summary>
            响应消息
            </summary>
        </member>
        <member name="P:MySoft.IoC.ResponseItem.Buffer">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="P:MySoft.IoC.ResponseItem.Count">
            <summary>
            记录数
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceCacheHelper">
            <summary>
            缓存扩展类
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceCacheHelper.GetCache(System.String)">
            <summary>
            从文件读取对象
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServiceCacheHelper.Get(MySoft.IoC.CacheKey,System.TimeSpan,System.Func{MySoft.IoC.ResponseItem})">
            <summary>
            （本方法仅适应于本地缓存）
            从缓存中获取数据，如获取失败，返回从指定的方法中获取
            </summary>
            <param name="key"></param>
            <param name="timeout"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServiceCacheHelper.Get(MySoft.IoC.CacheKey,System.TimeSpan,System.Func{System.Object,MySoft.IoC.ResponseItem},System.Object)">
            <summary>
            （本方法仅适应于本地缓存）
            从缓存中获取数据，如获取失败，返回从指定的方法中获取
            </summary>
            <param name="key"></param>
            <param name="timeout"></param>
            <param name="func"></param>
            <param name="state"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServiceCacheHelper.GetResponseItem(MySoft.IoC.CacheKey)">
            <summary>
            获取缓存对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServiceCacheHelper.UpdateCacheObject(System.Object)">
            <summary>
            更新缓存对象
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceCacheHelper.GetResponseItem(MySoft.IoC.CacheKey,System.TimeSpan,System.Func{System.Object,MySoft.IoC.ResponseItem},System.Object)">
            <summary>
            获取数据缓存
            </summary>
            <param name="key"></param>
            <param name="timeout"></param>
            <param name="func"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServiceCacheHelper.GetCacheItem(System.String,System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="path"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServiceCacheHelper.InsertCacheItem(System.String,System.String,MySoft.IoC.ResponseItem,System.TimeSpan)">
            <summary>
            插入缓存
            </summary>
            <param name="path"></param>
            <param name="key"></param>
            <param name="item"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceCacheHelper.GetFilePath(MySoft.IoC.CacheKey)">
            <summary>
            获取文件路径
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Messages.RequestMessage">
            <summary>
            The request msg.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.RequestMessage.AppName">
            <summary>
            Gets or sets the name of the appName.
            </summary>
            <value>The name of the appName.</value>
        </member>
        <member name="P:MySoft.IoC.Messages.RequestMessage.HostName">
            <summary>
            Gets or sets the name of the hostName.
            </summary>
            <value>The name of the hostName.</value>
        </member>
        <member name="P:MySoft.IoC.Messages.RequestMessage.IPAddress">
            <summary>
            Gets or sets the request address
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.RequestMessage.InvokeMethod">
            <summary>
            invoke method
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.RequestMessage.CacheTime">
            <summary>
            数据缓存时间（单位：秒）
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.RequestMessage.MethodInfo">
            <summary>
            响应的方法
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.RequestMessage.RespType">
            <summary>
            传输的数据类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.RequestMessage.Message">
            <summary>
            请求的消息
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServerNode">
            <summary>
            服务器节点
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServerNode.Parse(System.String,System.Int32)">
            <summary>
            返回一个远程节点
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerNode.Parse(System.String)">
            <summary>
            返回一个远程节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerNode.ToString">
            <summary>
            返回字符串形式
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.IoC.ServerNode.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MySoft.IoC.ServerNode.IP">
            <summary>
            Gets or sets the ip.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:MySoft.IoC.ServerNode.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:MySoft.IoC.ServerNode.Compress">
            <summary>
            Gets or sets the compress.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:MySoft.IoC.ServerNode.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>The timeout ：单位（秒）.</value>
        </member>
        <member name="P:MySoft.IoC.ServerNode.MinPool">
            <summary>
            Gets or sets the minpool.
            </summary>
            <value>The maxpool.</value>
        </member>
        <member name="P:MySoft.IoC.ServerNode.MaxPool">
            <summary>
            Gets or sets the maxpool.
            </summary>
            <value>The maxpool.</value>
        </member>
        <member name="P:MySoft.IoC.ServerNode.RespType">
            <summary>
            Gets or sets the resptype
            </summary>
            <value>The resptype.</value>
        </member>
        <member name="T:MySoft.IoC.Configuration.CastleFactoryConfiguration">
            <summary>
            The service factory configuration.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Configuration.CastleFactoryConfiguration.#ctor">
            <summary>
            实例化CastleFactoryConfiguration
            </summary>
        </member>
        <member name="M:MySoft.IoC.Configuration.CastleFactoryConfiguration.GetConfig">
            <summary>
            获取远程对象配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Configuration.CastleFactoryConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="xmlnode"></param>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.AppName">
            <summary>
            Gets or sets the app name.
            </summary>
            <value>The host name.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.DefaultKey">
            <summary>
            Gets or sets the default
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.ProxyServer">
            <summary>
            Gets or sets the proxy
            </summary>
            <value>The proxy.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.ThrowError">
            <summary>
            Gets or sets the throwError
            </summary>
            <value>The throwError.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.EnableCache">
            <summary>
            Gets or sets the enableCache
            </summary>
            <value>The enableCache.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.Nodes">
            <summary>
            Gets or sets the nodes
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="T:MySoft.IoC.InvokeCaller">
            <summary>
            调用者
            </summary>
        </member>
        <member name="M:MySoft.IoC.InvokeCaller.#ctor(MySoft.IoC.Configuration.CastleFactoryConfiguration,MySoft.IoC.IContainer,MySoft.IoC.IService,MySoft.IoC.Services.SyncCaller)">
            <summary>
            实例化InvokeCaller
            </summary>
            <param name="config"></param>
            <param name="container"></param>
            <param name="service"></param>
            <param name="caller"></param>
        </member>
        <member name="M:MySoft.IoC.InvokeCaller.InvokeResponse(MySoft.IoC.Messages.InvokeMessage)">
            <summary>
            调用方法
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.InvokeCaller.GetOperationContext(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            获取上下文对象
            </summary>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.InvokeCaller.Dispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="T:MySoft.IoC.Nodes.ServerConfig">
            <summary>
            服务配置
            </summary>
        </member>
        <member name="M:MySoft.IoC.Nodes.ServerConfig.#ctor">
            <summary>
            实例化ServerConfig
            </summary>
        </member>
        <member name="P:MySoft.IoC.Nodes.ServerConfig.DefaultKey">
            <summary>
            默认节点
            </summary>
        </member>
        <member name="P:MySoft.IoC.Nodes.ServerConfig.Nodes">
            <summary>
            服务节点
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceInvocationHandler`1">
            <summary>
            The base impl class of the service interface, this class is used by service factory to emit service interface impl automatically at runtime.
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceInvocationHandler`1.#ctor(MySoft.IoC.Configuration.CastleFactoryConfiguration,MySoft.IoC.IContainer,MySoft.IoC.IService,MySoft.IoC.Services.SyncCaller,MySoft.IoC.Logger.IServiceLog)">
            <summary>
             Initializes a new instance of the <see cref="!:ServiceInvocationHandler"/> class.
            </summary>
            <param name="config"></param>
            <param name="container"></param>
            <param name="service"></param>
            <param name="caller"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceInvocationHandler`1.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            响应委托
            </summary>
            <param name="proxy"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServiceInvocationHandler`1.CallService(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            Calls the service.
            </summary>
            <param name="reqMsg">Name of the sub service.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:MySoft.IoC.ServiceInvocationHandler`1.GetOperationContext(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            获取上下文对象
            </summary>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Messages.AppCaller">
            <summary>
            应用服务调用信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.AppCaller.CallTime">
            <summary>
            调用时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.AppCaller.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.AppCaller.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.AppCaller.Parameters">
            <summary>
            参数信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.LogExtensions">
            <summary>
            扩展类
            </summary>
        </member>
        <member name="M:MySoft.IoC.LogExtensions.BeginRequest(MySoft.IoC.Logger.IServiceLog,MySoft.IoC.Messages.RequestMessage)">
            <summary>
            请求开始
            </summary>
            <param name="reqMsg"></param>
        </member>
        <member name="M:MySoft.IoC.LogExtensions.EndRequest(MySoft.IoC.Logger.IServiceLog,MySoft.IoC.Messages.RequestMessage,MySoft.IoC.Messages.ResponseMessage,System.Int64)">
            <summary>
            请求结束
            </summary>
            <param name="reqMsg"></param>
            <param name="resMsg"></param>
            <param name="elapsedMilliseconds"></param>
        </member>
        <member name="T:MySoft.IoC.CacheItem">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="P:MySoft.IoC.CacheItem.Count">
            <summary>
            记录数
            </summary>
        </member>
        <member name="T:MySoft.IoC.Services.InvokeProxy">
            <summary>
            json方式 invoke远程代理服务
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.InvokeProxy.#ctor(MySoft.IoC.ServerNode,MySoft.Logger.ILog)">
            <summary>
            Invoke 代理
            </summary>
            <param name="node"></param>
            <param name="logger"></param>
        </member>
        <member name="M:MySoft.IoC.Services.InvokeProxy.CallService(MySoft.IoC.Messages.RequestMessage)">
            <summary>
            Calls the service.
            </summary>
            <param name="reqMsg">The MSG.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:MySoft.IoC.Services.InvokeProxy.HandleBegin(MySoft.IoC.Messages.RequestMessage,System.Reflection.MethodInfo)">
            <summary>
            处理输入参数
            </summary>
            <param name="reqMsg"></param>
            <param name="method"></param>
        </member>
        <member name="M:MySoft.IoC.Services.InvokeProxy.HandleEnd(MySoft.IoC.Messages.ResponseMessage,System.Reflection.MethodInfo)">
            <summary>
            处理输出参数
            </summary>
            <param name="resMsg"></param>
            <param name="method"></param>
        </member>
        <member name="M:MySoft.IoC.Services.InvokeProxy.GetElementType(System.Type)">
            <summary>
            获取基类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.HttpServer.HttpDocument">
            <summary>
            API文档类
            </summary>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpDocument.MakeDocument(System.String)">
            <summary>
            生成文档
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpDocument.GetItemDocument(MySoft.IoC.HttpServer.HttpCallerInfo,System.String)">
            <summary>
            获取Item文档
            </summary>
            <param name="caller"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.HttpServer.HttpCallerInfoCollection">
            <summary>
            CallInfo集合
            </summary>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpCallerInfoCollection.ContainsKey(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpCallerInfoCollection.Clear">
            <summary>
            清除集合
            </summary>
        </member>
        <member name="M:MySoft.IoC.HttpServer.HttpCallerInfoCollection.ToValueList">
            <summary>
            返回集合
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfoCollection.Count">
            <summary>
            总数量
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfoCollection.Item(System.String)">
            <summary>
            获取集合中的数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.CommunicationStates">
            <summary>
            Communication states.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.CommunicationStates.Connected">
            <summary>
            Connected.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.CommunicationStates.Disconnected">
            <summary>
            Disconnected.
            </summary>
        </member>
        <member name="T:MySoft.IoC.ConnectEventArgs">
            <summary>
            Client event args
            </summary>
        </member>
        <member name="P:MySoft.IoC.ConnectEventArgs.Channel">
            <summary>
            Get connection channel
            </summary>
        </member>
        <member name="P:MySoft.IoC.ConnectEventArgs.Error">
            <summary>
            Get socket error
            </summary>
        </member>
        <member name="P:MySoft.IoC.ConnectEventArgs.Subscribed">
            <summary>
            Get is callback
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceRequest">
            <summary>
            服务请求类
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceRequest.#ctor(MySoft.IoC.ServerNode,System.Boolean)">
            <summary>
            实例化ServiceMessage
            </summary>
            <param name="node"></param>
            <param name="subscribed"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceRequest.SendRequest(System.String,MySoft.IoC.Messages.RequestMessage)">
            <summary>
            发送数据包
            </summary>
            <param name="messageId"></param>
            <param name="reqMsg"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceRequest.client_Connected(System.Object,System.EventArgs)">
            <summary>
            连接成功
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceRequest.client_Disconnected(System.Object,System.EventArgs)">
            <summary>
            断开成功
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.ServiceRequest.ConnectServer">
            <summary>
            连接服务器
            </summary>
        </member>
        <member name="E:MySoft.IoC.ServiceRequest.OnCallback">
            <summary>
            数据回调
            </summary>
        </member>
        <member name="E:MySoft.IoC.ServiceRequest.OnError">
            <summary>
            错误回调
            </summary>
        </member>
        <member name="E:MySoft.IoC.ServiceRequest.OnConnected">
            <summary>
            连接服务器
            </summary>
        </member>
        <member name="E:MySoft.IoC.ServiceRequest.OnDisconnected">
            <summary>
            断开服务器
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceConfig">
            <summary>
            服务配置
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_RECORD_HOUR">
            <summary>
            The default record hour
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_SERVER_MAXCALLER">
            <summary>
            The default max caller
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_CLIENT_TIMEOUT">
            <summary>
            The default client  call timeout number. 
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_SERVER_TIMEOUT">
            <summary>
            The default server  call timeout number. 
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_CLIENT_MINPOOL">
            <summary>
            The default pool number.
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_CLIENT_MAXPOOL">
            <summary>
            The default pool number.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.BigInteger.Kernel.Multiply(System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts it into
            d [dOffset:dOffset+xLen+yLen].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+xLen+yLen].
            </remarks>
        </member>
        <member name="M:MySoft.IoC.Services.BigInteger.Kernel.MultiplyMod2p32pmod(System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts the low mod words into
            d [dOffset:dOffset+mod].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+mod].
            </remarks>
        </member>
        <member name="T:MySoft.IoC.Messages.ScsCallbackMessage">
            <summary>
            回调消息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.ScsCallbackMessage.MessageValue">
            <summary>
            回调消息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Server.Tcp.ScsTcpServer">
            <summary>
            This class is used to create a TCP server.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Server.Tcp.ScsTcpServer._endPoint">
            <summary>
            The endpoint address of the server to listen incoming connections.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.Tcp.ScsTcpServer.#ctor(MySoft.IoC.Communication.Scs.Communication.EndPoints.Tcp.ScsTcpEndPoint)">
            <summary>
            Creates a new ScsTcpServer object.
            </summary>
            <param name="endPoint">The endpoint address of the server to listen incoming connections</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.Tcp.ScsTcpServer.CreateConnectionListener">
            <summary>
            Creates a TCP connection listener.
            </summary>
            <returns>Created listener object</returns>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Server.Tcp.ScsTcpServer.EndPoint">
            <summary>
            The endpoint address of the server to listen incoming connections.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Server.ScsServerFactory">
            <summary>
            This class is used to create SCS servers.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Server.ScsServerFactory.CreateServer(MySoft.IoC.Communication.Scs.Communication.EndPoints.ScsEndPoint)">
            <summary>
            Creates a new SCS Server using an EndPoint.
            </summary>
            <param name="endPoint">Endpoint that represents address of the server</param>
            <returns>Created TCP server</returns>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Protocols.WireProtocolManager">
            <summary>
            This class is used to get default protocols.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.WireProtocolManager.GetDefaultWireProtocolFactory">
            <summary>
            Creates a default wire protocol factory object to be used on communicating of applications.
            </summary>
            <returns>A new instance of default wire protocol</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Protocols.WireProtocolManager.GetDefaultWireProtocol">
            <summary>
            Creates a default wire protocol object to be used on communicating of applications.
            </summary>
            <returns>A new instance of default wire protocol</returns>
        </member>
        <member name="T:MySoft.IoC.SubscribeOptions">
            <summary>
            订阅选项（默认全部启用）
            </summary>
        </member>
        <member name="M:MySoft.IoC.SubscribeOptions.#ctor">
            <summary>
            实例化SubscribeOptions
            </summary>
        </member>
        <member name="P:MySoft.IoC.SubscribeOptions.CallTimeout">
            <summary>
            超时时间，用于监控超时服务调用
            </summary>
        </member>
        <member name="P:MySoft.IoC.SubscribeOptions.CallRowCount">
            <summary>
            调用记数超时行数
            </summary>
        </member>
        <member name="P:MySoft.IoC.SubscribeOptions.PushCallTimeout">
            <summary>
            推送调用超时
            </summary>
        </member>
        <member name="P:MySoft.IoC.SubscribeOptions.PushCallError">
            <summary>
            推送调用错误
            </summary>
        </member>
        <member name="P:MySoft.IoC.SubscribeOptions.PushServerStatus">
            <summary>
            推送服务状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.SubscribeOptions.ServerStatusTimer">
            <summary>
            定时推送状态定时：单位（秒）
            </summary>
        </member>
        <member name="P:MySoft.IoC.SubscribeOptions.PushClientConnect">
            <summary>
            推送客户端连接信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Messages.CallMessage">
            <summary>
            调用消息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallMessage.AppName">
            <summary>
            应用名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallMessage.IPAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:MySoft.IoC.Messages.CallMessage.HostName">
            <summary>
            主机名
            </summary>
        </member>
        <member name="T:MySoft.IoC.HttpServer.HttpCallerInfo">
            <summary>
            调用信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfo.CallerName">
            <summary>
            调用名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfo.CacheTime">
            <summary>
            缓存时间，单位（秒）
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfo.Service">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfo.Method">
            <summary>
            调用方法
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfo.Parameters">
            <summary>
            参数信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfo.Description">
            <summary>
            方法描述
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfo.Authorized">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfo.AuthParameter">
            <summary>
            认证参数
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfo.HttpMethod">
            <summary>
            Http方式
            </summary>
        </member>
        <member name="P:MySoft.IoC.HttpServer.HttpCallerInfo.TypeString">
            <summary>
            是否字符串
            </summary>
        </member>
        <member name="T:MySoft.IoC.IoCHelper">
            <summary>
            IoC帮助类
            </summary>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.WriteLine(System.String,System.Object[])">
            <summary>
            控制台输出
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.WriteLine(System.String)">
            <summary>
            控制台输出
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.WriteLine(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            控制台输出
            </summary>
            <param name="color"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.WriteLine(System.ConsoleColor,System.String)">
            <summary>
            控制台输出
            </summary>
            <param name="color"></param>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.SetRefParameters(System.Reflection.MethodInfo,MySoft.IoC.Messages.ParameterCollection,System.Object[])">
            <summary>
            设置参数值
            </summary>
            <param name="method"></param>
            <param name="collection"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.CreateParameters(System.Reflection.MethodInfo,MySoft.IoC.Messages.ParameterCollection)">
            <summary>
            设置参数值
            </summary>
            <param name="method"></param>
            <param name="collection"></param>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.SetRefParameters(System.Reflection.MethodInfo,System.Object[],MySoft.IoC.Messages.ParameterCollection)">
            <summary>
            设置ParameterCollection值
            </summary>
            <param name="method"></param>
            <param name="parameters"></param>
            <param name="collection"></param>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.CreateParameters(System.Reflection.MethodInfo,System.String)">
            <summary>
            创建一个ParameterCollection
            </summary>
            <param name="method"></param>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.CreateParameters(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            创建一个ParameterCollection
            </summary>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.GetResponse(MySoft.IoC.Messages.RequestMessage,System.Exception)">
            <summary>
            获取请求消息
            </summary>
            <param name="reqMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.GetException(MySoft.IoC.Messages.AppCaller,System.String)">
            <summary>
            获取IoCException
            </summary>
            <param name="caller"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.GetException(MySoft.IoC.Messages.AppCaller,System.String,System.Exception)">
            <summary>
            获取IoCException
            </summary>
            <param name="caller"></param>
            <param name="message"></param>
            <param name="inner"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.GetCache(System.String)">
            <summary>
            获取对象
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IoCHelper.SetAppCaller(MySoft.IoC.Messages.AppCaller,MySoft.IoC.IoCException)">
            <summary>
            设置调用信息
            </summary>
            <param name="caller"></param>
            <param name="error"></param>
        </member>
        <member name="T:MySoft.IoC.Communication.Threading.ThreadSafeSortedList`2">
            <summary>
            This class is used to store key-value based items in a thread safe manner.
            It uses System.Collections.Generic.SortedList internally.
            </summary>
            <typeparam name="TK">Key type</typeparam>
            <typeparam name="TV">Value type</typeparam>
        </member>
        <member name="F:MySoft.IoC.Communication.Threading.ThreadSafeSortedList`2._items">
            <summary>
            Internal collection to store items.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.ThreadSafeSortedList`2.#ctor">
            <summary>
            Creates a new ThreadSafeSortedList object.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.ThreadSafeSortedList`2.ContainsKey(`0)">
            <summary>
            Checks if collection contains spesified key.
            </summary>
            <param name="key">Key to check</param>
            <returns>True; if collection contains given key</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.ThreadSafeSortedList`2.Remove(`0)">
            <summary>
            Removes an item from collection.
            </summary>
            <param name="key">Key of item to remove</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.ThreadSafeSortedList`2.GetAllItems">
            <summary>
            Gets all items in collection.
            </summary>
            <returns>Item list</returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.ThreadSafeSortedList`2.ClearAll">
            <summary>
            Removes all items from list.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Threading.ThreadSafeSortedList`2.GetAndClearAllItems">
            <summary>
            Gets then removes all items in collection.
            </summary>
            <returns>Item list</returns>
        </member>
        <member name="P:MySoft.IoC.Communication.Threading.ThreadSafeSortedList`2.Item(`0)">
            <summary>
            Gets/adds/replaces an item by key.
            </summary>
            <param name="key">Key to get/set value</param>
            <returns>Item associated with this key</returns>
        </member>
        <member name="P:MySoft.IoC.Communication.Threading.ThreadSafeSortedList`2.Count">
            <summary>
            Gets count of items in the collection.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel">
            <summary>
            This class is used to communicate with a remote application over TCP/IP protocol.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel.ReceiveBufferSize">
            <summary>
            Size of the buffer that is used to send bytes from TCP socket.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel._clientSocket">
            <summary>
            Socket object to send/reveice messages.
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel._receiveBuffer">
            <summary>
            This buffer is used to receive bytes 
            </summary>
        </member>
        <member name="F:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel._running">
            <summary>
            A flag to control thread's running
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Creates a new TcpCommunicationChannel object.
            </summary>
            <param name="clientSocket">A connected Socket object that is
            used to communicate over network</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel.Disconnect">
            <summary>
            Disconnects from remote application and closes channel.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel.StartInternal">
            <summary>
            Starts the thread to receive messages from socket.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel.SendMessageInternal(MySoft.IoC.Communication.Scs.Communication.Messages.IScsMessage)">
            <summary>
            Sends a message to the remote application.
            </summary>
            <param name="message">Message to be sent</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel.MySoft#IoC#Communication#Scs#Communication#ICommunicationProtocol#IOCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            IO回调处理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel.OnSendCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is used as callback method in _clientSocket's BeginReceive method.
            It reveives bytes from socker.
            </summary>
            <param name="ar">Asyncronous call result</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel.OnReceiveCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is used as callback method in _clientSocket's BeginReceive method.
            It reveives bytes from socker.
            </summary>
            <param name="e">Asyncronous call result</param>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel.CreateAsyncSEA(System.Byte[])">
            <summary>
            Create socket event args.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel.DisposeAsyncSEA(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Dispose socket event args.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:MySoft.IoC.Communication.Scs.Communication.Channels.Tcp.TcpCommunicationChannel.RemoteEndPoint">
            <summary>
             Gets the endpoint of remote application.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Aspect.AspectInterceptor">
            <summary>
            Aspect拦截器
            </summary>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            调用拦截的方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectInterceptor.PreProceed(MySoft.IoC.Aspect.IInvocation)">
            <summary>
            准备处理
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectInterceptor.PerformProceed(MySoft.IoC.Aspect.IInvocation)">
            <summary>
            处理进行中
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:MySoft.IoC.Aspect.AspectInterceptor.PostProceed(MySoft.IoC.Aspect.IInvocation)">
            <summary>
            处理之后
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:MySoft.IoC.CacheUpdateItem">
            <summary>
            缓存更新项
            </summary>
        </member>
        <member name="P:MySoft.IoC.CacheUpdateItem.Key">
            <summary>
            缓存Key
            </summary>
        </member>
        <member name="P:MySoft.IoC.CacheUpdateItem.Timeout">
            <summary>
            缓存超时时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.CacheUpdateItem.Func">
            <summary>
            执行委托
            </summary>
        </member>
        <member name="P:MySoft.IoC.CacheUpdateItem.State">
            <summary>
            状态对象
            </summary>
        </member>
    </members>
</doc>
