<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MySoft.Core</name>
    </assembly>
    <members>
        <member name="T:MySoft.Core.EnumDescriptionAttribute">
            <summary>
            对任意类型添加文字描述
            </summary>
        </member>
        <member name="M:MySoft.Core.EnumDescriptionAttribute.GetDescription(System.Object)">
            <summary>
            获取枚举类型的描述
            </summary>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.EnumDescriptionAttribute.GetDescriptions(System.Type)">
            <summary>
            获取枚举类型的所有描述
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Task.TaskThreadPool">
            <summary>
            任务线程池
            </summary>
        </member>
        <member name="F:MySoft.Task.TaskThreadPool.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:MySoft.Task.TaskThreadPool.Threads">
            <summary>
            
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingServiceHelper">
            <summary>
            The Remoting Service Helper.
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingServerHelper">
            <summary>
            The Remoting Service Helper.
            </summary>
        </member>
        <member name="T:MySoft.Core.ILogable">
            <summary>
            Mark a implementing class as loggable.
            </summary>
        </member>
        <member name="E:MySoft.Core.ILogable.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerHelper.#ctor(MySoft.Remoting.RemotingChannelType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.Remoting.RemotingServerHelper"/> class.
            </summary>
            <param name="channelType">Type of the channel.</param>
            <param name="serverAddress">The server address.</param>
            <param name="serverPort">The server port.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerHelper.PublishWellKnownServiceInstance(System.String,System.Type,System.Runtime.Remoting.WellKnownObjectMode)">
            <summary>
            Publishes the well known service instance.
            </summary>
            <param name="notifyName">Name of the notify.</param>
            <param name="interfaceType">Type of the interface.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerHelper.PublishWellKnownServiceInstance(System.String,System.Type,System.MarshalByRefObject,System.Runtime.Remoting.WellKnownObjectMode)">
            <summary>
            Publishes the well known service instance.
            </summary>
            <param name="notifyName">Name of the notify.</param>
            <param name="interfaceType">Type of the interface.</param>
            <param name="instance">The instance.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerHelper.PublishActivatedService(System.Type)">
            <summary>
            Publishes the activated service.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:MySoft.Remoting.RemotingServerHelper.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingServiceHelper.PublishWellKnownServiceInstance">
            <summary>
            发布知名对象服务器端实例（远程对象已在配置文件中定义）
            </summary>
        </member>
        <member name="M:CompressionSink.myHelper.getCompressedStreamCopy(System.IO.Stream)">
            <summary>
            refactor  by zendy
            </summary>
            <param name="inStream"></param>
            <returns></returns>
        </member>
        <member name="M:CompressionSink.myHelper.getUncompressedStreamCopy(System.IO.Stream)">
            <summary>
            refactor  by zendy
            </summary>
            <param name="inStream"></param>
            <returns></returns>
        </member>
        <member name="T:NZlib.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified amount of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more then 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:NZlib.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next n bits but don't increase input pointer.  n must be
            less or equal 16 and if you if this call succeeds, you must drop
            at least n-8 bits in the next call.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:NZlib.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called peekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:NZlib.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to peekBits followed by dropBits, except for correct error handling.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:NZlib.Streams.StreamManipulator.GetAvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous peekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="M:NZlib.Streams.StreamManipulator.GetAvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            the number of bytes available.
            </returns>
        </member>
        <member name="M:NZlib.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:NZlib.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies length bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            the buffer.
            </param>
            <param name="offset">
            the offset in the buffer.
            </param>
            <param name="length">
            the length to copy, 0 is allowed.
            </param>
            <returns>
            the number of bytes copied, 0 if no byte is available.
            </returns>
        </member>
        <member name="T:MySoft.Aop.IAopOperator">
            <summary>
            IAopOperator AOP操作符接口，包括前处理和后处理
            2010.11.09
            </summary>
        </member>
        <member name="M:MySoft.Aop.IAopOperator.PreProceed(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            前置处理
            </summary>
            <param name="requestMsg"></param>
        </member>
        <member name="M:MySoft.Aop.IAopOperator.PostProceed(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Runtime.Remoting.Messaging.IMethodReturnMessage@)">
            <summary>
            后置处理
            </summary>
            <param name="requestMsg"></param>
            <param name="respondMsg"></param>
        </member>
        <member name="T:MySoft.Remoting.RemotingServerConfiguration">
            <summary>
            Remoting服务端配置
            <example>
            <code>
            <configuration>
                <configSections>
            	    <sectionGroup name="serviceFramework">
            		    <section name="remotingServer" type="MySoft.Remoting.RemotingServerConfigurationHandler, MySoft.Core"/>
            	    </sectionGroup>
                </configSections>
                <system.web>
            	......
                </system.web>
                <serviceFramework>
            	    <remotingServer>
                        <server channelType="tcp" serverAddress="127.0.0.1" port="8888"/>
            		    <remoteObject name="基金净值" assemblyName="Shumi.BLL" className="SB.NetValue" mode="singleton" />
            		    <remoteObject name="基金净值" assemblyName="Shumi.BLL" className="SB.NetValue" mode="singlecall" />
            	    </remotingServer>
                </serviceFramework>
            </configuration>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:MySoft.Core.ConfigurationBase">
            <summary>
            配置基类
            </summary>
        </member>
        <member name="M:MySoft.Core.ConfigurationBase.GetStringAttribute(System.Xml.XmlAttributeCollection,System.String,System.String)">
            <summary>
            获取属性（string类型）
            </summary>
        </member>
        <member name="M:MySoft.Core.ConfigurationBase.GetIntAttribute(System.Xml.XmlAttributeCollection,System.String,System.Int32)">
            <summary>
            获取属性（int类型）
            </summary>
        </member>
        <member name="M:MySoft.Core.ConfigurationBase.GetBoolAttribute(System.Xml.XmlAttributeCollection,System.String,System.Boolean)">
            <summary>
            获取属性（bool类型）
            </summary>
        </member>
        <member name="M:MySoft.Core.ConfigurationBase.LoadModules``1(System.Xml.XmlNode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerConfiguration.GetConfig">
            <summary>
            获取远程对象配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerConfiguration.GetRemoteObjectUrl(System.String)">
            <summary>
            获取远程业务对象Url（如：tcp://127.0.0.1:8888/NetValue）
            </summary>
            <param name="remoteObjectUri">远程对象Uri（如：NetValue）</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MySoft.Remoting.RemotingServerConfiguration.Modules">
            <summary>
            获取远程对象业务模块集合（部署的URL信息，协议，IP及端口）
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingServerConfiguration.ChannelType">
            <summary>
            通道类型
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingServerConfiguration.ServerAddress">
            <summary>
            服务器地址（IP或计算机名）
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingServerConfiguration.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingServerConfiguration.ServerUrl">
            <summary>
            Remoting服务器Url（如：tcp://127.0.0.1:8888）
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingClientConfiguration">
            <summary>
            Remoting客户端配置
            <remarks>
            <code>
            <configuration>
                <configSections>
            	    <sectionGroup name="serviceFramework">
            		    <section name="remotingClient" type="MySoft.Remoting.RemotingClientConfigurationHandler, MySoft.Core"/>
            	    </sectionGroup>
                </configSections>
                <system.web>
            	......
                </system.web>
                <serviceFramework>
            	    <remotingClient isCheckServer="true" interval="3000">
                        <remotingHost name="NetValueClient" defaultServer="s1">
                            <server name="s1" url="tcp://192.168.0.1:8888"/>
                            <server name="s2" url="tcp://192.168.0.2:8888"/>
                            <remoteObject name="NetValue" objectUri="SB.NetValue"/>
                        </remotingHost>
            	    </remotingClient>
                </serviceFramework>
            </configuration>
            </code>
            </remarks>
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientConfiguration.GetConfig">
            <summary>
            获取远程对象配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientConfiguration.GetRemoteObjectUrl(System.String,System.String)">
            <summary>
            获取远程业务对象Url（比如：tcp://127.0.0.1:8888/NetValue）
            </summary>
            <param name="serverUrl">远程服务器地址（比如：tcp://127.0.0.1:8888）</param>
            <param name="remoteObjectUri">远程对象Uri（如：NetValue）</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MySoft.Remoting.RemotingClientConfiguration.IsCheckServer">
            <summary>
            是否检测可用服务器
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingClientConfiguration.Interval">
            <summary>
            检测可用服务器定时器的时间间隔
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingClientConfiguration.Timeout">
            <summary>
            信道超时时间
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingClientConfiguration.RemotingHosts">
            <summary>
            RemotingHost集合
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptConvert">
            <summary>
            Provides methods for converting between common language runtime types and JavaScript types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimter">The string delimiter character.</param>
            <returns>A Json string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a Json object.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A Json string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="T:MySoft.Json.JSONHelper">
            <summary>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
             Ported to C# by Are Bjolseth, teleplan.no
            </summary>
        </member>
        <member name="M:MySoft.Json.JSONHelper.Enquote(System.String)">
            <summary>
            Produce a string in double quotes with backslash sequences in all the right places.
            </summary>
            <param name="s">A String</param>
            <returns>A String correctly formatted for insertion in a JSON message.</returns>
        </member>
        <member name="T:MySoft.Remoting.IServiceInterface">
            <summary>
            interface used to mark service interfaces.
            </summary>
        </member>
        <member name="T:MySoft.Remoting.ServiceContractAttribute">
            <summary>
            Attribute used to mark service interfaces.
            </summary>
        </member>
        <member name="T:NZlib.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="T:NZlib.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:NZlib.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">
            the output array;
            </param>
            <param name="offset">
            the offset into output array;
            </param>
            <param name="length">		
            length the maximum number of bytes to store;
            </param>
            <exception name="ArgumentOutOfRangeException">
            IndexOutOfBoundsException if offset or length are invalid.
            </exception>
        </member>
        <member name="T:MySoft.Core.IDataPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.PageSize">
            <summary>
            获取或设置页大小
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.RowCount">
            <summary>
            获取或设置记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.CurrentPageIndex">
            <summary>
            获取或设置页序数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.PageCount">
            <summary>
            获取或设置页数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.IsFirstPage">
            <summary>
             获取一个值，该值指示当前页是否是首页
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.IsLastPage">
            <summary>
            获取一个值，该值指示当前页是否是最后一页
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.CurrentRowCount">
            <summary>
            获取当前数据源的记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.CurrentStartIndex">
            <summary>
            获取开始记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.CurrentEndIndex">
            <summary>
            获取结束记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage`1.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="T:MySoft.Core.CoreHelper">
            <summary>
            常用方法
            </summary>
        </member>
        <member name="M:MySoft.Core.CoreHelper.GetFullPath(System.String)">
            <summary>
            获取当前某文件绝对路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.CloneObject(System.Object)">
            <summary>
            克隆一个对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.CreateInstance``1">
            <summary>
            快速创建一个T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.GetFastInstanceCreator(System.Type)">
            <summary>
            创建一个委托
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.GetFastMethodInvoke(System.Reflection.MethodInfo)">
            <summary>
            快速调用方法
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            快速设置属性值
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Core.CoreHelper.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            快速设置属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Core.CoreHelper.GetPropertyValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            快速获取属性值
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            快速获取属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.ConvertValue``1(System.Object)">
            <summary>
            转换数据类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.ConvertValue(System.Type,System.Object)">
            <summary>
            转换数据类型
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.GetMemberAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.GetMemberAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.GetTypeAttribute``1(System.Type)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.GetTypeAttributes``1(System.Type)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.ConvertTo``1(System.String,``0)">
            <summary>
            将value转换成对应的类型值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.MakeUniqueKey(System.Int32,System.String)">
            <summary>
            Makes a unique key.
            </summary>
            <param name="length">The length.</param>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.CheckStruct(System.Type)">
            <summary>
            检测是否为结构数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.ChangeType(System.Object,System.Type)">
            <summary>
            转换类型
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            获取指定长度的字符串，按字节长度
            </summary>
            <param name="p_SrcString"></param>
            <param name="p_Length"></param>
            <param name="p_TailString"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.Encrypt(System.String,System.String)">
            <summary>
            对字符串进行加密
            </summary>
            <param name="text">待加密的字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.Decrypt(System.String,System.String)">
            <summary>
            对字符串进行解密
            </summary>
            <param name="text">已加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreHelper.Compare``1(``0,``0)">
            <summary>
            比较两个值的大小
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Remoting.RemotingServer">
            <summary>
            远程服务器实体
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingServer.ServerName">
            <summary>
            服务器名（用来区别其它服务器）
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingServer.ServerUrl">
            <summary>
            获取远程业务对象Url（如：tcp://127.0.0.1:8888/NetValue）
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptArray">
            <summary>
            Represents a JavaScript array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptArray"/> class that
            contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new array.</param>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptArray"/> class that
            is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new array can initially store.</param>
        </member>
        <member name="T:MySoft.Json.JSONArray">
             <summary>
             <para>
             A JSONArray is an ordered sequence of values. Its external form is a string
             wrapped in square brackets with commas between the values. The internal form
             is an object having get() and opt() methods for accessing the values by
             index, and put() methods for adding or replacing values. The values can be
             any of these types: Boolean, JSONArray, JSONObject, Number, String, or the
             JSONObject.NULL object.
             </para>
             <para>
             The constructor can convert a JSON external form string into an
             internal form Java object. The toString() method creates an external
             form string.
             </para>
             <para>
             A get() method returns a value if one can be found, and throws an exception
             if one cannot be found. An opt() method returns a default value instead of
             throwing an exception, and so is useful for obtaining optional values.
             </para>
             <para>
             The generic get() and opt() methods return an object which you can cast or
             query for type. There are also typed get() and opt() methods that do typing
             checking and type coersion for you.
            </para>
             <para>
             The texts produced by the toString() methods are very strict.
             The constructors are more forgiving in the texts they will accept.
             </para>
             <para>
             <list type="bullet">
             <item><description>An extra comma may appear just before the closing bracket.</description></item>
             <item><description>Strings may be quoted with single quotes.</description></item>
             <item><description>Strings do not need to be quoted at all if they do not contain leading
                 or trailing spaces, and if they do not contain any of these characters:
                 { } [ ] / \ : , </description></item>
             <item><description>Numbers may have the 0- (octal) or 0x- (hex) prefix.</description></item>
             </list>
             </para>
             <para>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
            </para>
             Ported to C# by Are Bjolseth, teleplan.no
             TODO:
             1. Implement Custom exceptions
             2. Add indexer JSONObject[i] = object,     and object = JSONObject[i];
             3. Add indexer JSONObject["DEFAULT_KEY"] = object, and object = JSONObject["DEFAULT_KEY"]
             4. Add unit testing
             5. Add log4net
             6. Make get/put methods private, to force use of indexer instead?
             </summary>
        </member>
        <member name="F:MySoft.Json.JSONArray.myArrayList">
            <summary>The ArrayList where the JSONArray's properties are kept.</summary>
        </member>
        <member name="M:MySoft.Json.JSONArray.#ctor">
            <summary>
            Construct an empty JSONArray
            </summary>
        </member>
        <member name="M:MySoft.Json.JSONArray.#ctor(MySoft.Json.JSONTokener)">
            <summary>
            Construct a JSONArray from a JSONTokener.
            </summary>
            <param name="x">A JSONTokener</param>
        </member>
        <member name="M:MySoft.Json.JSONArray.#ctor(System.String)">
            <summary>
            Construct a JSONArray from a source string.
            </summary>
            <param name="s">A string that begins with '[' and ends with ']'.</param>
        </member>
        <member name="M:MySoft.Json.JSONArray.#ctor(System.Collections.ICollection)">
            <summary>
            Construct a JSONArray from a Collection.
            </summary>
            <param name="collection">A Collection.</param>
        </member>
        <member name="M:MySoft.Json.JSONArray.getValue(System.Int32)">
            <summary>
            Get the object value associated with an index.
            Use indexer instead!!! Added to be true to the original Java implementation
            </summary>
            <param name="i">index subscript. The index must be between 0 and length()-1</param>
            <returns>An object value.</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.getArrayList">
            <summary>
            Get the ArrayList which is holding the elements of the JSONArray.
            Use the indexer instead!! Added to be true to the orignal Java src
            </summary>
            <returns>The ArrayList</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.getJSONArray(System.Int32)">
            <summary>
            Get the JSONArray associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONArray value</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.getJSONObject(System.Int32)">
            <summary>
            Get the JSONObject associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONObject value</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.getString(System.Int32)">
            <summary>
            Get the string associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A string value.</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.isNull(System.Int32)">
            <summary>
            Determine if the value is null.
            </summary>
            <param name="i">index subscript</param>
            <returns>true if the value at the index is null, or if there is no value.</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.join(System.String)">
            <summary>
            Make a string from the contents of this JSONArray. The separator string
            is inserted between each element.
            Warning: This method assumes that the data structure is acyclical.
            </summary>
            <param name="separator">separator A string that will be inserted between the elements.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.Length">
            <summary>
            Get the length of the JSONArray.
            Added to be true to the original Java implementation
            </summary>
            <returns>Number of JSONObjects in array</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.opt(System.Int32)">
            <summary>
            Get the optional object value associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>object at that index.</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.optBoolean(System.Int32)">
            <summary>
            Get the optional boolean value associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>The truth</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.optBoolean(System.Int32,System.Boolean)">
            <summary>
            Get the optional boolean value associated with an index.
            It returns the defaultValue if there is no value at that index or if it is not
            a Boolean or the String "true" or "false".
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue"></param>
            <returns>The truth.</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.optDouble(System.Int32)">
            <summary>
            Get the optional double value associated with an index.
            NaN is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <returns>The double value object</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.optDouble(System.Int32,System.Double)">
            <summary>
            Get the optional double value associated with an index.
            NaN is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue"></param>
            <returns>The double value object</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.optInt(System.Int32)">
            <summary>
            Get the optional int value associated with an index.
            Zero is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <returns>The int value object</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.optInt(System.Int32,System.Int32)">
            <summary>
            Get the optional int value associated with an index.
            The defaultValue is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue">The default value</param>
            <returns>The int value object</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.optJSONArray(System.Int32)">
            <summary>
            Get the optional JSONArray associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONArray value, or null if the index has no value, or if the value is not a JSONArray.</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.optJSONObject(System.Int32)">
            <summary>
            Get the optional JSONObject associated with an index.
            Null is returned if the DEFAULT_KEY is not found, or null if the index has
            no value, or if the value is not a JSONObject.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONObject value</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.optString(System.Int32)">
            <summary>
            Get the optional string value associated with an index. It returns an
            empty string if there is no value at that index. If the value
            is not a string and is not null, then it is coverted to a string.
            </summary>
            <param name="i">index subscript</param>
            <returns>A String value</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.optString(System.Int32,System.String)">
            <summary>
            Get the optional string associated with an index.
            The defaultValue is returned if the DEFAULT_KEY is not found.
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue">The default value</param>
            <returns>A string value</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.put(System.Object)">
            OMITTED:
            public JSONArray put(bool val)
            public JSONArray put(double val)
            public JSONArray put(int val)		
            <summary>
            Append an object value.
            </summary>
            <param name="val">An object value.  The value should be a Boolean, Double, Integer, JSONArray, JSObject, or String, or the JSONObject.NULL object</param>
            <returns>this (JSONArray)</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.put(System.Int32,System.Object)">
            <summary>
            Put or replace a boolean value in the JSONArray.
            </summary>
            <param name="i">
            The subscript. If the index is greater than the length of
            the JSONArray, then null elements will be added as necessary to pad it out.
            </param>
            <param name="val">An object value.</param>
            <returns>this (JSONArray)</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.toJSONObject(MySoft.Json.JSONArray)">
            <summary>
            Produce a JSONObject by combining a JSONArray of pks with the values
            of this JSONArray.
            </summary>
            <param name="pks">
            A JSONArray containing a list of DEFAULT_KEY strings. These will be paired with the values.
            </param>
            <returns>A JSONObject, or null if there are no pks or if this JSONArray</returns>
        </member>
        <member name="M:MySoft.Json.JSONArray.ToString">
            <summary>
            Make an JSON external form string of this JSONArray. For compactness, no
            unnecessary whitespace is added.
            </summary>
            <returns>a printable, displayable, transmittable representation of the array.</returns>
        </member>
        <member name="P:MySoft.Json.JSONArray.Item(System.Int32)">
            <summary>
            Alternate to Java get/put method, by using indexer
            </summary>
        </member>
        <member name="P:MySoft.Json.JSONArray.List">
            <summary>
            Alternativ to Java, getArrayList, by using propery
            </summary>
        </member>
        <member name="P:MySoft.Json.JSONArray.Count">
            <summary>
            Get the length of the JSONArray.
            Using a propery instead of method
            </summary>
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <!-- 对于成员“F:SevenZip.CoderPropID.PosStateBits”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:SevenZip.CoderPropID.LitContextBits”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:SevenZip.CoderPropID.LitPosBits”忽略有格式错误的 XML 注释 -->
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MultiThread">
            <summary>
            Specifies multithread mode.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:NZlib.Streams.DeflaterOutputStream">
            <summary>
            This is a special FilterOutputStream deflating the bytes that are
            written through it.  It uses the Deflater for deflating.
            
            authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="F:NZlib.Streams.DeflaterOutputStream.buf">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:NZlib.Streams.DeflaterOutputStream.def">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:NZlib.Streams.DeflaterOutputStream.baseOutputStream">
            <summary>
            base stream the deflater depends on.
            </summary>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.deflate">
            <summary>
            Deflates everything in the def's input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,NZlib.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="defl">
            the underlying deflater.
            </param>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,NZlib.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="defl">
            the underlying deflater.
            </param>
            <param name="bufsize">
            the buffer size.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if bufsize isn't positive.
            </exception>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling flush() on the deflater and then
            on the underlying stream.  This ensures that all bytes are
            flushed.
            </summary>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls finish () and closes the stream.
            </summary>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="bval">
            the byte value.
            </param>
        </member>
        <member name="M:NZlib.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a len bytes from an array to the compressed stream.
            </summary>
            <param name="buf">
            the byte array.
            </param>
            <param name="off">
            the offset into the byte array where to start.
            </param>
            <param name="len">
            the number of bytes to write.
            </param>
        </member>
        <member name="P:NZlib.Streams.DeflaterOutputStream.CanRead">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="P:NZlib.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="P:NZlib.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="P:NZlib.Streams.DeflaterOutputStream.Length">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="P:NZlib.Streams.DeflaterOutputStream.Position">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="T:MySoft.Core.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="F:MySoft.Core.ExceptionType.Unknown">
            <summary>
            未知异常
            </summary>
        </member>
        <member name="F:MySoft.Core.ExceptionType.DataException">
            <summary>
            Data异常
            </summary>
        </member>
        <member name="F:MySoft.Core.ExceptionType.WebException">
            <summary>
            Web异常
            </summary>
        </member>
        <member name="F:MySoft.Core.ExceptionType.RemotingException">
            <summary>
            Remoting异常
            </summary>
        </member>
        <member name="F:MySoft.Core.ExceptionType.IoCException">
            <summary>
            IoC异常
            </summary>
        </member>
        <member name="F:MySoft.Core.ExceptionType.TaskException">
            <summary>
            Task异常
            </summary>
        </member>
        <member name="T:MySoft.Core.MySoftException">
            <summary>
            IoC异常类
            </summary>
        </member>
        <member name="M:MySoft.Core.MySoftException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:MySoft.Core.MySoftException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="msg"></param>
            <param name="inner"></param>
        </member>
        <member name="M:MySoft.Core.MySoftException.#ctor(MySoft.Core.ExceptionType)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
        </member>
        <member name="M:MySoft.Core.MySoftException.#ctor(MySoft.Core.ExceptionType,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
            <param name="msg">异常消息</param>
        </member>
        <member name="M:MySoft.Core.MySoftException.#ctor(MySoft.Core.ExceptionType,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="t">异常类型</param>
            <param name="msg">异常消息</param>
            <param name="inner">内部异常</param>
        </member>
        <member name="M:MySoft.Core.MySoftException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info">存储对象序列化和反序列化所需的全部数据</param>
            <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文</param>
        </member>
        <member name="M:MySoft.Core.MySoftException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            重载GetObjectData方法
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:MySoft.Core.MySoftException.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="T:MySoft.Core.XmlHelper">
            <summary>
            Xml工具
            </summary>
        </member>
        <member name="M:MySoft.Core.XmlHelper.CreateRoot(System.String)">
            <summary>
            创建一个根节点
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Core.XmlChildNode">
            <summary>
            XmlChildNode 的摘要说明
            </summary>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.#ctor(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            实例化 XmlChildNode
            </summary>
            <param name="doc"></param>
            <param name="node"></param>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.GetNode(System.String)">
            <summary>
            获取一个节点
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.GetValueByAttributeValue(System.String,System.String,System.String)">
            <summary>
            通过属性的值获取另一属性的值
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
            <param name="outAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.GetValueByAttributeValue(System.String[],System.String[],System.String)">
            <summary>
            通过属性的值获取另一属性的值
            </summary>
            <param name="attributes"></param>
            <param name="values"></param>
            <param name="outAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.GetNodesByAttributeValue(System.String,System.String)">
            <summary>
            通过属性的值获取节点
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.GetNodesByAttributeValue(System.String[],System.String[])">
            <summary>
            通过属性的值获取节点
            </summary>
            <param name="attributes"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.GetNodes(System.String)">
            <summary>
            获取节点列表
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.GetAttribute(System.String)">
            <summary>
            获取属性值
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.Create(System.String)">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.Create(System.String,System.String)">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.Insert(System.String,System.String)">
            <summary>
            插入节点及值
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.Insert(System.String[],System.String[])">
            <summary>
            插入属性及值
            </summary>
            <param name="attributes"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.Insert(System.String,System.String,System.String)">
            <summary>
            插入节点、属性及值
            </summary>
            <param name="element"></param>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.Insert(System.String,System.String[],System.String[])">
            <summary>
            插入节点、属性及值
            </summary>
            <param name="element"></param>
            <param name="attributes"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.Update(System.String,System.String)">
            <summary>
            更新属性值
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.Update(System.String[],System.String[])">
            <summary>
            更新属性值
            </summary>
            <param name="attributes"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.Delete">
            <summary>
            删除节点
            </summary>
        </member>
        <member name="M:MySoft.Core.XmlChildNode.Delete(System.String)">
            <summary>
            删除属性
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="P:MySoft.Core.XmlChildNode.Item(System.String)">
            <summary>
            获取属性值
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Core.XmlChildNode.Text">
            <summary>
            获取节点值
            </summary>
        </member>
        <member name="P:MySoft.Core.XmlChildNode.XML">
            <summary>
            获取节点xml
            </summary>
        </member>
        <member name="T:MySoft.Core.XmlRootNode">
            <summary>
            XmlRootNode 的摘要说明
            </summary>
        </member>
        <member name="M:MySoft.Core.XmlRootNode.#ctor(System.String)">
            <summary>
            实例化XmlRootNode
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:MySoft.Core.XmlRootNode.Create(System.String)">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:MySoft.Core.XmlRootNode.Create(System.String,System.String)">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:MySoft.Core.XmlRootNode.Create(System.String,System.String,System.String)">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.XmlRootNode.Create(System.String,System.String[],System.String[])">
            <summary>
            创建element根节点
            </summary>
            <param name="element"></param>
            <param name="attributes"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.XmlRootNode.GetNode(System.String)">
            <summary>
            获取一个节点
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.XmlRootNode.SetObject(System.Object)">
            <summary>
            将对象设置到当前文档
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Core.XmlRootNode.Save">
            <summary>
            保存更新
            </summary>
        </member>
        <member name="M:MySoft.Core.XmlRootNode.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:MySoft.Core.XmlRootNode.Item(System.String)">
            <summary>
            获取一个节点
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Core.CacheHelper">
            <summary>
            缓存操作
            </summary>
        </member>
        <member name="M:MySoft.Core.CacheHelper.Get``1(System.String)">
            <summary>
            获取指定key的缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CacheHelper.Remove``1(System.String)">
            <summary>
            移除指定key的缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
        </member>
        <member name="M:MySoft.Core.CacheHelper.RemoveAll``1">
            <summary>
            移除所有缓存
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Core.CacheHelper.Set``1(System.String,``0)">
            <summary>
            设置缓存信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="T:MySoft.Task.TaskRunner">
            <summary>
            计划任务执行者
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskRunner.AddJob(MySoft.Task.Job)">
            <summary>
            添加任务
            </summary>
            <param name="job"></param>
        </member>
        <member name="M:MySoft.Task.TaskRunner.#ctor">
            <summary>
            实例化TaskRunner
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskRunner.#ctor(MySoft.Task.TaskConfiguration)">
            <summary>
            实例化TaskRunner
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskRunner.RunSchemeTask">
            <summary>
            执行计划任务
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskRunner.Start(System.String)">
            <summary>
            启动指定任务
            </summary>
            <param name="jobName"></param>
        </member>
        <member name="M:MySoft.Task.TaskRunner.Stop(System.String)">
            <summary>
            停止指定任务
            </summary>
            <param name="jobName"></param>
        </member>
        <member name="M:MySoft.Task.TaskRunner.StartAll">
            <summary>
            启动所有任务
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskRunner.StopAll">
            <summary>
            停止所有任务
            </summary>
        </member>
        <member name="P:MySoft.Task.TaskRunner.JobList">
            <summary>
            
            </summary>
        </member>
        <member name="E:MySoft.Task.TaskRunner.OnLog">
            <summary>
            
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the Json format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into Json.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> that contains the Json structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The type of object to create.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptObject">
            <summary>
            Represents a JavaScript object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptObject.#ctor(Newtonsoft.Json.JavaScriptObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class that
            contains values copied from the specified <see cref="T:Newtonsoft.Json.JavaScriptObject"/>.
            </summary>
            <param name="javaScriptObject">The <see cref="T:Newtonsoft.Json.JavaScriptObject"/> whose elements are copied to the new object.</param>
        </member>
        <member name="M:CompressionSink.CompressionHelper.getCompressedStreamCopy(System.IO.Stream)">
            <summary>
            refactor  by zendy
            </summary>
            <param name="inStream"></param>
            <returns></returns>
        </member>
        <member name="M:CompressionSink.CompressionHelper.getUncompressedStreamCopy(System.IO.Stream)">
            <summary>
            refactor  by zendy
            </summary>
            <param name="inStream"></param>
            <returns></returns>
        </member>
        <member name="T:NZlib.GZip.GZipOutputStream">
             <summary>
             This filter stream is used to compress a stream into a "GZIP" stream.
             The "GZIP" format is described in RFC 1952.
            
             author of the original java version : John Leuner
             </summary>
             <example> This sample shows how to gzip a file
             <code>
             using System;
             using System.IO;
             
             using NZlib.GZip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		Stream s = new GZipOutputStream(File.Create(args[0] + ".gz"));
             		FileStream fs = File.OpenRead(args[0]);
             		byte[] writeData = new byte[fs.Length];
             		fs.Read(writeData, 0, (int)fs.Length);
             		s.Write(writeData, 0, writeData.Length);
             		s.Close();
             	}
             }	
             </code>
             </example>
        </member>
        <member name="F:NZlib.GZip.GZipOutputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="M:NZlib.GZip.GZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipOutputStream with the default buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
        </member>
        <member name="M:NZlib.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZIPOutputStream with the specified buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:NZlib.GZip.GZipOutputStream.Close">
            <summary>
            Writes remaining compressed output data to the output stream
            and closes it.
            </summary>
        </member>
        <member name="T:MySoft.Aop.IAopProxyFactory">
            <summary>
            IAopProxyFactory 用于创建特定的Aop代理的实例，IAopProxyFactory的作用是使AopProxyAttribute独立于具体的AOP代理类。
            2010.11.09
            </summary>
        </member>
        <member name="M:MySoft.Aop.IAopProxyFactory.CreateAopProxyInstance(System.MarshalByRefObject,System.Type)">
            <summary>
            创建Aop代理对象
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Remoting.ServiceModule">
            <summary>
            业务模块实体类
            </summary>
        </member>
        <member name="T:MySoft.Service.ServiceBase">
            <summary>
            服务配置基类
            </summary>
        </member>
        <member name="P:MySoft.Service.ServiceBase.Name">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:MySoft.Service.ServiceBase.AssemblyName">
            <summary>
            程序集名称字符串
            </summary>
        </member>
        <member name="P:MySoft.Service.ServiceBase.ClassName">
            <summary>
            完整类名
            </summary>
        </member>
        <member name="P:MySoft.Remoting.ServiceModule.Mode">
            <summary>
            对象激活方式（SingleCall或者SingleTon）
            </summary>
        </member>
        <member name="T:MySoft.Json.JsonFacade">
            <summary>
            Summary description for JsonFacade.
            </summary>
        </member>
        <member name="M:MySoft.Json.JsonFacade.toJSON(System.Collections.IDictionary)">
            <summary>
            Parse a Hashtable and return a JSON formatted string
            </summary>
            <param name="idict"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Json.JsonFacade.fromJSON(System.String)">
            <summary>
            Parse JSON formatted string and return a Hashtable
            </summary>
            <param name="sJSON"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Security.DESEncrypt">
            <summary> 
            DESEncrypt加密
            </summary> 
        </member>
        <member name="M:MySoft.Security.DESEncrypt.Encode(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串,失败返回源串</returns>
        </member>
        <member name="M:MySoft.Security.DESEncrypt.Decode(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="T:MySoft.Security.AESEncrypt">
            <summary> 
            AESEncrypt加密
            </summary> 
        </member>
        <member name="M:MySoft.Security.AESEncrypt.Encode(System.String,System.String)">
            <summary>
            AES加密字符串
            </summary>
            <param name="encryptString"></param>
            <param name="encryptKey"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Security.AESEncrypt.Decode(System.String,System.String)">
            <summary>
            AES解密字符串
            </summary>
            <param name="decryptString"></param>
            <param name="decryptKey"></param>
            <returns></returns>
        </member>
        <member name="T:NZlib.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:NZlib.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:NZlib.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:NZlib.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:NZlib.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:NZlib.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingHost">
            <summary>
            RemotingHost实体类
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingHost.Name">
            <summary>
            RemotingHost Name
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingHost.DefaultServer">
            <summary>
            默认服务器
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingHost.Servers">
            <summary>
            Remoting服务器集合
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingHost.Modules">
            <summary>
            远程对象业务模块集合
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingHost.IsChecking">
            <summary>
            该服务器是否正在被检测
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingClientHelper">
            <summary>
            The Remoting Client Helper
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.#ctor(MySoft.Remoting.RemotingChannelType,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.Remoting.RemotingClientHelper"/> class.
            </summary>
            <param name="channelType">Type of the channel.</param>
            <param name="serverAddress">The server address.</param>
            <param name="serverPort">The server port.</param>
            <param name="callbackPort">The callback port.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.GetWellKnownClientInstance``1(System.String)">
            <summary>
            Gets the well known client instance.
            </summary>
            <param name="notifyName">Name of the notify.</param>
            <returns>Te instance.</returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.CreateActivatedClientInstance``1">
            <summary>
            Creates the activated client instance.
            </summary>
            <returns>Te instance.</returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.IsClientTypeRegistered(System.Type)">
            <summary>
            Determines whether the specified client type is registered.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.RegisterActivatedClientType(System.Type)">
            <summary>
            Registers the type of the activated client.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:MySoft.Remoting.RemotingClientHelper.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            Determines whether the collection is null, empty or its contents are uninitialized values.
            </summary>
            <param name="list">The list.</param>
            <returns>
            	<c>true</c> if the collection is null or empty or its contents are uninitialized values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Makes a slice of the specified list in between the start and end indexes.
            </summary>
            <param name="list">The list.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <returns>A slice of the list.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Makes a slice of the specified list in between the start and end indexes,
            getting every so many items based upon the step.
            </summary>
            <param name="list">The list.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <param name="step">The step.</param>
            <returns>A slice of the list.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.GroupBy``2(System.Collections.Generic.ICollection{``1},Newtonsoft.Json.Utilities.Func{``1,``0})">
            <summary>
            Group the collection using a function which returns the key.
            </summary>
            <param name="source">The source collection to group.</param>
            <param name="keySelector">The key selector.</param>
            <returns>A Dictionary with each key relating to a list of objects in a list grouped under it.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:MySoft.Core.CompressionManager">
            <summary>
            Compress Manager
            </summary>
        </member>
        <member name="M:MySoft.Core.CompressionManager.Compress7Zip(System.String)">
            <summary>
            7Zip Compress the str.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CompressionManager.Decompress7Zip(System.String)">
            <summary>
            7Zip Decompress the str.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="T:NZlib.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of deflate and setInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:NZlib.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
        </member>
        <member name="T:MySoft.Aop.AopProxyAttribute">
            <summary>
            AopProxyAttribute
            AOP代理特性，如果一个类想实现具体的AOP，只要实现AopProxyBase和IAopProxyFactory，然后加上该特性即可。
            2010.11.09
            </summary>
        </member>
        <member name="M:MySoft.Aop.AopProxyAttribute.CreateInstance(System.Type)">
            <summary>
            获得目标对象的自定义透明代理
            </summary>
        </member>
        <member name="T:MySoft.Core.SerializationManager">
            <summary>
            The serialization manager.
            </summary>
        </member>
        <member name="M:MySoft.Core.SerializationManager.SerializeBin(System.Object)">
            <summary>
            将对象系列化成二进制
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.SerializeJson(System.Object)">
            <summary>
            将对象系列化成字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.DeserializeBin(System.Byte[])">
            <summary>
            将数据反系列化成对象
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.DeserializeBin``1(System.Byte[])">
            <summary>
            将数据反系列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.DeserializeJson(System.Type,System.String)">
            <summary>
            将字符串反系列化成对象
            </summary>
            <param name="returnType"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.DeserializeJson``1(System.String)">
            <summary>
            将字符串反系列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.SerializeXml(System.Object)">
            <summary>
            Serializes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.SerializeXml(System.Object,System.Text.Encoding)">
            <summary>
            Serializes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.DeserializeXml``1(System.String)">
            <summary>
            Deserializes the specified return type.
            </summary>
            <param name="returnType">Type of the return.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.DeserializeXml(System.Type,System.String)">
            <summary>
            Deserializes the specified return type.
            </summary>
            <param name="returnType">Type of the return.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.RegisterSerializeHandler(System.Type,MySoft.Core.SerializationManager.TypeSerializeHandler,MySoft.Core.SerializationManager.TypeDeserializeHandler)">
            <summary>
            Registers the serialize handler.
            </summary>
            <param name="type">The type.</param>
            <param name="serializeHandler">The serialize handler.</param>
            <param name="deserializeHandler">The deserialize handler.</param>
        </member>
        <member name="M:MySoft.Core.SerializationManager.UnregisterSerializeHandler(System.Type)">
            <summary>
            Unregisters the serialize handler.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:MySoft.Core.SerializationManager.TypeSerializeHandler">
            <summary>
            The serialize delegate.
            </summary>
            <param name="obj">obj to be serialized.</param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Core.SerializationManager.TypeDeserializeHandler">
            <summary>
            The deserialize delegate.
            </summary>
            <param name="data">the data to be deserialied.</param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Core.SortProperty">
            <summary>
            排序数据属性
            </summary>
        </member>
        <member name="P:MySoft.Core.SortProperty.Asc">
            <summary>
            从小到大
            </summary>
        </member>
        <member name="P:MySoft.Core.SortProperty.Desc">
            <summary>
            从大到小
            </summary>
        </member>
        <member name="T:MySoft.Core.SortComparer`1">
            <summary>
            自定义数据排序算法
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Core.SortComparer`1.#ctor(MySoft.Core.SortProperty[])">
            <summary>
            初始化自定义比较类
            </summary>
            <param name="sorts"></param>
        </member>
        <member name="M:MySoft.Core.SortComparer`1.AddProperty(MySoft.Core.SortProperty[])">
            <summary>
            添加排序属性
            </summary>
            <param name="sorts"></param>
        </member>
        <member name="M:MySoft.Core.SortComparer`1.Compare(`0,`0)">
            <summary>
            实现Compare比较两个值的大小
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SortComparer`1.CompareValue(`0,`0,System.Int32)">
            <summary>
            进行深层排序
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SortComparer`1.CompareProperty(`0,`0,MySoft.Core.SortProperty)">
            <summary>
            比较两个值的大小(从小到大)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Service.ServiceFactory">
            <summary>
            创建本地服务
            </summary>
        </member>
        <member name="M:MySoft.Service.ServiceFactory.Create">
            <summary>
            创建服务工厂
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Service.ServiceFactory.GetService``1(System.String)">
            <summary>
            获取服务
            </summary>
            <typeparam name="ServiceType"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Service.ServiceFactory.GetService``1">
            <summary>
            获取服务
            </summary>
            <typeparam name="ServiceType"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MySoft.Remoting.IRemotingTest">
            <summary>
            Remoting测试类接口
            </summary>
        </member>
        <member name="M:MySoft.Remoting.IRemotingTest.GetDate">
            <summary>
            测试方法，获取Remoting服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Remoting.RemotingTest">
            <summary>
            Remoting测试类，用来测试Remoting服务器是否运行正常
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingTest.GetDate">
            <summary>
            测试方法，获取Remoting服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:NZlib.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for the deflater.
            </summary>
        </member>
        <member name="F:NZlib.Compression.DeflaterEngine.comprFunc">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:NZlib.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:NZlib.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:NZlib.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:NZlib.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:NZlib.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="T:MySoft.Converter.ObjectBuilder`1">
            <summary>
            对象构造器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Converter.ObjectBuilder">
            <summary>
            对象构造器
            </summary>
        </member>
        <member name="T:MySoft.Task.ITask">
            <summary>
            任务接口
            </summary>
        </member>
        <member name="M:MySoft.Task.ITask.Run">
            <summary>
            任务执行入口
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingClientConfigurationHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.ContainsWhiteSpace(System.String)">
            <summary>
            Determines whether the string contains white space.
            </summary>
            <param name="s">The string to test for white space.</param>
            <returns>
            	<c>true</c> if the string contains white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.EnsureEndsWith(System.String,System.String)">
            <summary>
            Ensures the target string ends with the specified string.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <returns>The target string with the value string at the end.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsNullOrEmpty(System.Data.SqlTypes.SqlString)">
            <summary>
            Determines whether the SqlString is null or empty.
            </summary>
            <param name="s">The string.</param>
            <returns>
            	<c>true</c> if the SqlString is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IfNotNullOrEmpty(System.String,System.Action{System.String})">
            <summary>
            Perform an action if the string is not null or empty.
            </summary>
            <param name="value">The value.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32)">
            <summary>
            Indents the specified string.
            </summary>
            <param name="s">The string to indent.</param>
            <param name="indentation">The number of characters to indent by.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32,System.Char)">
            <summary>
            Indents the specified string.
            </summary>
            <param name="s">The string to indent.</param>
            <param name="indentation">The number of characters to indent by.</param>
            <param name="indentChar">The indent character.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.NumberLines(System.String)">
            <summary>
            Numbers the lines.
            </summary>
            <param name="s">The string to number.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>   
            Writes the JSON representation of the object.   
            </summary>   
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>   
            <param name="value">The value.</param>   
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>   
            Determines whether this instance can convert the specified value type.   
            </summary>   
            <param name="valueType">Type of the value.</param>   
            <returns>   
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.   
            </returns>   
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>   
            Reads the JSON representation of the object.   
            </summary>   
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>   
            <param name="objectType">Type of the object.</param>   
            <returns>The object value.</returns>   
        </member>
        <member name="T:MySoft.Aop.AopSwitcherAttribute">
            <summary>
            AopSwitcherAttribute 用于决定一个被AopProxyAttribute修饰的class的某个特定方法是否启用截获 。
            创建原因：绝大多数时候我们只希望对某个类的一部分Method而不是所有Method使用截获。
            使用方法：如果一个方法没有使用AopSwitcherAttribute特性或使用AopSwitcherAttribute(false)修饰，
            　　 都不会对其进行截获。只对使用了AopSwitcherAttribute(true)启用截获。
            2010.11.09
            </summary>
        </member>
        <member name="P:MySoft.Aop.AopSwitcherAttribute.UseAspect">
            <summary>
            是否使用切面处理
            </summary>
        </member>
        <member name="T:MySoft.Core.ErrorLogEventHandler">
            <summary>
            A delegate used for exception.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:MySoft.Core.IErrorLogable">
            <summary>
            Mark a implementing class as loggable.
            </summary>
        </member>
        <member name="E:MySoft.Core.IErrorLogable.OnError">
            <summary>
            OnError event.
            </summary>
        </member>
        <member name="T:MySoft.Core.TypeConstructor">
            <summary> 
            考虑到某些类型没有无参的构造函数，增加了描述构造信息的专门结构 
            </summary> 
        </member>
        <member name="T:MySoft.Core.ITypeMap">
            <summary> 
            管理抽象类型与实体类型的字典类型 
            </summary> 
        </member>
        <member name="M:MySoft.Core.ITypeMap.AddTypeConstructor(System.Type,MySoft.Core.TypeConstructor)">
            <summary>
            注册抽象类型需要使用的实体类型 
            该类型实体具有构造参数，实际的配置信息可以从外层机制获得。 
            </summary>
            <param name="type"></param>
            <param name="typeConstructor"></param>
        </member>
        <member name="P:MySoft.Core.ITypeMap.Item(System.Type)">
            <summary> 
            根据注册的目标抽象类型，返回一个实体类型及其构造参数数组 
            </summary> 
            <param name="type"></param> 
            <returns></returns> 
        </member>
        <member name="T:MySoft.Core.TypeMap">
            <summary> 
            管理抽象类型与实际实体类型映射关系，实际工程中应该从配置系统、参数系统获得。 
            这里为了示例方便，采用了一个纯内存字典的方式。 
            </summary> 
        </member>
        <member name="M:MySoft.Core.TypeMap.#ctor">
            <summary> 
            Singleton 
            </summary> 
        </member>
        <member name="M:MySoft.Core.TypeMap.AddTypeConstructor(System.Type,MySoft.Core.TypeConstructor)">
            <summary>
            注册抽象类型需要使用的实体类型 
            该类型实体具有构造参数，实际的配置信息可以从外层机制获得。 
            </summary>
            <param name="type"></param>
            <param name="typeConstructor"></param>
        </member>
        <member name="P:MySoft.Core.TypeMap.Item(System.Type)">
            <summary> 
            根据注册的目标抽象类型，返回一个实体类型及其构造参数数组 
            </summary> 
            <param name="type"></param> 
            <returns></returns> 
        </member>
        <member name="T:MySoft.Core.Assembler`1">
            <summary>
            提供注入的实现类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:MySoft.Core.Assembler`1.map">
            <summary> 
            其实TypeMap工程上本身就是个需要注入的类型，可以通过访问配置系统获得， 
            这里为了示例的方便，手工配置了一些类型映射信息。 
            </summary> 
        </member>
        <member name="M:MySoft.Core.Assembler`1.Create">
            <summary>
            创建一个实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Remoting.IRemotingLogFileManager">
            <summary>
            文件管理Remoting服务
            </summary>
        </member>
        <member name="M:MySoft.Remoting.IRemotingLogFileManager.Delete(System.String)">
            <summary>
            删除日志文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:MySoft.Remoting.IRemotingLogFileManager.Get(System.String)">
            <summary>
            获取日志文件内容
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.IRemotingLogFileManager.GetAll">
            <summary>
            获取所有日志文件名列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Remoting.RemotingLogFileManager">
            <summary>
            Remoting Service Log File Manager
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingLogFileManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingLogFileManager.GetAll">
            <summary>
            获取所有日志文件名列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingLogFileManager.Get(System.String)">
            <summary>
            获取日志文件内容
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingLogFileManager.Delete(System.String)">
            <summary>
            删除日志文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:MySoft.Task.JobState">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="F:MySoft.Task.JobState.Running">
            <summary>
            正在运行
            </summary>
        </member>
        <member name="F:MySoft.Task.JobState.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:MySoft.Aop.AopProxyBase">
            <summary>
            AopProxyBase 所有自定义AOP代理类都从此类派生，覆写IAopOperator接口，实现具体的前/后处理 。
            2010.11.09
            </summary>
        </member>
        <member name="M:MySoft.Aop.AopProxyBase.PreProceed(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            抽象PreProcess方法
            </summary>
            <param name="requestMsg"></param>
        </member>
        <member name="M:MySoft.Aop.AopProxyBase.PostProceed(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Runtime.Remoting.Messaging.IMethodReturnMessage@)">
            <summary>
            抽象PostProcess方法
            </summary>
            <param name="requestMsg"></param>
            <param name="respondMsg"></param>
        </member>
        <member name="T:MySoft.Remoting.RemotingClientUtil`1">
            <summary>
            Remoting客户端工具类
            </summary>
            <typeparam name="T">一般为接口类型</typeparam>
        </member>
        <member name="F:MySoft.Remoting.RemotingClientUtil`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientUtil`1.LoadModulesByHost(MySoft.Remoting.RemotingHost)">
            <summary>
            加载远程对象代理客户端模块
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientUtil`1.GetRemotingObject(System.String,System.String)">
            <summary>
            获取远程对象
            </summary>
            <param name="hostName"></param>
            <param name="remoteObjectName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientUtil`1.GetRemotingObject(System.String)">
            <summary>
            获取远程对象（默认为第一个RemotingClient的默认服务器）
            </summary>
            <param name="remoteObjectName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientUtil`1.GetWellKnownClientInstance(System.String)">
            <summary>
            获取知名对象客户端代理实例
            </summary>
            <param name="objectUrl"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingClientUtil`1.RemotingServerTest(System.String)">
            <summary>
            Remoting服务器测试
            </summary>
            <param name="serverUrl">Remoting服务器地址 （比如：tcp://127.0.0.1:8888）</param>
            <returns>Remoting服务器时间</returns>
        </member>
        <member name="P:MySoft.Remoting.RemotingClientUtil`1.RemotingConfiguration">
            <summary>
            Remoting Configuration
            </summary>
        </member>
        <member name="E:MySoft.Remoting.RemotingClientUtil`1.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingChannelType">
            <summary>
            Remoting Channel Type
            </summary>
        </member>
        <member name="F:MySoft.Remoting.RemotingChannelType.Tcp">
            <summary>
            TCP
            </summary>
        </member>
        <member name="F:MySoft.Remoting.RemotingChannelType.Http">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="T:MySoft.Remoting.TransferType">
            <summary>
            Remoting Data Type
            </summary>
        </member>
        <member name="F:MySoft.Remoting.TransferType.Binary">
            <summary>
            二进制
            </summary>
        </member>
        <member name="F:MySoft.Remoting.TransferType.Json">
            <summary>
            json格式
            </summary>
        </member>
        <member name="F:MySoft.Remoting.TransferType.Xml">
            <summary>
            xml格式
            </summary>
        </member>
        <member name="T:MySoft.Remoting.CompressType">
            <summary>
            压缩方式
            </summary>
        </member>
        <member name="F:MySoft.Remoting.CompressType.None">
            <summary>
            不压缩
            </summary>
        </member>
        <member name="F:MySoft.Remoting.CompressType.GZip">
            <summary>
            GZIP压缩方式
            </summary>
        </member>
        <member name="F:MySoft.Remoting.CompressType.Zip">
            <summary>
            7ZIP压缩方式
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of Json token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader"/> if a <see cref="M:Newtonsoft.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An interger.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Constructor">
            <summary>
            A JavaScript object constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="T:NZlib.Zip.ZipOutputStream">
            <summary>
            This is a FilterOutputStream that writes the files into a zip
            archive one after another.  It has a special method to start a new
            zip entry.  The zip entries contains information about the file name
            size, compressed size, CRC, etc.
            
            It includes support for STORED and DEFLATED entries.
            This class is not thread safe.
            
            author of the original java version : Jochen Hoenicke
            </summary>
            <example> This sample shows how to create a zip file
            <code>
            using System;
            using System.IO;
            
            using NZlib.Zip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		string[] filenames = Directory.GetFiles(args[0]);
            		
            		ZipOutputStream s = new ZipOutputStream(File.Create(args[1]));
            		
            		s.SetLevel(5); // 0 - store only to 9 - means best compression
            		
            		foreach (string file in filenames) {
            			FileStream fs = File.OpenRead(file);
            			
            			byte[] buffer = new byte[fs.Length];
            			fs.Read(buffer, 0, buffer.Length);
            			
            			ZipEntry entry = new ZipEntry(file);
            			
            			s.PutNextEntry(entry);
            			
            			s.Write(buffer, 0, buffer.Length);
            			
            		}
            		
            		s.Finish();
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="F:NZlib.Zip.ZipOutputStream.ZIP_STORED_VERSION">
            <summary>
            Our Zip version is hard coded to 1.0 resp. 2.0
            </summary>
        </member>
        <member name="F:NZlib.Zip.ZipOutputStream.STORED">
            <summary>
            Compression method.  This method doesn't compress at all.
            </summary>
        </member>
        <member name="F:NZlib.Zip.ZipOutputStream.DEFLATED">
            <summary>
            Compression method.  This method uses the Deflater.
            </summary>
        </member>
        <member name="M:NZlib.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            the output stream to which the zip archive is written.
            </param>
        </member>
        <member name="M:NZlib.Zip.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            the comment.
            </param>
            <exception name ="ArgumentException">
            if UTF8 encoding of comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:NZlib.Zip.ZipOutputStream.SetMethod(System.Int32)">
            <summary>
            Sets default compression method.  If the Zip entry specifies
            another method its method takes precedence.
            </summary>
            <param name = "method">
            the method.
            </param>
            <exception name = "ArgumentException">
            if method is not supported.
            </exception>
        </member>
        <member name="M:NZlib.Zip.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets default compression level.  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if level is not supported.
            </exception>
            <see cref="T:NZlib.Compression.Deflater"/>
        </member>
        <member name="M:NZlib.Zip.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:NZlib.Zip.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:NZlib.Zip.ZipOutputStream.PutNextEntry(NZlib.Zip.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.  If the compression method is stored, the entry
            must have a valid size and crc, otherwise all elements (except
            name) are optional, but must be correct if present.  If the time
            is not set in the entry, the current time is used.
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
        </member>
        <member name="M:NZlib.Zip.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry.
            </summary>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if no entry is active.
            </exception>
        </member>
        <member name="M:NZlib.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if no entry is active.
            </exception>
        </member>
        <member name="M:NZlib.Zip.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
        </member>
        <member name="T:NZlib.GZip.GZipInputStream">
            <summary>
            This filter stream is used to decompress a "GZIP" format stream.
            The "GZIP" format is described baseInputStream RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to unzip a gzipped file
            <code>
            using System;
            using System.IO;
            
            using NZlib.GZip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		Stream s = new GZipInputStream(File.OpenRead(args[0]));
            		FileStream fs = File.Create(Path.GetFileNameWithoutExtension(args[0]));
            		int size = 2048;
            		byte[] writeData = new byte[2048];
            		while (true) {
            			size = s.Read(writeData, 0, size);
            			if (size > 0) {
            				fs.Write(writeData, 0, size);
            			} else {
            				break;
            			}
            		}
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="T:NZlib.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed baseInputStream the "deflate"
             format. The "deflate" format is described baseInputStream RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <code>GzipInputStream</code>.
            
             author of the original java version : John Leuner
             </summary>
        </member>
        <member name="F:NZlib.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this filter
            </summary>
        </member>
        <member name="F:NZlib.Streams.InflaterInputStream.buf">
            <summary>
            Byte array used as a buffer
            </summary>
        </member>
        <member name="F:NZlib.Streams.InflaterInputStream.len">
            <summary>
            Size of buffer
            </summary>
        </member>
        <member name="F:NZlib.Streams.InflaterInputStream.baseInputStream">
            <summary>
            base stream the inflater depends on.
            </summary>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompresseor
            and a default buffer size.
            </summary>
            <param name = "baseInputStream">
            the InputStream to read bytes from
            </param>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.#ctor(System.IO.Stream,NZlib.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompresseor
            and a default buffer size.
            </summary>
            <param name = "baseInputStream">
            the InputStream to read bytes from
            </param>
            <param name = "inf">
            the decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.#ctor(System.IO.Stream,NZlib.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompresseor
            and a specified buffer size.
            </summary>
            <param name = "baseInputStream">
            the InputStream to read bytes from
            </param>
            <param name = "inf">
            the decompressor used to decompress data read from baseInputStream
            </param>
            <param name = "size">
            size of the buffer to use
            </param>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream
            </summary>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.ReadByte">
             <summary>
             Reads one byte of decompressed data.
            
             The byte is baseInputStream the lower 8 bits of the int.
             </summary>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses data into the byte array
            </summary>
            <param name ="b">
            the array to read and decompress data into
            </param>
            <param name ="off">
            the offset indicating where the data should be placed
            </param>
            <param name ="len">
            the number of bytes to decompress
            </param>
        </member>
        <member name="M:NZlib.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name ="n">
            number of bytes to skip
            </param>
        </member>
        <member name="P:NZlib.Streams.InflaterInputStream.CanRead">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="P:NZlib.Streams.InflaterInputStream.CanSeek">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="P:NZlib.Streams.InflaterInputStream.CanWrite">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="P:NZlib.Streams.InflaterInputStream.Length">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="P:NZlib.Streams.InflaterInputStream.Position">
            <summary>
            I needed to implement the abstract member.
            </summary>
        </member>
        <member name="F:NZlib.GZip.GZipInputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="F:NZlib.GZip.GZipInputStream.eos">
            <summary>
            Indicates end of stream
            </summary>
        </member>
        <member name="M:NZlib.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipInputStream with the default buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
        </member>
        <member name="M:NZlib.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZIPInputStream with the specified buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:NZlib.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads uncompressed data into an array of bytes
            </summary>
            <param name="buf">
            the buffer to read uncompressed data into
            </param>
            <param name="offset">
            the offset indicating where the data should be placed
            </param>
            <param name="len">
            the number of uncompressed bytes to be read
            </param>
        </member>
        <member name="T:NZlib.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.DEFAULT_STRATEGY">
            <summary>
            The default strategy.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.FILTERED">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.HUFFMAN_ONLY">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.noHeader">
            <summary>
            should we include a header.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="lvl">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:NZlib.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="lvl">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="nowrap">
            true, if we should suppress the deflate header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP format.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:NZlib.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Deflater.GetAdler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Deflater.GetTotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Deflater.GetTotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:NZlib.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Deflater.Finished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Deflater.NeedsInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:NZlib.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="off">
            the start of the data.
            </param>
            <param name="len">
            the length of the data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended() or if previous input is still pending.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="lvl">
            the new compression level.
            </param>
        </member>
        <member name="M:NZlib.Compression.Deflater.SetStrategy(System.Int32)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            setLevel() applies.
            </summary>
            <param name="stgy">
            the new compression strategy.
            </param>
        </member>
        <member name="M:NZlib.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block to the given array.  It returns
            the number of bytes compressed, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </summary>
            <param name="output">
            the buffer where to write the compressed data.
            </param>
        </member>
        <member name="M:NZlib.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.  It returns
            the number of bytes compressed, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </summary>
            <param name="output">
            the buffer where to write the compressed data.
            </param>
            <param name="offset">
            the offset into the output array.
            </param>
            <param name="length">
            the maximum number of bytes that may be written.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if end() was called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if offset and/or length don't match the array length.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dict">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary should be a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dict">
            the dictionary.
            </param>
            <param name="offset">
            an offset into the dictionary.
            </param>
            <param name="length">
            the length of the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="T:MySoft.Core.DataPage">
            <summary>
            分页数据信息
            </summary>
        </member>
        <member name="M:MySoft.Core.DataPage.#ctor">
            <summary>
            初始化DataPage
            </summary>
        </member>
        <member name="M:MySoft.Core.DataPage.#ctor(System.Int32)">
            <summary>
            设置默认页大小
            </summary>
            <param name="pageSize"></param>
        </member>
        <member name="P:MySoft.Core.DataPage.CurrentPageIndex">
            <summary>
            获取或设置页序数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.PageSize">
            <summary>
            获取或设置页大小
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.RowCount">
            <summary>
            获取或设置记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.PageCount">
            <summary>
            获取或设置页数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.IsFirstPage">
            <summary>
             获取一个值，该值指示当前页是否是首页
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.IsLastPage">
            <summary>
            获取一个值，该值指示当前页是否是最后一页
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.CurrentRowCount">
            <summary>
            获取当前数据源的记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.CurrentStartIndex">
            <summary>
            获取开始记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.CurrentEndIndex">
            <summary>
            获取结束记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="T:MySoft.Core.DataPage`1">
            <summary>
            分页数据信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Core.DataPage`1.#ctor">
            <summary>
            初始化DataPage
            </summary>
        </member>
        <member name="M:MySoft.Core.DataPage`1.#ctor(System.Int32)">
            <summary>
            设置默认页大小
            </summary>
            <param name="pageSize"></param>
        </member>
        <member name="P:MySoft.Core.DataPage`1.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingServerConfigurationHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingServerConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:NZlib.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1950.
            
             The usage is as following.  First you have to set some input with
             <code>setInput()</code>, then inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>needsInput() returns true because the input buffer is empty.
             You have to provide more input with <code>setInput()</code>.
             NOTE: needsInput() also returns true when, the stream is finished.
             </li>
             <li>needsDictionary() returns true, you have to provide a preset
                dictionary with <code>setDictionary()</code>.</li>
             <li>finished() returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.DECODE_HEADER">
            <summary>
            This are the state in which the inflater can be.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by getTotalIn(), since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:NZlib.Compression.Inflater.nowrap">
            <summary>
            This variable stores the nowrap flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a header nor the
            checksum in the footer.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="nowrap">
            true if no header and checksum field appears in the
            stream.  This is used for GZIPed input.  For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:NZlib.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes the deflate header.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:System.FormatException">
            if header is invalid.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
        </member>
        <member name="M:NZlib.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:System.FormatException">
            DataFormatException, if checksum doesn't match.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:System.FormatException">
            DataFormatException, if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if no dictionary is needed.
            </exception>
            <exception cref="T:System.ArgumentException">
            if the dictionary checksum is wrong.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            the dictionary.
            </param>
            <param name="off">
            the offset into buffer where the dictionary starts.
            </param>
            <param name="len">
            the length of the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if no dictionary is needed.
            </exception>
            <exception cref="T:System.ArgumentException">
            if the dictionary checksum is wrong.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the off and/or len are wrong.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buf">
            the input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if no input is needed.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buf">
            the input.
            </param>
            <param name="off">
            the offset into buffer where the input starts.
            </param>
            <param name="len">
            the length of the input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if no input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the off and/or len are wrong.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buf has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <param name="off">
            the offset into buffer where the output should start.
            </param>
            <param name="len">
            the maximum length of the output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if len is &lt;= 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the off and/or len are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:NZlib.Compression.Inflater.NeedsInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Inflater.NeedsDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Inflater.Finished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="M:NZlib.Compression.Inflater.GetAdler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="M:NZlib.Compression.Inflater.GetTotalOut">
            <summary>
            Gets the total number of output bytes returned by inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="M:NZlib.Compression.Inflater.GetTotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            the total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="M:NZlib.Compression.Inflater.GetRemaining">
            <summary>
            Gets the number of unprocessed input.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            the number of bytes of the input which were not processed.
            </returns>
        </member>
        <member name="T:MySoft.Core.FastInvokeHandler">
            <summary>Delegate for calling a method that is not known at runtime.</summary>
            <param name="target">the object to be called or null if the call is to a static method.</param>
            <param name="paramters">the parameters to the method.</param>
            <returns>the return value for the method or null if it doesn't return anything.</returns>
        </member>
        <member name="T:MySoft.Core.FastCreateInstanceHandler">
            <summary>Delegate for creating and object at runtime using the default constructor.</summary>
            <returns>the newly created object.</returns>
        </member>
        <member name="T:MySoft.Core.FastPropertyGetHandler">
            <summary>Delegate to get an arbitraty property at runtime.</summary>
            <param name="target">the object instance whose property will be obtained.</param>
            <returns>the property value.</returns>
        </member>
        <member name="T:MySoft.Core.FastPropertySetHandler">
            <summary>Delegate to set an arbitrary property at runtime.</summary>
            <param name="target">the object instance whose property will be modified.</param>
            <param name="parameter"></param>
        </member>
        <member name="T:MySoft.Core.DynamicCalls">
            <summary>Class with helper methods for dynamic invocation generating IL on the fly.</summary>
        </member>
        <member name="F:MySoft.Core.DynamicCalls.dictInvoker">
            <summary>
            用于存放GetMethodInvoker的Dictionary
            </summary>
        </member>
        <member name="F:MySoft.Core.DynamicCalls.dictCreator">
            <summary>
            用于存放GetInstanceCreator的Dictionary
            </summary>
        </member>
        <member name="M:MySoft.Core.DynamicCalls.GetInstanceCreator(System.Type)">
            <summary>Gets the instance creator delegate that can be use to create instances of the specified type.</summary>
            <param name="type">The type of the objects we want to create.</param>
            <returns>A delegate that can be used to create the objects.</returns>
        </member>
        <member name="F:MySoft.Core.DynamicCalls.dictGetter">
            <summary>
            用于存放GetPropertyGetter的Dictionary
            </summary>
        </member>
        <member name="F:MySoft.Core.DynamicCalls.dictSetter">
            <summary>
            用于存放SetPropertySetter的Dictionary
            </summary>
        </member>
        <member name="M:MySoft.Core.DynamicCalls.EmitCastToReference(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Emits the cast to a reference, unboxing if needed.</summary>
            <param name="il">The MSIL generator.</param>
            <param name="type">The type to cast.</param>
        </member>
        <member name="M:MySoft.Core.DynamicCalls.EmitBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Boxes a type if needed.</summary>
            <param name="ilGenerator">The MSIL generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:MySoft.Core.DynamicCalls.EmitFastInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>Emits code to save an integer to the evaluation stack.</summary>
            <param name="ilGeneartor">The MSIL generator.</param>
            <param name="value">The value to push.</param>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonWriter.Indentation"/> and <see cref="P:Newtonsoft.Json.JsonWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current Json object or array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JavaScript manually.
            </summary>
            <param name="javaScript">The raw JavaScript to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Indicates how the output is formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <paramref name="Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <paramref name="Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next Json token from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current Json token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current Json token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
        </member>
        <member name="T:NZlib.Streams.OutputWindow">
             <summary>
             Contains the output from the Inflation process.
             We need to have a window so that we can refer backwards into the output stream
             to repeat stuff.
            
             author of the original java version : John Leuner
             </summary>
        </member>
        <member name="T:NZlib.Zip.ZipEntry">
             <summary>
             This class represents a member of a zip archive.  ZipFile and
             ZipInputStream will give you instances of this class as information
             about the members in an archive.  On the other hand ZipOutputStream
             needs an instance of this class to create a new member.
            
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:NZlib.Zip.ZipEntry.STORED">
            <summary>
            Compression method.  This method doesn't compress at all.
            </summary>
        </member>
        <member name="F:NZlib.Zip.ZipEntry.DEFLATED">
            <summary>
            Compression method.  This method uses the Deflater.
            </summary>
        </member>
        <member name="M:NZlib.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            the name. May include directory components separated by '/'.
            </param>
        </member>
        <member name="M:NZlib.Zip.ZipEntry.#ctor(NZlib.Zip.ZipEntry)">
            <summary>
            Creates a copy of the given zip entry.
            </summary>
            <param name="e">
            the entry to copy.
            </param>
        </member>
        <member name="M:NZlib.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
        </member>
        <member name="M:NZlib.Zip.ZipEntry.ToString">
            <summary>
            Gets the string representation of this ZipEntry.  This is just
            the name as returned by getName().
            </summary>
        </member>
        <member name="P:NZlib.Zip.ZipEntry.Name">
            <summary>
            Returns the entry name.  The path components in the entry are
            always separated by slashes ('/').
            </summary>
        </member>
        <member name="P:NZlib.Zip.ZipEntry.Time">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
            <returns>
            the time of last modification of the entry, or -1 if unknown.
            </returns>
        </member>
        <member name="P:NZlib.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if size is not in 0..0xffffffffL
            </exception>
            <returns>
            the size or -1 if unknown.
            </returns>
        </member>
        <member name="P:NZlib.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if csize is not in 0..0xffffffffL
            </exception>
            <returns>
            the size or -1 if unknown.
            </returns>
        </member>
        <member name="P:NZlib.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if crc is not in 0..0xffffffffL
            </exception>
            <returns>
            the crc or -1 if unknown.
            </returns>
        </member>
        <member name="P:NZlib.Zip.ZipEntry.Method">
            <summary>
            Gets/Sets the compression method. Only DEFLATED and STORED are supported.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if method is not supported.
            </exception>
            <returns>
            the compression method or -1 if unknown.
            </returns>
            <see cref="F:NZlib.Zip.ZipOutputStream.DEFLATED"/>
            <see cref="F:NZlib.Zip.ZipOutputStream.STORED"/>
        </member>
        <member name="P:NZlib.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if extra is longer than 0xffff bytes.
            </exception>
            <returns>
            the extra data or null if not set.
            </returns>
        </member>
        <member name="P:NZlib.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if comment is longer than 0xffff.
            </exception>
            <returns>
            the comment or null if not set.
            </returns>
        </member>
        <member name="P:NZlib.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets true, if the entry is a directory.  This is solely
            determined by the name, a trailing slash '/' marks a directory.
            </summary>
        </member>
        <member name="T:NZlib.Checksums.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:NZlib.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:NZlib.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:NZlib.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "bval">
            the byte is taken as the lower 8 bits of bval
            </param>
        </member>
        <member name="M:NZlib.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:NZlib.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:NZlib.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:NZlib.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:NZlib.Streams.InflaterInputStream"/>
            <see cref="T:NZlib.Streams.DeflaterOutputStream"/>
        </member>
        <member name="F:NZlib.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:NZlib.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the <code>Adler32</code> class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:NZlib.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:NZlib.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:NZlib.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:NZlib.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buf">
            an array of bytes
            </param>
            <param name="off">
            the start of the data used for this update
            </param>
            <param name="len">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:NZlib.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:MySoft.Core.LogEventHandler">
            <summary>
            A delegate used for log.
            </summary>
            <param name="log">The msg to write to log.</param>
        </member>
        <member name="T:MySoft.Json.JSONTokener">
            <summary>
            <para>
             A JSONTokener takes a source string and extracts characters and tokens from
             it. It is used by the JSONObject and JSONArray constructors to parse
             JSON source strings.
             </para>
             <para>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
             </para>
             <para>Ported to C# by Are Bjolseth, teleplan.no</para>
             <para>
             <list type="bullet">
             <item><description>Implement Custom exceptions</description></item>
             <item><description>Add unit testing</description></item>
             <item><description>Add log4net</description></item>
             </list>
             </para>
            </summary>
        </member>
        <member name="F:MySoft.Json.JSONTokener.myIndex">
            <summary>The index of the next character.</summary>
        </member>
        <member name="F:MySoft.Json.JSONTokener.mySource">
            <summary>The source string being tokenized.</summary>
        </member>
        <member name="M:MySoft.Json.JSONTokener.#ctor(System.String)">
            <summary>
            Construct a JSONTokener from a string.
            </summary>
            <param name="s">A source string.</param>
        </member>
        <member name="M:MySoft.Json.JSONTokener.back">
            <summary>
            Back up one character. This provides a sort of lookahead capability,
            so that you can test for a digit or letter before attempting to parse
            the next number or identifier.
            </summary>
        </member>
        <member name="M:MySoft.Json.JSONTokener.dehexchar(System.Char)">
            <summary>
            Get the hex value of a character (base16).
            </summary>
            <param name="c">
            A character between '0' and '9' or between 'A' and 'F' or
            between 'a' and 'f'.
            </param>
            <returns>An int between 0 and 15, or -1 if c was not a hex digit.</returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.more">
            <summary>
            Determine if the source string still contains characters that next() can consume.
            </summary>
            <returns>true if not yet at the end of the source.</returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.next">
            <summary>
            Get the next character in the source string.
            </summary>
            <returns>The next character, or 0 if past the end of the source string.</returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.next(System.Char)">
            <summary>
            Consume the next character, and check that it matches a specified character
            </summary>
            <param name="c">The character to match.</param>
            <returns>The character.</returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.next(System.Int32)">
            <summary>
            Get the next n characters.
            </summary>
            <param name="n">The number of characters to take.</param>
            <returns>A string of n characters.</returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.nextClean">
            <summary>
            Get the next char in the string, skipping whitespace
            and comments (slashslash and slashstar).
            </summary>
            <returns>A character, or 0 if there are no more characters.</returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.nextString(System.Char)">
            <summary>
            Return the characters up to the next close quote character.
            Backslash processing is done. The formal JSON format does not
            allow strings in single quotes, but an implementation is allowed to
            accept them.
            </summary>
            <param name="quote">The quoting character, either " or '</param>
            <returns>A String.</returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.nextTo(System.Char)">
            <summary>
            Get the text up but not including the specified character or the
            end of line, whichever comes first.
            </summary>
            <param name="d">A delimiter character.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.nextTo(System.String)">
            <summary>
             Get the text up but not including one of the specified delimeter
             characters or the end of line, which ever comes first.
            </summary>
            <param name="delimiters">A set of delimiter characters.</param>
            <returns>A string, trimmed.</returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.nextObject">
            <summary>
            Get the next value as object. The value can be a Boolean, Double, Integer,
            JSONArray, JSONObject, or String, or the JSONObject.NULL object.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.skipTo(System.Char)">
            <summary>
            Skip characters until the next character is the requested character.
            If the requested character is not found, no characters are skipped.
            </summary>
            <param name="to">A character to skip to.</param>
            <returns>
            The requested character, or zero if the requested character is not found.
            </returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.skipPast(System.String)">
            <summary>
            Skip characters until past the requested string.
            If it is not found, we are left at the end of the source.
            </summary>
            <param name="to">A string to skip past.</param>
        </member>
        <member name="M:MySoft.Json.JSONTokener.ToString">
            <summary>
            Make a printable string of this JSONTokener.
            </summary>
            <returns>" at character [myIndex] of [mySource]"</returns>
        </member>
        <member name="M:MySoft.Json.JSONTokener.unescape">
            <summary>
            Unescape the source text. Convert %hh sequences to single characters,
            and convert plus to space. There are Web transport systems that insist on
            doing unnecessary URL encoding. This provides a way to undo it.
            </summary>
        </member>
        <member name="M:MySoft.Json.JSONTokener.unescape(System.String)">
            <summary>
            Convert %hh sequences to single characters, and convert plus to space.
            </summary>
            <param name="s">A string that may contain plus and %hh sequences.</param>
            <returns>The unescaped string.</returns>
        </member>
        <member name="T:NZlib.Zip.ZipConstants">
            <summary>
            This class contains constants used for zip.
            </summary>
        </member>
        <member name="T:NZlib.GZip.GZipConstants">
            <summary>
            This class contains constants used for gzip.
            </summary>
        </member>
        <member name="F:NZlib.GZip.GZipConstants.GZIP_MAGIC">
            <summary>
            Magic number found at start of GZIP header
            </summary>
        </member>
        <member name="T:MySoft.Task.Job">
            <summary>
            任务实体
            </summary>
        </member>
        <member name="M:MySoft.Task.Job.IsRun">
            <summary>
            根据当前时间判断任务是否需要执行
            </summary>
        </member>
        <member name="M:MySoft.Task.Job.Execute">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="E:MySoft.Task.Job.OnLog">
            <summary>
            事件处理日志
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.IsRegisterLog">
            <summary>
            是否注册了日志
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.BeginDate">
            <summary>
            任务开始日期
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.EndDate">
            <summary>
            任务结束日期
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.BeginTime">
            <summary>
            任务开始时间
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.EndTime">
            <summary>
            任务结束时间
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.Interval">
            <summary>
            任务循环执行时间间隔（单位：毫秒）
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.AssemblyName">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.ClassName">
            <summary>
            类名全称（任务执行入口方法在该类里面定义）
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.State">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.LatestRunTime">
            <summary>
            最近一次运行时间
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.LatestException">
            <summary>
            任务运行时最近发生的异常
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.ExceptionCount">
            <summary>
            异常计数
            </summary>
        </member>
        <member name="P:MySoft.Task.Job.Param">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:MySoft.Task.TaskConfigurationHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Task.TaskConfiguration">
            <summary>
            计划任务配置
            <remarks>
            <code>
            <configuration>
                <configSections>
            	    <sectionGroup name="serviceFramework">
            		    <section name="task" type="MySoft.Task.TaskConfigurationHandler, MySoft.Core"/>
            	    </sectionGroup>
                </configSections>
                   ......
                <serviceFramework>
            	    <task>
                        <job name="job1" beginDate="2008-1-1" endDate="2010-1-1" beginTime="" endTime="" interval="" assemblyName="" className=""/>
            	    </task>
                </serviceFramework>
            </configuration>
            </code>
            </remarks>
            </summary>
        </member>
        <member name="M:MySoft.Task.TaskConfiguration.GetConfig">
            <summary>
            获取定时任务配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Task.TaskConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MySoft.Task.TaskConfiguration.Jobs">
            <summary>
            任务集合
            </summary>
        </member>
        <member name="T:MySoft.Service.ServiceFactoryConfigurationHandler">
            <summary>
            本地服务
            </summary>
        </member>
        <member name="T:MySoft.Remoting.RemotingHostCheck">
            <summary>
            检测每个客户端的可用服务器
            </summary>
        </member>
        <member name="F:MySoft.Remoting.RemotingHostCheck.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingHostCheck.DoCheck">
            <summary>
            开始检测
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingHostCheck.GetUsableServerUrl(MySoft.Remoting.RemotingHost)">
            <summary>
            获取可用的服务器地址
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Remoting.RemotingHostCheck.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:MySoft.Remoting.RemotingHostCheck.CheckLog">
            <summary>
            服务器检测日志
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetListItemType(System.Type)">
            <summary>
            Gets the type of the typed list's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed list's items.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.ItemsUnitializedValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Tests whether the list's items are their unitialized value.
            </summary>
            <param name="list">The list.</param>
            <returns>Whether the list's items are their unitialized value</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="T:MySoft.Json.JSONObject">
             <summary>
             <para>
             A JSONArray is an ordered sequence of values. Its external form is a string
             wrapped in square brackets with commas between the values. The internal form
             is an object having get() and opt() methods for accessing the values by
             index, and put() methods for adding or replacing values. The values can be
             any of these types: Boolean, JSONArray, JSONObject, Number, String, or the
             JSONObject.NULL object.
             </para>
             <para>
             The constructor can convert a JSON external form string into an
             internal form Java object. The toString() method creates an external
             form string.
             </para>
             <para>
             A get() method returns a value if one can be found, and throws an exception
             if one cannot be found. An opt() method returns a default value instead of
             throwing an exception, and so is useful for obtaining optional values.
             </para>
             <para>
             The generic get() and opt() methods return an object which you can cast or
             query for type. There are also typed get() and opt() methods that do typing
             checking and type coersion for you.
            </para>
             <para>
             The texts produced by the toString() methods are very strict.
             The constructors are more forgiving in the texts they will accept.
             </para>
             <para>
             <list type="bullet">
             <item><description>An extra comma may appear just before the closing bracket.</description></item>
             <item><description>Strings may be quoted with single quotes.</description></item>
             <item><description>Strings do not need to be quoted at all if they do not contain leading
                 or trailing spaces, and if they do not contain any of these characters:
                 { } [ ] / \ : , </description></item>
             <item><description>Numbers may have the 0- (octal) or 0x- (hex) prefix.</description></item>
             </list>
             </para>
             <para>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
            </para>
             Ported to C# by Are Bjolseth, teleplan.no
             TODO:
             1. Implement Custom exceptions
             2. Add indexer JSONObject[i] = object,     and object = JSONObject[i];
             3. Add indexer JSONObject["key"] = object, and object = JSONObject["key"]
             4. Add unit testing
             5. Add log4net
             6. Make get/put methods private, to force use of indexer instead?
             </summary>
        </member>
        <member name="F:MySoft.Json.JSONObject.myHashMap">
            <summary>The hash map where the JSONObject's properties are kept.</summary>
        </member>
        <member name="F:MySoft.Json.JSONObject.myKeyIndexList">
            <summary>A shadow list of keys to enable access by sequence of insertion</summary>
        </member>
        <member name="F:MySoft.Json.JSONObject.NULL">
            <summary>
            It is sometimes more convenient and less ambiguous to have a NULL
            object than to use C#'s null value.
            JSONObject.NULL.toString() returns "null".
            </summary>
        </member>
        <member name="M:MySoft.Json.JSONObject.#ctor">
            <summary>
             Construct an empty JSONObject.
            </summary>
        </member>
        <member name="M:MySoft.Json.JSONObject.#ctor(MySoft.Json.JSONTokener)">
            <summary>
            Construct a JSONObject from a JSONTokener.
            </summary>
            <param name="x">A JSONTokener object containing the source string.</param>
        </member>
        <member name="M:MySoft.Json.JSONObject.#ctor(System.String)">
            <summary>
            Construct a JSONObject from a string.
            </summary>
            <param name="sJSON">A string beginning with '{' and ending with '}'.</param>
        </member>
        <member name="M:MySoft.Json.JSONObject.#ctor(System.Collections.IDictionary)">
            <summary>
            Construct a JSONObject from a IDictionary
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:MySoft.Json.JSONObject.accumulate(System.String,System.Object)">
            <summary>
            Accumulate values under a key. It is similar to the put method except
            that if there is already an object stored under the key then a
            JSONArray is stored under the key to hold all of the accumulated values.
            If there is already a JSONArray, then the new value is appended to it.
            In contrast, the put method replaces the previous value.
            </summary>
            <param name="key">A key string.</param>
            <param name="val">An object to be accumulated under the key.</param>
            <returns>this</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.getDictionary">
            <summary>
            C# convenience method
            </summary>
            <returns>The Hashtable</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.getValue(System.String)">
            <summary>
            Alias to Java get method
            Get the value object associated with a key.
            </summary>
            <param name="key">A key string.</param>
            <returns>The object associated with the key.</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.getJSONArray(System.String)">
            <summary>
            Get the JSONArray value associated with a key.
            </summary>
            <param name="key">A key string</param>
            <returns>A JSONArray which is the value</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.getJSONObject(System.String)">
            <summary>
            Get the JSONObject value associated with a key.
            </summary>
            <param name="key">A key string.</param>
            <returns>A JSONObject which is the value.</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.getString(System.String)">
            <summary>
            Get the string associated with a key.
            </summary>
            <param name="key">A key string.</param>
            <returns>A string which is the value.</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.has(System.String)">
            <summary>
            Determine if the JSONObject contains a specific key.
            </summary>
            <param name="key">A key string.</param>
            <returns>true if the key exists in the JSONObject.</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.keys">
            <summary>
            Get an enumeration of the keys of the JSONObject.
            Added to be true to orginal Java implementation
            Indexers are easier to use
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.isNull(System.String)">
            <summary>
            Determine if the value associated with the key is null or if there is no value.
            </summary>
            <param name="key">A key string</param>
            <returns>true if there is no value associated with the key or if the valus is the JSONObject.NULL object</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.Length">
            <summary>
            Get the number of keys stored in the JSONObject.
            </summary>
            <returns>The number of keys in the JSONObject.</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.names">
            <summary>
            Produce a JSONArray containing the pks of the elements of this JSONObject
            </summary>
            <returns>A JSONArray containing the key strings, or null if the JSONObject</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.opt(System.String)">
            <summary>
            Get an optional value associated with a key.
            </summary>
            <param name="key">A key string</param>
            <returns>An object which is the value, or null if there is no value.</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.optBoolean(System.String)">
            <summary>
            Get an optional value associated with a key.
            It returns false if there is no such key, or if the value is not
            Boolean.TRUE or the String "true".
            </summary>
            <param name="key">A key string.</param>
            <returns>bool value object</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.optBoolean(System.String,System.Boolean)">
            <summary>
            Get an optional value associated with a key.
            It returns false if there is no such key, or if the value is not
            Boolean.TRUE or the String "true".
            </summary>
            <param name="key">A key string.</param>
            <param name="defaultValue">The preferred return value if conversion fails</param>
            <returns>bool value object</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.optDouble(System.String)">
            <summary>
            Get an optional double associated with a key,
            or NaN if there is no such key or if its value is not a number.
            If the value is a string, an attempt will be made to evaluate it as
            a number.
            </summary>
            <param name="key">A string which is the key.</param>
            <returns>A double value object</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.optDouble(System.String,System.Double)">
            <summary>
            Get an optional double associated with a key,
            or NaN if there is no such key or if its value is not a number.
            If the value is a string, an attempt will be made to evaluate it as
            a number.
            </summary>
            <param name="key">A string which is the key.</param>
            <param name="defaultValue">The default</param>
            <returns>A double value object</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.optInt(System.String)">
            <summary>
             Get an optional double associated with a key, or the
             defaultValue if there is no such key or if its value is not a number.
             If the value is a string, an attempt will be made to evaluate it as
             number.
            </summary>
            <param name="key">A key string.</param>
            <returns>An int object value</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.optInt(System.String,System.Int32)">
            <summary>
             Get an optional double associated with a key, or the
             defaultValue if there is no such key or if its value is not a number.
             If the value is a string, an attempt will be made to evaluate it as
             number.
            </summary>
            <param name="key">A key string.</param>
            <param name="defaultValue">The default value</param>
            <returns>An int object value</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.optJSONArray(System.String)">
            <summary>
            Get an optional JSONArray associated with a key.
            It returns null if there is no such key, or if its value is not a JSONArray
            </summary>
            <param name="key">A key string</param>
            <returns>A JSONArray which is the value</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.optJSONObject(System.String)">
            <summary>
            Get an optional JSONObject associated with a key.
            It returns null if there is no such key, or if its value is not a JSONObject.
            </summary>
            <param name="key">A key string.</param>
            <returns>A JSONObject which is the value</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.optString(System.String)">
            <summary>
            Get an optional string associated with a key.
            It returns an empty string if there is no such key. If the value is not
            a string and is not null, then it is coverted to a string.
            </summary>
            <param name="key">A key string.</param>
            <returns>A string which is the value.</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.optString(System.String,System.String)">
            <summary>
            Get an optional string associated with a key.
            It returns the defaultValue if there is no such key.
            </summary>
            <param name="key">A key string.</param>
            <param name="defaultValue">The default</param>
            <returns>A string which is the value.</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.put(System.String,System.Object)">
            <summary>
            Put a key/value pair in the JSONObject. If the value is null,
            then the key will be removed from the JSONObject if it is present.
            </summary>
            <param name="key"> A key string.</param>
            <param name="val">
            An object which is the value. It should be of one of these
            types: Boolean, Double, Integer, JSONArray, JSONObject, String, or the
            JSONObject.NULL object.
            </param>
            <returns>JSONObject</returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.putOpt(System.String,System.Object)">
            <summary>
            Add a key value pair
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.remove(System.String)">
            <summary>
            Remove a object assosiateted with the given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.toJSONArray(MySoft.Json.JSONArray)">
            <summary>
            Append an array of JSONObjects to current object
            </summary>
            <param name="pks"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Json.JSONObject.ToString">
            <summary>
            Overridden to return a JSON formattet object as a string
            </summary>
            <returns>JSON object as formatted string</returns>
        </member>
        <member name="P:MySoft.Json.JSONObject.Item(System.Int32)">
            <summary>
            Return the key for the associated index
            </summary>
        </member>
        <member name="P:MySoft.Json.JSONObject.Item(System.String)">
            <summary>
            Get/Add an object with the associated key
            </summary>
        </member>
        <member name="P:MySoft.Json.JSONObject.Count">
            <summary>
            Return the number of JSON items in hashtable
            </summary>
        </member>
        <member name="T:MySoft.Json.JSONObject.JSONNull">
            <summary>
            Make a Null object
            JSONObject.NULL is equivalent to the value that JavaScript calls null,
            whilst C#'s null is equivalent to the value that JavaScript calls undefined.
            </summary>
        </member>
        <member name="M:MySoft.Json.JSONObject.JSONNull.ToString">
            <summary>
            Overriden to return "null"
            </summary>
            <returns>null</returns>
        </member>
        <member name="T:MySoft.Remoting.RemotingException">
            <summary>
            Remoting异常
            </summary>
        </member>
        <member name="M:MySoft.Remoting.RemotingException.#ctor(System.String)">
            <summary>
            普通异常的构造方法
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.Remoting.RemotingException.#ctor(System.String,System.Exception)">
            <summary>
            内嵌异常的构造方法
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:NZlib.Zip.ZipInputStream">
            <summary>
            This is a FilterInputStream that reads the files baseInputStream an zip archive
            one after another.  It has a special method to get the zip entry of
            the next file.  The zip entry contains information about the file name
            size, compressed size, CRC, etc.
            It includes support for STORED and DEFLATED entries.
            
            author of the original java version : Jochen Hoenicke
            </summary>
            <example> This sample shows how to read a zip file
            <code>
            using System;
            using System.Text;
            using System.IO;
            
            using NZlib.Zip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]));
            		
            		ZipEntry theEntry;
            		while ((theEntry = s.GetNextEntry()) != null) {
            			Console.WriteLine("File " + theEntry.Name);
            			int size = 2048;
            			byte[] data = new byte[2048];
            			
            			Console.Write("Show contents (y/n) ?");
            			if (Console.ReadLine() == "y") {
            				while (true) {
            					size = s.Read(data, 0, data.Length);
            					if (size > 0) {
            						Console.Write(new ASCIIEncoding().GetString(data));
            					} else {
            						break;
            					}
            				}
            			}
            			Console.WriteLine();
            		}
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="M:NZlib.Zip.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, reading a zip archive.
            </summary>
        </member>
        <member name="M:NZlib.Zip.ZipInputStream.ReadLeShort">
            <summary>
            Read an unsigned short baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="M:NZlib.Zip.ZipInputStream.ReadLeInt">
            <summary>
            Read an int baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="M:NZlib.Zip.ZipInputStream.GetNextEntry">
            <summary>
            Open the next entry from the zip archive, and return its description.
            If the previous entry wasn't closed, this method will close it.
            </summary>
        </member>
        <member name="M:NZlib.Zip.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
        </member>
        <member name="M:NZlib.Zip.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            the byte or -1 on EOF.
            </returns>
            <exception name="Exception">
            IOException if a i/o error occured.
            ZipException if the deflated stream is corrupted.
            </exception>
        </member>
        <member name="M:NZlib.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            the number of bytes read (may be smaller, even before EOF), or -1 on EOF.
            </returns>
            <exception name="Exception">
            IOException if a i/o error occured.
            ZipException if the deflated stream is corrupted.
            </exception>
        </member>
        <member name="M:NZlib.Zip.ZipInputStream.Close">
            <summary>
            Closes the zip file.
            </summary>
            <exception name="Exception">
            if a i/o error occured.
            </exception>
        </member>
        <member name="M:NZlib.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:NZlib.Compression.InflaterHuffmanTree.GetSymbol(NZlib.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:MySoft.Service.ServiceFactoryConfiguration">
            <summary>
            服务工厂
            </summary>
        </member>
        <member name="M:MySoft.Service.ServiceFactoryConfiguration.GetConfig">
            <summary>
            获取本地对象配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Service.ServiceFactoryConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptConstructor">
            <summary>
            Represents a JavaScript constructor.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>   
            Writes the JSON representation of the object.   
            </summary>   
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>   
            <param name="value">The value.</param>   
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>   
            Determines whether this instance can convert the specified value type.   
            </summary>   
            <param name="valueType">Type of the value.</param>   
            <returns>   
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.   
            </returns>   
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>   
            Reads the JSON representation of the object.   
            </summary>   
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>   
            <param name="objectType">Type of the object.</param>   
            <returns>The object value.</returns>   
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataRowConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>   
            Writes the JSON representation of the object.   
            </summary>   
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>   
            <param name="value">The value.</param>   
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataRowConverter.CanConvert(System.Type)">
            <summary>   
            Determines whether this instance can convert the specified value type.   
            </summary>   
            <param name="valueType">Type of the value.</param>   
            <returns>   
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.   
            </returns>   
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataRowConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>   
            Reads the JSON representation of the object.   
            </summary>   
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>   
            <param name="objectType">Type of the object.</param>   
            <returns>The object value.</returns>   
        </member>
    </members>
</doc>
