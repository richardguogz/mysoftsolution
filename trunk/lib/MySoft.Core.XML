<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MySoft.Core</name>
    </assembly>
    <members>
        <member name="T:MySoft.Core.IDataPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.PageSize">
            <summary>
            获取或设置页大小
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.RowCount">
            <summary>
            获取或设置记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.CurrentPageIndex">
            <summary>
            获取或设置页序数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.PageCount">
            <summary>
            获取或设置页数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.IsFirstPage">
            <summary>
             获取一个值，该值指示当前页是否是首页
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.IsLastPage">
            <summary>
            获取一个值，该值指示当前页是否是最后一页
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.CurrentRowCount">
            <summary>
            获取当前数据源的记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.CurrentStartIndex">
            <summary>
            获取开始记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.CurrentEndIndex">
            <summary>
            获取结束记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="P:MySoft.Core.IDataPage`1.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the Json format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into Json.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> that contains the Json structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The type of object to create.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="T:MySoft.Core.CompressionManager">
            <summary>
            Compress Manager
            </summary>
        </member>
        <member name="M:MySoft.Core.CompressionManager.Compress7Zip(System.String)">
            <summary>
            7Zip Compress the str.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CompressionManager.Decompress7Zip(System.String)">
            <summary>
            7Zip Decompress the str.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            Determines whether the collection is null, empty or its contents are uninitialized values.
            </summary>
            <param name="list">The list.</param>
            <returns>
            	<c>true</c> if the collection is null or empty or its contents are uninitialized values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Makes a slice of the specified list in between the start and end indexes.
            </summary>
            <param name="list">The list.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <returns>A slice of the list.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Makes a slice of the specified list in between the start and end indexes,
            getting every so many items based upon the step.
            </summary>
            <param name="list">The list.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <param name="step">The step.</param>
            <returns>A slice of the list.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.GroupBy``2(System.Collections.Generic.ICollection{``1},Newtonsoft.Json.Utilities.Func{``1,``0})">
            <summary>
            Group the collection using a function which returns the key.
            </summary>
            <param name="source">The source collection to group.</param>
            <param name="keySelector">The key selector.</param>
            <returns>A Dictionary with each key relating to a list of objects in a list grouped under it.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <!-- 对于成员“F:SevenZip.CoderPropID.PosStateBits”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:SevenZip.CoderPropID.LitContextBits”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:SevenZip.CoderPropID.LitPosBits”忽略有格式错误的 XML 注释 -->
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MultiThread">
            <summary>
            Specifies multithread mode.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:MySoft.Core.SerializationManager">
            <summary>
            The serialization manager.
            </summary>
        </member>
        <member name="M:MySoft.Core.SerializationManager.Serialize(System.Object)">
            <summary>
            Serializes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.Serialize(System.Object,System.Text.Encoding)">
            <summary>
            Serializes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified return type.
            </summary>
            <param name="returnType">Type of the return.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified return type.
            </summary>
            <param name="returnType">Type of the return.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.SerializationManager.RegisterSerializeHandler(System.Type,MySoft.Core.SerializationManager.TypeSerializeHandler,MySoft.Core.SerializationManager.TypeDeserializeHandler)">
            <summary>
            Registers the serialize handler.
            </summary>
            <param name="type">The type.</param>
            <param name="serializeHandler">The serialize handler.</param>
            <param name="deserializeHandler">The deserialize handler.</param>
        </member>
        <member name="M:MySoft.Core.SerializationManager.UnregisterSerializeHandler(System.Type)">
            <summary>
            Unregisters the serialize handler.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:MySoft.Core.SerializationManager.TypeSerializeHandler">
            <summary>
            The serialize delegate.
            </summary>
            <param name="obj">obj to be serialized.</param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Core.SerializationManager.TypeDeserializeHandler">
            <summary>
            The deserialize delegate.
            </summary>
            <param name="data">the data to be deserialied.</param>
            <returns></returns>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptObject">
            <summary>
            Represents a JavaScript object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptObject.#ctor(Newtonsoft.Json.JavaScriptObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class that
            contains values copied from the specified <see cref="T:Newtonsoft.Json.JavaScriptObject"/>.
            </summary>
            <param name="javaScriptObject">The <see cref="T:Newtonsoft.Json.JavaScriptObject"/> whose elements are copied to the new object.</param>
        </member>
        <member name="T:MySoft.Core.CacheUtils">
            <summary>
            缓存操作
            </summary>
        </member>
        <member name="M:MySoft.Core.CacheUtils.Get``1(System.String)">
            <summary>
            获取指定key的缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CacheUtils.Remove``1(System.String)">
            <summary>
            移除指定key的缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
        </member>
        <member name="M:MySoft.Core.CacheUtils.RemoveAll``1">
            <summary>
            移除所有缓存
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Core.CacheUtils.Set``1(System.String,``0)">
            <summary>
            设置缓存信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptConvert">
            <summary>
            Provides methods for converting between common language runtime types and JavaScript types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimter">The string delimiter character.</param>
            <returns>A Json string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a Json object.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A Json string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="T:MySoft.Core.Json.JsonFacade">
            <summary>
            Summary description for JsonFacade.
            </summary>
        </member>
        <member name="M:MySoft.Core.Json.JsonFacade.toJSON(System.Collections.IDictionary)">
            <summary>
            Parse a Hashtable and return a JSON formatted string
            </summary>
            <param name="idict"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.Json.JsonFacade.fromJSON(System.String)">
            <summary>
            Parse JSON formatted string and return a Hashtable
            </summary>
            <param name="sJSON"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Core.Converter.ObjectBuilder`1">
            <summary>
            对象构造器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Core.Converter.ObjectBuilder">
            <summary>
            对象构造器
            </summary>
        </member>
        <member name="T:MySoft.Core.SortProperty">
            <summary>
            排序数据属性
            </summary>
        </member>
        <member name="P:MySoft.Core.SortProperty.Asc">
            <summary>
            从小到大
            </summary>
        </member>
        <member name="P:MySoft.Core.SortProperty.Desc">
            <summary>
            从大到小
            </summary>
        </member>
        <member name="T:MySoft.Core.CustomComparer`1">
            <summary>
            自定义数据排序算法
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Core.CustomComparer`1.#ctor(MySoft.Core.SortProperty[])">
            <summary>
            初始化自定义比较类
            </summary>
            <param name="sorts"></param>
        </member>
        <member name="M:MySoft.Core.CustomComparer`1.AddProperty(MySoft.Core.SortProperty[])">
            <summary>
            添加排序属性
            </summary>
            <param name="sorts"></param>
        </member>
        <member name="M:MySoft.Core.CustomComparer`1.Compare(`0,`0)">
            <summary>
            实现Compare比较两个值的大小
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CustomComparer`1.CompareValue(`0,`0,System.Int32)">
            <summary>
            进行深层排序
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CustomComparer`1.CompareProperty(`0,`0,MySoft.Core.SortProperty)">
            <summary>
            比较两个值的大小(从小到大)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Core.EnumDescriptionAttribute">
            <summary>
            对任意类型添加文字描述
            </summary>
        </member>
        <member name="M:MySoft.Core.EnumDescriptionAttribute.GetDescription(System.Object)">
            <summary>
            获取枚举类型的描述
            </summary>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.EnumDescriptionAttribute.GetDescriptions(System.Type)">
            <summary>
            获取枚举类型的所有描述
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Core.TypeConstructor">
            <summary> 
            考虑到某些类型没有无参的构造函数，增加了描述构造信息的专门结构 
            </summary> 
        </member>
        <member name="T:MySoft.Core.ITypeMap">
            <summary> 
            管理抽象类型与实体类型的字典类型 
            </summary> 
        </member>
        <member name="M:MySoft.Core.ITypeMap.AddTypeConstructor(System.Type,MySoft.Core.TypeConstructor)">
            <summary>
            注册抽象类型需要使用的实体类型 
            该类型实体具有构造参数，实际的配置信息可以从外层机制获得。 
            </summary>
            <param name="type"></param>
            <param name="typeConstructor"></param>
        </member>
        <member name="P:MySoft.Core.ITypeMap.Item(System.Type)">
            <summary> 
            根据注册的目标抽象类型，返回一个实体类型及其构造参数数组 
            </summary> 
            <param name="type"></param> 
            <returns></returns> 
        </member>
        <member name="T:MySoft.Core.TypeMap">
            <summary> 
            管理抽象类型与实际实体类型映射关系，实际工程中应该从配置系统、参数系统获得。 
            这里为了示例方便，采用了一个纯内存字典的方式。 
            </summary> 
        </member>
        <member name="M:MySoft.Core.TypeMap.#ctor">
            <summary> 
            Singleton 
            </summary> 
        </member>
        <member name="M:MySoft.Core.TypeMap.AddTypeConstructor(System.Type,MySoft.Core.TypeConstructor)">
            <summary>
            注册抽象类型需要使用的实体类型 
            该类型实体具有构造参数，实际的配置信息可以从外层机制获得。 
            </summary>
            <param name="type"></param>
            <param name="typeConstructor"></param>
        </member>
        <member name="P:MySoft.Core.TypeMap.Item(System.Type)">
            <summary> 
            根据注册的目标抽象类型，返回一个实体类型及其构造参数数组 
            </summary> 
            <param name="type"></param> 
            <returns></returns> 
        </member>
        <member name="T:MySoft.Core.Assembler`1">
            <summary>
            提供注入的实现类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:MySoft.Core.Assembler`1.map">
            <summary> 
            其实TypeMap工程上本身就是个需要注入的类型，可以通过访问配置系统获得， 
            这里为了示例的方便，手工配置了一些类型映射信息。 
            </summary> 
        </member>
        <member name="M:MySoft.Core.Assembler`1.Create">
            <summary>
            创建一个实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptConstructor">
            <summary>
            Represents a JavaScript constructor.
            </summary>
        </member>
        <member name="T:MySoft.Core.LogHandler">
            <summary>
            A delegate used for log.
            </summary>
            <param name="logMsg">The msg to write to log.</param>
        </member>
        <member name="T:MySoft.Core.ILogable">
            <summary>
            Mark a implementing class as loggable.
            </summary>
        </member>
        <member name="E:MySoft.Core.ILogable.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="T:MySoft.Core.FastInvokeHandler">
            <summary>Delegate for calling a method that is not known at runtime.</summary>
            <param name="target">the object to be called or null if the call is to a static method.</param>
            <param name="paramters">the parameters to the method.</param>
            <returns>the return value for the method or null if it doesn't return anything.</returns>
        </member>
        <member name="T:MySoft.Core.FastCreateInstanceHandler">
            <summary>Delegate for creating and object at runtime using the default constructor.</summary>
            <returns>the newly created object.</returns>
        </member>
        <member name="T:MySoft.Core.FastPropertyGetHandler">
            <summary>Delegate to get an arbitraty property at runtime.</summary>
            <param name="target">the object instance whose property will be obtained.</param>
            <returns>the property value.</returns>
        </member>
        <member name="T:MySoft.Core.FastPropertySetHandler">
            <summary>Delegate to set an arbitrary property at runtime.</summary>
            <param name="target">the object instance whose property will be modified.</param>
            <param name="parameter"></param>
        </member>
        <member name="T:MySoft.Core.DynamicCalls">
            <summary>Class with helper methods for dynamic invocation generating IL on the fly.</summary>
        </member>
        <member name="F:MySoft.Core.DynamicCalls.dictInvoker">
            <summary>
            用于存放GetMethodInvoker的Dictionary
            </summary>
        </member>
        <member name="F:MySoft.Core.DynamicCalls.dictCreator">
            <summary>
            用于存放GetInstanceCreator的Dictionary
            </summary>
        </member>
        <member name="M:MySoft.Core.DynamicCalls.GetInstanceCreator(System.Type)">
            <summary>Gets the instance creator delegate that can be use to create instances of the specified type.</summary>
            <param name="type">The type of the objects we want to create.</param>
            <returns>A delegate that can be used to create the objects.</returns>
        </member>
        <member name="F:MySoft.Core.DynamicCalls.dictGetter">
            <summary>
            用于存放GetPropertyGetter的Dictionary
            </summary>
        </member>
        <member name="F:MySoft.Core.DynamicCalls.dictSetter">
            <summary>
            用于存放SetPropertySetter的Dictionary
            </summary>
        </member>
        <member name="M:MySoft.Core.DynamicCalls.EmitCastToReference(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Emits the cast to a reference, unboxing if needed.</summary>
            <param name="il">The MSIL generator.</param>
            <param name="type">The type to cast.</param>
        </member>
        <member name="M:MySoft.Core.DynamicCalls.EmitBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Boxes a type if needed.</summary>
            <param name="ilGenerator">The MSIL generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:MySoft.Core.DynamicCalls.EmitFastInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>Emits code to save an integer to the evaluation stack.</summary>
            <param name="ilGeneartor">The MSIL generator.</param>
            <param name="value">The value to push.</param>
        </member>
        <member name="T:MySoft.Core.MySoftException">
            <summary>
            MySoft异常类
            </summary>
        </member>
        <member name="T:MySoft.Core.Json.JSONUtils">
            <summary>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
             Ported to C# by Are Bjolseth, teleplan.no
            </summary>
        </member>
        <member name="M:MySoft.Core.Json.JSONUtils.Enquote(System.String)">
            <summary>
            Produce a string in double quotes with backslash sequences in all the right places.
            </summary>
            <param name="s">A String</param>
            <returns>A String correctly formatted for insertion in a JSON message.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:MySoft.Core.Encrypt.DESEncrypt">
            <summary> 
            DESEncrypt加密
            </summary> 
        </member>
        <member name="M:MySoft.Core.Encrypt.DESEncrypt.Encode(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串,失败返回源串</returns>
        </member>
        <member name="M:MySoft.Core.Encrypt.DESEncrypt.Decode(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="T:MySoft.Core.Encrypt.AESEncrypt">
            <summary> 
            AESEncrypt加密
            </summary> 
        </member>
        <member name="M:MySoft.Core.Encrypt.AESEncrypt.Encode(System.String,System.String)">
            <summary>
            AES加密字符串
            </summary>
            <param name="encryptString"></param>
            <param name="encryptKey"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.Encrypt.AESEncrypt.Decode(System.String,System.String)">
            <summary>
            AES解密字符串
            </summary>
            <param name="decryptString"></param>
            <param name="decryptKey"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Core.DataPage">
            <summary>
            分页数据信息
            </summary>
        </member>
        <member name="M:MySoft.Core.DataPage.#ctor">
            <summary>
            初始化DataPage
            </summary>
        </member>
        <member name="M:MySoft.Core.DataPage.#ctor(System.Int32)">
            <summary>
            设置默认页大小
            </summary>
            <param name="pageSize"></param>
        </member>
        <member name="P:MySoft.Core.DataPage.CurrentPageIndex">
            <summary>
            获取或设置页序数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.PageSize">
            <summary>
            获取或设置页大小
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.RowCount">
            <summary>
            获取或设置记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.PageCount">
            <summary>
            获取或设置页数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.IsFirstPage">
            <summary>
             获取一个值，该值指示当前页是否是首页
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.IsLastPage">
            <summary>
            获取一个值，该值指示当前页是否是最后一页
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.CurrentRowCount">
            <summary>
            获取当前数据源的记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.CurrentStartIndex">
            <summary>
            获取开始记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.CurrentEndIndex">
            <summary>
            获取结束记录数
            </summary>
        </member>
        <member name="P:MySoft.Core.DataPage.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="T:MySoft.Core.DataPage`1">
            <summary>
            分页数据信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Core.DataPage`1.#ctor">
            <summary>
            初始化DataPage
            </summary>
        </member>
        <member name="M:MySoft.Core.DataPage`1.#ctor(System.Int32)">
            <summary>
            设置默认页大小
            </summary>
            <param name="pageSize"></param>
        </member>
        <member name="P:MySoft.Core.DataPage`1.DataSource">
            <summary>
            获取或设置当前页的数据源
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetListItemType(System.Type)">
            <summary>
            Gets the type of the typed list's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed list's items.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.ItemsUnitializedValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Tests whether the list's items are their unitialized value.
            </summary>
            <param name="list">The list.</param>
            <returns>Whether the list's items are their unitialized value</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptArray">
            <summary>
            Represents a JavaScript array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptArray"/> class that
            contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new array.</param>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptArray"/> class that
            is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new array can initially store.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
        </member>
        <member name="T:MySoft.Core.Json.JSONTokener">
            <summary>
            <para>
             A JSONTokener takes a source string and extracts characters and tokens from
             it. It is used by the JSONObject and JSONArray constructors to parse
             JSON source strings.
             </para>
             <para>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
             </para>
             <para>Ported to C# by Are Bjolseth, teleplan.no</para>
             <para>
             <list type="bullet">
             <item><description>Implement Custom exceptions</description></item>
             <item><description>Add unit testing</description></item>
             <item><description>Add log4net</description></item>
             </list>
             </para>
            </summary>
        </member>
        <member name="F:MySoft.Core.Json.JSONTokener.myIndex">
            <summary>The index of the next character.</summary>
        </member>
        <member name="F:MySoft.Core.Json.JSONTokener.mySource">
            <summary>The source string being tokenized.</summary>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.#ctor(System.String)">
            <summary>
            Construct a JSONTokener from a string.
            </summary>
            <param name="s">A source string.</param>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.back">
            <summary>
            Back up one character. This provides a sort of lookahead capability,
            so that you can test for a digit or letter before attempting to parse
            the next number or identifier.
            </summary>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.dehexchar(System.Char)">
            <summary>
            Get the hex value of a character (base16).
            </summary>
            <param name="c">
            A character between '0' and '9' or between 'A' and 'F' or
            between 'a' and 'f'.
            </param>
            <returns>An int between 0 and 15, or -1 if c was not a hex digit.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.more">
            <summary>
            Determine if the source string still contains characters that next() can consume.
            </summary>
            <returns>true if not yet at the end of the source.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.next">
            <summary>
            Get the next character in the source string.
            </summary>
            <returns>The next character, or 0 if past the end of the source string.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.next(System.Char)">
            <summary>
            Consume the next character, and check that it matches a specified character
            </summary>
            <param name="c">The character to match.</param>
            <returns>The character.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.next(System.Int32)">
            <summary>
            Get the next n characters.
            </summary>
            <param name="n">The number of characters to take.</param>
            <returns>A string of n characters.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.nextClean">
            <summary>
            Get the next char in the string, skipping whitespace
            and comments (slashslash and slashstar).
            </summary>
            <returns>A character, or 0 if there are no more characters.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.nextString(System.Char)">
            <summary>
            Return the characters up to the next close quote character.
            Backslash processing is done. The formal JSON format does not
            allow strings in single quotes, but an implementation is allowed to
            accept them.
            </summary>
            <param name="quote">The quoting character, either " or '</param>
            <returns>A String.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.nextTo(System.Char)">
            <summary>
            Get the text up but not including the specified character or the
            end of line, whichever comes first.
            </summary>
            <param name="d">A delimiter character.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.nextTo(System.String)">
            <summary>
             Get the text up but not including one of the specified delimeter
             characters or the end of line, which ever comes first.
            </summary>
            <param name="delimiters">A set of delimiter characters.</param>
            <returns>A string, trimmed.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.nextObject">
            <summary>
            Get the next value as object. The value can be a Boolean, Double, Integer,
            JSONArray, JSONObject, or String, or the JSONObject.NULL object.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.skipTo(System.Char)">
            <summary>
            Skip characters until the next character is the requested character.
            If the requested character is not found, no characters are skipped.
            </summary>
            <param name="to">A character to skip to.</param>
            <returns>
            The requested character, or zero if the requested character is not found.
            </returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.skipPast(System.String)">
            <summary>
            Skip characters until past the requested string.
            If it is not found, we are left at the end of the source.
            </summary>
            <param name="to">A string to skip past.</param>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.ToString">
            <summary>
            Make a printable string of this JSONTokener.
            </summary>
            <returns>" at character [myIndex] of [mySource]"</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.unescape">
            <summary>
            Unescape the source text. Convert %hh sequences to single characters,
            and convert plus to space. There are Web transport systems that insist on
            doing unnecessary URL encoding. This provides a way to undo it.
            </summary>
        </member>
        <member name="M:MySoft.Core.Json.JSONTokener.unescape(System.String)">
            <summary>
            Convert %hh sequences to single characters, and convert plus to space.
            </summary>
            <param name="s">A string that may contain plus and %hh sequences.</param>
            <returns>The unescaped string.</returns>
        </member>
        <member name="T:MySoft.Core.Json.JSONArray">
             <summary>
             <para>
             A JSONArray is an ordered sequence of values. Its external form is a string
             wrapped in square brackets with commas between the values. The internal form
             is an object having get() and opt() methods for accessing the values by
             index, and put() methods for adding or replacing values. The values can be
             any of these types: Boolean, JSONArray, JSONObject, Number, String, or the
             JSONObject.NULL object.
             </para>
             <para>
             The constructor can convert a JSON external form string into an
             internal form Java object. The toString() method creates an external
             form string.
             </para>
             <para>
             A get() method returns a value if one can be found, and throws an exception
             if one cannot be found. An opt() method returns a default value instead of
             throwing an exception, and so is useful for obtaining optional values.
             </para>
             <para>
             The generic get() and opt() methods return an object which you can cast or
             query for type. There are also typed get() and opt() methods that do typing
             checking and type coersion for you.
            </para>
             <para>
             The texts produced by the toString() methods are very strict.
             The constructors are more forgiving in the texts they will accept.
             </para>
             <para>
             <list type="bullet">
             <item><description>An extra comma may appear just before the closing bracket.</description></item>
             <item><description>Strings may be quoted with single quotes.</description></item>
             <item><description>Strings do not need to be quoted at all if they do not contain leading
                 or trailing spaces, and if they do not contain any of these characters:
                 { } [ ] / \ : , </description></item>
             <item><description>Numbers may have the 0- (octal) or 0x- (hex) prefix.</description></item>
             </list>
             </para>
             <para>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
            </para>
             Ported to C# by Are Bjolseth, teleplan.no
             TODO:
             1. Implement Custom exceptions
             2. Add indexer JSONObject[i] = object,     and object = JSONObject[i];
             3. Add indexer JSONObject["DEFAULT_KEY"] = object, and object = JSONObject["DEFAULT_KEY"]
             4. Add unit testing
             5. Add log4net
             6. Make get/put methods private, to force use of indexer instead?
             </summary>
        </member>
        <member name="F:MySoft.Core.Json.JSONArray.myArrayList">
            <summary>The ArrayList where the JSONArray's properties are kept.</summary>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.#ctor">
            <summary>
            Construct an empty JSONArray
            </summary>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.#ctor(MySoft.Core.Json.JSONTokener)">
            <summary>
            Construct a JSONArray from a JSONTokener.
            </summary>
            <param name="x">A JSONTokener</param>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.#ctor(System.String)">
            <summary>
            Construct a JSONArray from a source string.
            </summary>
            <param name="s">A string that begins with '[' and ends with ']'.</param>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.#ctor(System.Collections.ICollection)">
            <summary>
            Construct a JSONArray from a Collection.
            </summary>
            <param name="collection">A Collection.</param>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.getValue(System.Int32)">
            <summary>
            Get the object value associated with an index.
            Use indexer instead!!! Added to be true to the original Java implementation
            </summary>
            <param name="i">index subscript. The index must be between 0 and length()-1</param>
            <returns>An object value.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.getArrayList">
            <summary>
            Get the ArrayList which is holding the elements of the JSONArray.
            Use the indexer instead!! Added to be true to the orignal Java src
            </summary>
            <returns>The ArrayList</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.getJSONArray(System.Int32)">
            <summary>
            Get the JSONArray associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONArray value</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.getJSONObject(System.Int32)">
            <summary>
            Get the JSONObject associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONObject value</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.getString(System.Int32)">
            <summary>
            Get the string associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A string value.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.isNull(System.Int32)">
            <summary>
            Determine if the value is null.
            </summary>
            <param name="i">index subscript</param>
            <returns>true if the value at the index is null, or if there is no value.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.join(System.String)">
            <summary>
            Make a string from the contents of this JSONArray. The separator string
            is inserted between each element.
            Warning: This method assumes that the data structure is acyclical.
            </summary>
            <param name="separator">separator A string that will be inserted between the elements.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.Length">
            <summary>
            Get the length of the JSONArray.
            Added to be true to the original Java implementation
            </summary>
            <returns>Number of JSONObjects in array</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.opt(System.Int32)">
            <summary>
            Get the optional object value associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>object at that index.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.optBoolean(System.Int32)">
            <summary>
            Get the optional boolean value associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>The truth</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.optBoolean(System.Int32,System.Boolean)">
            <summary>
            Get the optional boolean value associated with an index.
            It returns the defaultValue if there is no value at that index or if it is not
            a Boolean or the String "true" or "false".
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue"></param>
            <returns>The truth.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.optDouble(System.Int32)">
            <summary>
            Get the optional double value associated with an index.
            NaN is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <returns>The double value object</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.optDouble(System.Int32,System.Double)">
            <summary>
            Get the optional double value associated with an index.
            NaN is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue"></param>
            <returns>The double value object</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.optInt(System.Int32)">
            <summary>
            Get the optional int value associated with an index.
            Zero is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <returns>The int value object</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.optInt(System.Int32,System.Int32)">
            <summary>
            Get the optional int value associated with an index.
            The defaultValue is returned if the index is not found,
            or if the value is not a number and cannot be converted to a number.
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue">The default value</param>
            <returns>The int value object</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.optJSONArray(System.Int32)">
            <summary>
            Get the optional JSONArray associated with an index.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONArray value, or null if the index has no value, or if the value is not a JSONArray.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.optJSONObject(System.Int32)">
            <summary>
            Get the optional JSONObject associated with an index.
            Null is returned if the DEFAULT_KEY is not found, or null if the index has
            no value, or if the value is not a JSONObject.
            </summary>
            <param name="i">index subscript</param>
            <returns>A JSONObject value</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.optString(System.Int32)">
            <summary>
            Get the optional string value associated with an index. It returns an
            empty string if there is no value at that index. If the value
            is not a string and is not null, then it is coverted to a string.
            </summary>
            <param name="i">index subscript</param>
            <returns>A String value</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.optString(System.Int32,System.String)">
            <summary>
            Get the optional string associated with an index.
            The defaultValue is returned if the DEFAULT_KEY is not found.
            </summary>
            <param name="i">index subscript</param>
            <param name="defaultValue">The default value</param>
            <returns>A string value</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.put(System.Object)">
            OMITTED:
            public JSONArray put(bool val)
            public JSONArray put(double val)
            public JSONArray put(int val)		
            <summary>
            Append an object value.
            </summary>
            <param name="val">An object value.  The value should be a Boolean, Double, Integer, JSONArray, JSObject, or String, or the JSONObject.NULL object</param>
            <returns>this (JSONArray)</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.put(System.Int32,System.Object)">
            <summary>
            Put or replace a boolean value in the JSONArray.
            </summary>
            <param name="i">
            The subscript. If the index is greater than the length of
            the JSONArray, then null elements will be added as necessary to pad it out.
            </param>
            <param name="val">An object value.</param>
            <returns>this (JSONArray)</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.toJSONObject(MySoft.Core.Json.JSONArray)">
            <summary>
            Produce a JSONObject by combining a JSONArray of pks with the values
            of this JSONArray.
            </summary>
            <param name="pks">
            A JSONArray containing a list of DEFAULT_KEY strings. These will be paired with the values.
            </param>
            <returns>A JSONObject, or null if there are no pks or if this JSONArray</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONArray.ToString">
            <summary>
            Make an JSON external form string of this JSONArray. For compactness, no
            unnecessary whitespace is added.
            </summary>
            <returns>a printable, displayable, transmittable representation of the array.</returns>
        </member>
        <member name="P:MySoft.Core.Json.JSONArray.Item(System.Int32)">
            <summary>
            Alternate to Java get/put method, by using indexer
            </summary>
        </member>
        <member name="P:MySoft.Core.Json.JSONArray.List">
            <summary>
            Alternativ to Java, getArrayList, by using propery
            </summary>
        </member>
        <member name="P:MySoft.Core.Json.JSONArray.Count">
            <summary>
            Get the length of the JSONArray.
            Using a propery instead of method
            </summary>
        </member>
        <member name="T:MySoft.Core.CoreUtils">
            <summary>
            常用方法
            </summary>
        </member>
        <member name="M:MySoft.Core.CoreUtils.CloneObject(System.Object)">
            <summary>
            克隆一个对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.CloneObject``1(``0)">
            <summary>
            克隆一个Object对象
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.CreateInstance``1">
            <summary>
            快速创建一个T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.GetFastInstanceCreator(System.Type)">
            <summary>
            创建一个委托
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.GetFastMethodInvoke(System.Reflection.MethodInfo)">
            <summary>
            快速调用方法
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            快速设置属性值
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Core.CoreUtils.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            快速设置属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Core.CoreUtils.GetPropertyValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            快速获取属性值
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.GetPropertyValue(System.Object,System.String)">
            <summary>
            快速获取属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.ConvertValue``1(System.Object)">
            <summary>
            转换数据类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.ConvertValue(System.Type,System.Object)">
            <summary>
            转换数据类型
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.GetPropertyAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.GetTypeAttribute``1(System.Type)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.ConvertTo``1(System.String,``0)">
            <summary>
            将value转换成对应的类型值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.Serialize(System.Object)">
            <summary>
            将对象系列化成字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.Deserialize(System.String,System.Type)">
            <summary>
            将字符串反系列化成对象
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="JSONString"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.Deserialize``1(System.String)">
            <summary>
            将字符串反系列化成对象
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="JSONString"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.MakeUniqueKey(System.Int32,System.String)">
            <summary>
            Makes a unique key.
            </summary>
            <param name="length">The length.</param>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.CheckStruct(System.Type)">
            <summary>
            检测是否为结构数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.ChangeType(System.Object,System.Type)">
            <summary>
            转换类型
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.CoreUtils.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            获取指定长度的字符串，按字节长度
            </summary>
            <param name="p_SrcString"></param>
            <param name="p_Length"></param>
            <param name="p_TailString"></param>
            <returns></returns>
        </member>
        <member name="T:Newtonsoft.Json.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonWriter.Indentation"/> and <see cref="P:Newtonsoft.Json.JsonWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current Json object or array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JavaScript manually.
            </summary>
            <param name="javaScript">The raw JavaScript to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Indicates how the output is formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <paramref name="Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <paramref name="Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next Json token from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current Json token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current Json token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.ContainsWhiteSpace(System.String)">
            <summary>
            Determines whether the string contains white space.
            </summary>
            <param name="s">The string to test for white space.</param>
            <returns>
            	<c>true</c> if the string contains white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.EnsureEndsWith(System.String,System.String)">
            <summary>
            Ensures the target string ends with the specified string.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <returns>The target string with the value string at the end.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsNullOrEmpty(System.Data.SqlTypes.SqlString)">
            <summary>
            Determines whether the SqlString is null or empty.
            </summary>
            <param name="s">The string.</param>
            <returns>
            	<c>true</c> if the SqlString is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IfNotNullOrEmpty(System.String,System.Action{System.String})">
            <summary>
            Perform an action if the string is not null or empty.
            </summary>
            <param name="value">The value.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32)">
            <summary>
            Indents the specified string.
            </summary>
            <param name="s">The string to indent.</param>
            <param name="indentation">The number of characters to indent by.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32,System.Char)">
            <summary>
            Indents the specified string.
            </summary>
            <param name="s">The string to indent.</param>
            <param name="indentation">The number of characters to indent by.</param>
            <param name="indentChar">The indent character.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.NumberLines(System.String)">
            <summary>
            Numbers the lines.
            </summary>
            <param name="s">The string to number.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of Json token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader"/> if a <see cref="M:Newtonsoft.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An interger.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Constructor">
            <summary>
            A JavaScript object constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="T:MySoft.Core.Json.JSONObject">
             <summary>
             <para>
             A JSONArray is an ordered sequence of values. Its external form is a string
             wrapped in square brackets with commas between the values. The internal form
             is an object having get() and opt() methods for accessing the values by
             index, and put() methods for adding or replacing values. The values can be
             any of these types: Boolean, JSONArray, JSONObject, Number, String, or the
             JSONObject.NULL object.
             </para>
             <para>
             The constructor can convert a JSON external form string into an
             internal form Java object. The toString() method creates an external
             form string.
             </para>
             <para>
             A get() method returns a value if one can be found, and throws an exception
             if one cannot be found. An opt() method returns a default value instead of
             throwing an exception, and so is useful for obtaining optional values.
             </para>
             <para>
             The generic get() and opt() methods return an object which you can cast or
             query for type. There are also typed get() and opt() methods that do typing
             checking and type coersion for you.
            </para>
             <para>
             The texts produced by the toString() methods are very strict.
             The constructors are more forgiving in the texts they will accept.
             </para>
             <para>
             <list type="bullet">
             <item><description>An extra comma may appear just before the closing bracket.</description></item>
             <item><description>Strings may be quoted with single quotes.</description></item>
             <item><description>Strings do not need to be quoted at all if they do not contain leading
                 or trailing spaces, and if they do not contain any of these characters:
                 { } [ ] / \ : , </description></item>
             <item><description>Numbers may have the 0- (octal) or 0x- (hex) prefix.</description></item>
             </list>
             </para>
             <para>
             Public Domain 2002 JSON.org
             @author JSON.org
             @version 0.1
            </para>
             Ported to C# by Are Bjolseth, teleplan.no
             TODO:
             1. Implement Custom exceptions
             2. Add indexer JSONObject[i] = object,     and object = JSONObject[i];
             3. Add indexer JSONObject["key"] = object, and object = JSONObject["key"]
             4. Add unit testing
             5. Add log4net
             6. Make get/put methods private, to force use of indexer instead?
             </summary>
        </member>
        <member name="F:MySoft.Core.Json.JSONObject.myHashMap">
            <summary>The hash map where the JSONObject's properties are kept.</summary>
        </member>
        <member name="F:MySoft.Core.Json.JSONObject.myKeyIndexList">
            <summary>A shadow list of keys to enable access by sequence of insertion</summary>
        </member>
        <member name="F:MySoft.Core.Json.JSONObject.NULL">
            <summary>
            It is sometimes more convenient and less ambiguous to have a NULL
            object than to use C#'s null value.
            JSONObject.NULL.toString() returns "null".
            </summary>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.#ctor">
            <summary>
             Construct an empty JSONObject.
            </summary>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.#ctor(MySoft.Core.Json.JSONTokener)">
            <summary>
            Construct a JSONObject from a JSONTokener.
            </summary>
            <param name="x">A JSONTokener object containing the source string.</param>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.#ctor(System.String)">
            <summary>
            Construct a JSONObject from a string.
            </summary>
            <param name="sJSON">A string beginning with '{' and ending with '}'.</param>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.#ctor(System.Collections.IDictionary)">
            <summary>
            Construct a JSONObject from a IDictionary
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.accumulate(System.String,System.Object)">
            <summary>
            Accumulate values under a key. It is similar to the put method except
            that if there is already an object stored under the key then a
            JSONArray is stored under the key to hold all of the accumulated values.
            If there is already a JSONArray, then the new value is appended to it.
            In contrast, the put method replaces the previous value.
            </summary>
            <param name="key">A key string.</param>
            <param name="val">An object to be accumulated under the key.</param>
            <returns>this</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.getDictionary">
            <summary>
            C# convenience method
            </summary>
            <returns>The Hashtable</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.getValue(System.String)">
            <summary>
            Alias to Java get method
            Get the value object associated with a key.
            </summary>
            <param name="key">A key string.</param>
            <returns>The object associated with the key.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.getJSONArray(System.String)">
            <summary>
            Get the JSONArray value associated with a key.
            </summary>
            <param name="key">A key string</param>
            <returns>A JSONArray which is the value</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.getJSONObject(System.String)">
            <summary>
            Get the JSONObject value associated with a key.
            </summary>
            <param name="key">A key string.</param>
            <returns>A JSONObject which is the value.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.getString(System.String)">
            <summary>
            Get the string associated with a key.
            </summary>
            <param name="key">A key string.</param>
            <returns>A string which is the value.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.has(System.String)">
            <summary>
            Determine if the JSONObject contains a specific key.
            </summary>
            <param name="key">A key string.</param>
            <returns>true if the key exists in the JSONObject.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.keys">
            <summary>
            Get an enumeration of the keys of the JSONObject.
            Added to be true to orginal Java implementation
            Indexers are easier to use
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.isNull(System.String)">
            <summary>
            Determine if the value associated with the key is null or if there is no value.
            </summary>
            <param name="key">A key string</param>
            <returns>true if there is no value associated with the key or if the valus is the JSONObject.NULL object</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.Length">
            <summary>
            Get the number of keys stored in the JSONObject.
            </summary>
            <returns>The number of keys in the JSONObject.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.names">
            <summary>
            Produce a JSONArray containing the pks of the elements of this JSONObject
            </summary>
            <returns>A JSONArray containing the key strings, or null if the JSONObject</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.opt(System.String)">
            <summary>
            Get an optional value associated with a key.
            </summary>
            <param name="key">A key string</param>
            <returns>An object which is the value, or null if there is no value.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.optBoolean(System.String)">
            <summary>
            Get an optional value associated with a key.
            It returns false if there is no such key, or if the value is not
            Boolean.TRUE or the String "true".
            </summary>
            <param name="key">A key string.</param>
            <returns>bool value object</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.optBoolean(System.String,System.Boolean)">
            <summary>
            Get an optional value associated with a key.
            It returns false if there is no such key, or if the value is not
            Boolean.TRUE or the String "true".
            </summary>
            <param name="key">A key string.</param>
            <param name="defaultValue">The preferred return value if conversion fails</param>
            <returns>bool value object</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.optDouble(System.String)">
            <summary>
            Get an optional double associated with a key,
            or NaN if there is no such key or if its value is not a number.
            If the value is a string, an attempt will be made to evaluate it as
            a number.
            </summary>
            <param name="key">A string which is the key.</param>
            <returns>A double value object</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.optDouble(System.String,System.Double)">
            <summary>
            Get an optional double associated with a key,
            or NaN if there is no such key or if its value is not a number.
            If the value is a string, an attempt will be made to evaluate it as
            a number.
            </summary>
            <param name="key">A string which is the key.</param>
            <param name="defaultValue">The default</param>
            <returns>A double value object</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.optInt(System.String)">
            <summary>
             Get an optional double associated with a key, or the
             defaultValue if there is no such key or if its value is not a number.
             If the value is a string, an attempt will be made to evaluate it as
             number.
            </summary>
            <param name="key">A key string.</param>
            <returns>An int object value</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.optInt(System.String,System.Int32)">
            <summary>
             Get an optional double associated with a key, or the
             defaultValue if there is no such key or if its value is not a number.
             If the value is a string, an attempt will be made to evaluate it as
             number.
            </summary>
            <param name="key">A key string.</param>
            <param name="defaultValue">The default value</param>
            <returns>An int object value</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.optJSONArray(System.String)">
            <summary>
            Get an optional JSONArray associated with a key.
            It returns null if there is no such key, or if its value is not a JSONArray
            </summary>
            <param name="key">A key string</param>
            <returns>A JSONArray which is the value</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.optJSONObject(System.String)">
            <summary>
            Get an optional JSONObject associated with a key.
            It returns null if there is no such key, or if its value is not a JSONObject.
            </summary>
            <param name="key">A key string.</param>
            <returns>A JSONObject which is the value</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.optString(System.String)">
            <summary>
            Get an optional string associated with a key.
            It returns an empty string if there is no such key. If the value is not
            a string and is not null, then it is coverted to a string.
            </summary>
            <param name="key">A key string.</param>
            <returns>A string which is the value.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.optString(System.String,System.String)">
            <summary>
            Get an optional string associated with a key.
            It returns the defaultValue if there is no such key.
            </summary>
            <param name="key">A key string.</param>
            <param name="defaultValue">The default</param>
            <returns>A string which is the value.</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.put(System.String,System.Object)">
            <summary>
            Put a key/value pair in the JSONObject. If the value is null,
            then the key will be removed from the JSONObject if it is present.
            </summary>
            <param name="key"> A key string.</param>
            <param name="val">
            An object which is the value. It should be of one of these
            types: Boolean, Double, Integer, JSONArray, JSONObject, String, or the
            JSONObject.NULL object.
            </param>
            <returns>JSONObject</returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.putOpt(System.String,System.Object)">
            <summary>
            Add a key value pair
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.remove(System.String)">
            <summary>
            Remove a object assosiateted with the given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.toJSONArray(MySoft.Core.Json.JSONArray)">
            <summary>
            Append an array of JSONObjects to current object
            </summary>
            <param name="pks"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.ToString">
            <summary>
            Overridden to return a JSON formattet object as a string
            </summary>
            <returns>JSON object as formatted string</returns>
        </member>
        <member name="P:MySoft.Core.Json.JSONObject.Item(System.Int32)">
            <summary>
            Return the key for the associated index
            </summary>
        </member>
        <member name="P:MySoft.Core.Json.JSONObject.Item(System.String)">
            <summary>
            Get/Add an object with the associated key
            </summary>
        </member>
        <member name="P:MySoft.Core.Json.JSONObject.Count">
            <summary>
            Return the number of JSON items in hashtable
            </summary>
        </member>
        <member name="T:MySoft.Core.Json.JSONObject.JSONNull">
            <summary>
            Make a Null object
            JSONObject.NULL is equivalent to the value that JavaScript calls null,
            whilst C#'s null is equivalent to the value that JavaScript calls undefined.
            </summary>
        </member>
        <member name="M:MySoft.Core.Json.JSONObject.JSONNull.ToString">
            <summary>
            Overriden to return "null"
            </summary>
            <returns>null</returns>
        </member>
    </members>
</doc>
