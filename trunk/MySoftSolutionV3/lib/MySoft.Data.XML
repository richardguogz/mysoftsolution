<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MySoft.Data</name>
    </assembly>
    <members>
        <member name="T:MySoft.Data.IEntityInfo">
            <summary>
            实体相关信息
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.Table">
            <summary>
            表信息
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.Fields">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.FieldValues">
            <summary>
            字段及值信息
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.UpdateFields">
            <summary>
            更新字段
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.UpdateFieldValues">
            <summary>
            更新字段及值信息
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.IsUpdate">
            <summary>
            是否修改
            </summary>
        </member>
        <member name="P:MySoft.Data.IEntityInfo.IsReadOnly">
            <summary>
            是否只读 (只读时为视图或自定义实例)
            </summary>
        </member>
        <member name="T:MySoft.Data.IEntityBase">
            <summary>
            实体基类接口
            </summary>
        </member>
        <member name="M:MySoft.Data.IEntityBase.As``1">
            <summary>
            转换成另一对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.ToRowReader">
            <summary>
            返回一个行阅读对象
            </summary>
        </member>
        <member name="M:MySoft.Data.IEntityBase.ToDictionary">
            <summary>
            返回字典对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.CloneObject">
            <summary>
            克隆一个对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.GetObjectState">
            <summary>
            获取对象状态
            </summary>
        </member>
        <member name="M:MySoft.Data.IEntityBase.GetValue(System.String)">
            <summary>
            使用propertyName获取值信息
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.SetValue(System.String,System.Object)">
            <summary>
            使用propertyName获设置信息
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.GetValue(MySoft.Data.Field)">
            <summary>
            使用field获取值信息
            </summary>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.SetValue(MySoft.Data.Field,System.Object)">
            <summary>
            使用field获设置信息
            </summary>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IEntityBase.GetField(System.String)">
            <summary>
            通过属性获取字段
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.Design.IEntity">
            <summary>
            实体接口
            </summary>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.Attach(MySoft.Data.Field[])">
            <summary>
            置为修改状态并移除字段
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.AttachSet(MySoft.Data.Field[])">
            <summary>
            置为修改状态并设置字段
            </summary>
            <param name="setFields"></param>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.AttachAll(MySoft.Data.Field[])">
            <summary>
            置为修改状态并移除字段
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.Detach(MySoft.Data.Field[])">
            <summary>
            置为插入状态并移除字段
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.DetachSet(MySoft.Data.Field[])">
            <summary>
            置为插入状态并设置字段
            </summary>
            <param name="setFields"></param>
        </member>
        <member name="M:MySoft.Data.Design.IEntity.DetachAll(MySoft.Data.Field[])">
            <summary>
            置为插入状态并移除字段
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="T:MySoft.Data.MsAccess.MsAccessProvider">
            <summary>
            Access 驱动
            </summary>
        </member>
        <member name="M:MySoft.Data.IDbProvider.AddParameter(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            给命令添加参数
            </summary>
            <param name="cmd"></param>
            <param name="plist"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProvider.AddParameter(System.Data.Common.DbCommand,MySoft.Data.SQLParameter[])">
            <summary>
            给命令添加参数
            </summary>
            <param name="cmd"></param>
            <param name="plist"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProvider.CreateConnection">
            <summary>
            创建DbConnection
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProvider.CreateParameter">
            <summary>
            创建参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddParameter(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            给命令添加参数
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddParameter(System.Data.Common.DbCommand,MySoft.Data.SQLParameter[])">
            <summary>
            给命令添加参数
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddInputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            添加输入参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddInputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            添加输入参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddOutputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            添加输出参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddOutputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType)">
            <summary>
            添加输出参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddInputOutputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            添加输入输出参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddInputOutputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            添加输入输出参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddReturnValueParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            添加返回参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.AddReturnValueParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType)">
            <summary>
            添加返回参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.PrepareCommand(System.Data.Common.DbCommand)">
            <summary>
            调整DbCommand命令
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateConnection">
            <summary>
            创建DbConnection
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateParameter">
            <summary>
            创建参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.FormatCommandText(System.String)">
            <summary>
            返回最终排序的SQL
            </summary>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateSqlCommand(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            创建SQL命令
            </summary>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateProcCommand(System.String)">
            <summary>
            创建存储过程命令
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.BeginExcuteCommand(System.Data.Common.DbCommand)">
            <summary>
            Writes the log.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:MySoft.Data.DbProvider.EndExcuteCommand(System.Data.Common.DbCommand,System.Object,System.Int32)">
            <summary>
            结束时执行的操作
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.WriteErrorCommand(System.Exception,System.Data.Common.DbCommand)">
            <summary>
            Writes the exception log.
            </summary>
            <param name="ex"></param>
            <param name="command"></param>
        </member>
        <member name="M:MySoft.Data.DbProvider.GetLog(System.Data.Common.DbCommand)">
            <summary>
            获取输出的日志
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.GetAutoIncrement(System.String)">
            <summary>
            获取IdentityName
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreatePageQuery``1(MySoft.Data.QuerySection{``0},System.Int32,System.Int32)">
            <summary>
            创建分页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="itemCount"></param>
            <param name="skipCount"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.GetParameterType(System.Data.Common.DbParameter)">
            <summary>
            获取参数类型
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateParameter(System.String,System.Object)">
            <summary>
            创建DbParameter
            </summary>
            <param name="parameterName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.PrepareParameter(System.Data.Common.DbCommand)">
            <summary>
            调整DbCommand参数
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CreateOrmParameter(System.Object)">
            <summary>
            创建OrmParameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbProvider.CheckValue(System.Object)">
            <summary>
            检测是否为非法值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.DbProvider.Logger">
            <summary>
            日志依赖
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.Cache">
            <summary>
            缓存依赖
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.AccessProvider">
            <summary>
            是否为Access驱动
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.AllowAutoIncrement">
            <summary>
            是否使用自增列
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.SupportBatch">
            <summary>
            是否支持批处理
            </summary>
        </member>
        <member name="P:MySoft.Data.DbProvider.AutoIncrementValue">
            <summary>
            返回自动ID的sql语句
            </summary>
        </member>
        <member name="M:MySoft.Data.MsAccess.MsAccessProvider.GetParameterType(System.Data.Common.DbParameter)">
            <summary>
            获取参数类型
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.MsAccess.MsAccessProvider.CreateParameter(System.String,System.Object)">
            <summary>
            创建DbParameter
            </summary>
            <param name="parameterName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.MsAccess.MsAccessProvider.PrepareParameter(System.Data.Common.DbCommand)">
            <summary>
            调整命令
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.MsAccess.MsAccessProvider.AccessProvider">
            <summary>
            是否为access驱动
            </summary>
        </member>
        <member name="P:MySoft.Data.MsAccess.MsAccessProvider.SupportBatch">
            <summary>
            是否支持批处理
            </summary>
        </member>
        <member name="P:MySoft.Data.MsAccess.MsAccessProvider.AutoIncrementValue">
            <summary>
            返回自动ID的sql语句
            </summary>
        </member>
        <member name="T:MySoft.Data.Table`1">
            <summary>
            表信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Data.Table">
            <summary>
            数据库查询时用户传入的自定义信息表
            </summary>
        </member>
        <member name="M:MySoft.Data.Table.#ctor(System.String)">
            <summary>
            实例化一个表
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.Table.As(System.String)">
            <summary>
            指定表别名
            </summary>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.GetTable``1">
            <summary>
            返回一个Table实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.GetTable``1(System.String)">
            <summary>
            返回一个Table实例
            </summary>
            <param name="suffix">后缀名称</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.GetTable``1(System.String,System.String)">
            <summary>
            返回一个Table实例
            </summary>
            <param name="prefix">前缀名称</param>
            <param name="suffix">后缀名称</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.From``1">
            <summary>
            返回一个表关系
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Table.From``1(MySoft.Data.Table)">
            <summary>
            返回一个表关系
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.Table.Item(System.String)">
            <summary>
            返回一个Field
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.Table.Name">
            <summary>
            表名称
            </summary>
        </member>
        <member name="P:MySoft.Data.Table.TableName">
            <summary>
            设置表名
            </summary>
        </member>
        <member name="P:MySoft.Data.Table.AliasName">
            <summary>
            表别名
            </summary>
        </member>
        <member name="P:MySoft.Data.Table.Prefix">
            <summary>
            设置表前缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Table.Suffix">
            <summary>
            设置表后缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Table.OriginalName">
            <summary>
            获取原始的表名
            </summary>
        </member>
        <member name="M:MySoft.Data.Table`1.#ctor(System.String)">
            <summary>
            实例化一个表
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="T:MySoft.Data.DbBatch">
            <summary>
            批处理
            </summary>
        </member>
        <member name="M:MySoft.Data.IDbProcess.InsertOrUpdate``1(``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProcess.InsertOrUpdate``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProcess.InsertOrUpdate``1(MySoft.Data.Table,``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbProcess.InsertOrUpdate``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IDbBatch.Execute(System.Collections.Generic.IList{MySoft.Data.DataException}@)">
            <summary>
            执行批处理操作
            </summary>
            <param name="errors">输出的错误</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Execute(System.Collections.Generic.IList{MySoft.Data.DataException}@)">
            <summary>
            执行批处理操作
            </summary>
            <param name="errors">输出的错误</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Save``1(MySoft.Data.Table,``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.AddCommand(System.Data.Common.DbCommand)">
            <summary>
            添加命令到队列中
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:MySoft.Data.DbBatch.Insert``1(MySoft.Data.Table,System.Collections.Generic.List{MySoft.Data.FieldValue},System.Object@)">
            <summary>
            插入值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvlist"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Update``1(MySoft.Data.Table,System.Collections.Generic.List{MySoft.Data.FieldValue},MySoft.Data.WhereClip)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvlist"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Delete``1(MySoft.Data.Table,``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Delete``1(MySoft.Data.Table,System.Object[])">
            <summary>
            按主键删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.InsertOrUpdate``1(MySoft.Data.Table,``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.InsertOrUpdate``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Save``1(``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Delete``1(``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Delete``1(System.Object[])">
            <summary>
            按主键删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.InsertOrUpdate``1(``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.InsertOrUpdate``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Exists``1(MySoft.Data.Table,``0,MySoft.Data.Field[])">
            <summary>
            判断记录是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbBatch.Exists``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            判断记录是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.Mapping.TableSetting">
            <summary>
            表映射设置
            </summary>
        </member>
        <member name="M:MySoft.Data.Mapping.TableSetting.#ctor">
            <summary>
            初始化TableSetting
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableSetting.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableSetting.Prefix">
            <summary>
            表前缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableSetting.Suffix">
            <summary>
            表后缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableSetting.Mappings">
            <summary>
            表映射
            </summary>
        </member>
        <member name="T:MySoft.Data.Mapping.TableMapping">
            <summary>
            表映射节点
            </summary>
        </member>
        <member name="M:MySoft.Data.Mapping.TableMapping.#ctor">
            <summary>
            初始化TableMapping
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.ClassName">
            <summary>
            类名称
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.UsePrefix">
            <summary>
            使用前缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.UseSuffix">
            <summary>
            使用后缀
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.MappingName">
            <summary>
            映射的表名
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.TableMapping.Mappings">
            <summary>
            字段映射
            </summary>
        </member>
        <member name="T:MySoft.Data.Mapping.FieldMapping">
            <summary>
            字段映射节点
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.FieldMapping.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:MySoft.Data.Mapping.FieldMapping.MappingName">
            <summary>
            映射的字段名
            </summary>
        </member>
        <member name="T:MySoft.Data.DbSession">
            <summary>
            会话操作对象
            </summary>
        </member>
        <member name="M:MySoft.Data.IDbSession.RegisterDecryptHandler(MySoft.Data.DecryptEventHandler)">
            <summary>
            注册解密的Handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MySoft.Data.IDbSession.RegisterExcutingLog(MySoft.Data.IExcutingLog)">
            <summary>
            注册日志依赖
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:MySoft.Data.IDbSession.RegisterCacheDependent(MySoft.Cache.ICacheDependent)">
            <summary>
            注册缓存依赖
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:MySoft.Data.IDbSession.SetCommandTimeout(System.Int32)">
            <summary>
            设置命令超时时间
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="F:MySoft.Data.DbSession.Default">
            <summary>
            默认会话对象
            </summary>
        </member>
        <member name="M:MySoft.Data.DbSession.#ctor(System.String)">
            <summary>
             指定配制节名实例化一个Session会话
            </summary>
            <param name="connectName"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.#ctor(MySoft.Data.DbProvider)">
            <summary>
            指定驱动实例化一个Session会话
            </summary>
            <param name="dbProvider"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetDefault(System.String)">
            <summary>
            设置指定配制节名Session会话为默认会话
            </summary>
            <param name="connectName"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetDefault(MySoft.Data.DbProvider)">
            <summary>
            设置指定驱动Session会话为默认会话
            </summary>
            <param name="dbProvider"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetDefault(MySoft.Data.DbSession)">
            <summary>
            设置指定的会话为默认会话
            </summary>
            <param name="dbSession"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetProvider(System.String)">
            <summary>
            设置新的驱动
            </summary>
            <param name="connectName"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetProvider(MySoft.Data.DbProvider)">
            <summary>
            设置新的驱动
            </summary>
            <param name="dbProvider"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginTrans">
            <summary>
            开始一个事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginTrans(System.Data.IsolationLevel)">
            <summary>
            开始一个事务
            </summary>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.SetTransaction(System.Data.Common.DbTransaction)">
            <summary>
            设置一个外部事务
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginTransaction">
            <summary>
            开始一个外部事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开始一个外部事务
            </summary>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.SetConnection(System.Data.Common.DbConnection)">
            <summary>
            设置一个外部链接
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.CreateConnection">
            <summary>
            创建一个外部连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.CreateParameter">
            <summary>
            创建参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Single``1(MySoft.Data.Table,System.Object[])">
            <summary>
            按主键获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Single``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            按条件获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(MySoft.Data.Table,``0)">
            <summary>
            是否存在指定的实体，按主键匹配
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(MySoft.Data.Table,System.Object[])">
            <summary>
            是否存在指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            是否存在指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Count``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            按条件获取记录条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Sum``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Avg``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Max``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Min``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Sum``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Avg``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Max``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Min``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Single``1(System.Object[])">
            <summary>
            按主键获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Single``1(MySoft.Data.WhereClip)">
            <summary>
            按条件获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(``0)">
            <summary>
            是否存在指定的实体，按主键匹配
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(System.Object[])">
            <summary>
            是否存在指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Exists``1(MySoft.Data.WhereClip)">
            <summary>
            是否存在指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Count``1(MySoft.Data.WhereClip)">
            <summary>
            按条件获取记录条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Sum``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Avg``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Max``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Min``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Sum``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Avg``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Max``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Min``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.From``1(MySoft.Data.TableRelation{``0})">
            <summary>
            返回一个From节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Query``2">
            <summary>
            返回一个查询
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.From``1">
            <summary>
            返回一个From节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.From``1(MySoft.Data.Table)">
            <summary>
            返回一个From节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.From``1(System.String)">
            <summary>
            返回一个From节，并可指定其别名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.FromSql(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            返回一个Sql节
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.FromProc(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            返回一个Proc节
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.FromSql(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            返回一个Sql节
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.FromProc(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            返回一个Proc节
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Excute(MySoft.Data.InsertCreator)">
            <summary>
            插入数据
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Excute``1(MySoft.Data.InsertCreator,``0@)">
            <summary>
             插入数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="creator"></param>
            <param name="identityValue"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Excute(MySoft.Data.DeleteCreator)">
            <summary>
            按条件删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Excute(MySoft.Data.UpdateCreator)">
            <summary>
            更新数据
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.From(MySoft.Data.QueryCreator)">
            <summary>
             返回一个Query节
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginBatch">
            <summary>
            返回一个Batch
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.BeginBatch(System.Int32)">
            <summary>
            返回一个Batch
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Save``1(MySoft.Data.Table,``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``1(MySoft.Data.Table,MySoft.Data.Field[],System.Object[])">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``2(MySoft.Data.Table,MySoft.Data.Field[],System.Object[],``1@)">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(MySoft.Data.Table,``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(MySoft.Data.Table,System.Object[])">
            <summary>
            删除指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            删除符合条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.InsertOrUpdate``1(MySoft.Data.Table,``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.InsertOrUpdate``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Table,MySoft.Data.Field,System.Object,MySoft.Data.WhereClip)">
            <summary>
            更新指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="value"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Table,MySoft.Data.Field[],System.Object[],MySoft.Data.WhereClip)">
            <summary>
            更新指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Save``1(``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``1(MySoft.Data.Field[],System.Object[])">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``2(MySoft.Data.Field[],System.Object[],``1@)">
            <summary>
            插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(System.Object[])">
            <summary>
            按主键删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Delete``1(MySoft.Data.WhereClip)">
            <summary>
            按条件删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.InsertOrUpdate``1(``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.InsertOrUpdate``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Field,System.Object,MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="value"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Field[],System.Object[],MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Serialization(MySoft.Data.WhereClip)">
            <summary>
            返回最终条件的SQL
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Serialization(MySoft.Data.OrderByClip)">
            <summary>
            返回最终排序的SQL
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.RegisterDecryptHandler(MySoft.Data.DecryptEventHandler)">
            <summary>
            注册解密的Handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.RegisterExcutingLog(MySoft.Data.IExcutingLog)">
            <summary>
            注册日志依赖
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.RegisterCacheDependent(MySoft.Cache.ICacheDependent)">
            <summary>
            注册缓存依赖
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.SetCommandTimeout(System.Int32)">
            <summary>
            设置命令操作超时时间
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``1(MySoft.Data.FieldValue[])">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``2(MySoft.Data.FieldValue[],``1@)">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="fvs"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.FieldValue,MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fv"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``1(MySoft.Data.Table,MySoft.Data.FieldValue[])">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``2(MySoft.Data.Table,MySoft.Data.FieldValue[],``1@)">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Table,MySoft.Data.FieldValue,MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fv"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Update``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``2(``0,``1@,MySoft.Data.FieldValue[])">
            <summary>
            插入实体
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="entity"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbSession.Insert``2(MySoft.Data.Table,``0,``1@,MySoft.Data.FieldValue[])">
            <summary>
            插入实体
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="table"></param>
            <param name="entity"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.TopSection`1">
            <summary>
            Top对应的Query查询
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Data.IPaging.Prefix(System.String)">
            <summary>
            设置前缀
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:MySoft.Data.IPaging.Suffix(System.String)">
            <summary>
            设置后缀
            </summary>
            <param name="suffix"></param>
        </member>
        <member name="M:MySoft.Data.IPaging.End(System.String)">
            <summary>
            设置结尾
            </summary>
            <param name="end"></param>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.MySoft#Data#IPaging#Prefix(System.String)">
            <summary>
            前置值如 top n
            </summary>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.MySoft#Data#IPaging#Suffix(System.String)">
            <summary>
            结尾值如 row_number()
            </summary>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.MySoft#Data#IPaging#End(System.String)">
            <summary>
            设置值如 limit n
            </summary>
            <param name="end"></param>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToList``1(System.Int32,System.Int32)">
            <summary>
            返回一个列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToList``1">
            <summary>
            返回一个列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToSingle``1">
            <summary>
            返回一个实体
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SubQuery">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SubQuery(System.String)">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SubQuery``1">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SubQuery``1(System.String)">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.CreateQuery``1">
            <summary>
            创建一个跟当前相同的子查询
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GroupBy(MySoft.Data.GroupByClip)">
            <summary>
            进行GroupBy操作
            </summary>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.OrderBy(MySoft.Data.OrderByClip)">
            <summary>
            进行OrderBy操作
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GetTop(System.Int32)">
            <summary>
            选取前N条数据
            </summary>
            <param name="topSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SetPagingField(MySoft.Data.Field)">
            <summary>
            设置分页字段
            </summary>
            <param name="pagingField"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Select(MySoft.Data.Field[])">
            <summary>
            选择输出的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Select(MySoft.Data.ExcludeField)">
            <summary>
            选择被排除以外的列（用于列多时排除某几列的情况）
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Where(MySoft.Data.WhereClip)">
            <summary>
            注入当前查询的条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Union(MySoft.Data.QuerySection{`0})">
            <summary>
            进行Union操作
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.UnionAll(MySoft.Data.QuerySection{`0})">
            <summary>
            进行Union操作
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Union(MySoft.Data.QuerySection{`0},System.Boolean)">
            <summary>
            进行Union操作
            </summary>
            <param name="query"></param>
            <param name="isUnionAll"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Having(MySoft.Data.WhereClip)">
            <summary>
            进行Having操作
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Distinct">
            <summary>
            进行Distinct操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GetPage(System.Int32)">
            <summary>
            返回一个分页处理的Page节
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToSingle">
            <summary>
            返回一个实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToListResult(System.Int32,System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToListResult">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToListResult``1(System.Int32,System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToListResult``1">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToList">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToList(System.Int32,System.Int32)">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToReader(System.Int32,System.Int32)">
            <summary>
            返回一个DbReader
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToReader">
            <summary>
            返回一个DbReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToTable(System.Int32,System.Int32)">
            <summary>
            返回一个DataTable
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToTable">
            <summary>
            返回一个DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToScalar``1">
            <summary>
            返回一个值
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToScalar">
            <summary>
            返回一个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.Count">
            <summary>
            返回当前查询记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GetPageCount(System.Int32)">
            <summary>
            获取总页数
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GetCacheKey(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            获取缓存的Key
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.GetCache``1(System.String,System.String)">
            <summary>
            获取缓存信息
            </summary>
            <typeparam name="CacheType"></typeparam>
            <param name="prefix"></param>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.SetCache``1(System.String,System.String,System.Object)">
            <summary>
            设置缓存信息
            </summary>
            <typeparam name="CacheType"></typeparam>
            <param name="prefix"></param>
            <param name="cacheKey"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToListPage(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection`1.ToTablePage(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.QuerySection`1.FromSection">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:MySoft.Data.TopSection`1.ToListResult">
            <summary>
            返回结果列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopSection`1.ToListResult``1">
            <summary>
            返回结果列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopSection`1.ToList">
            <summary>
            返回实体列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopSection`1.ToList``1">
            <summary>
            返回实体列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopSection`1.ToReader">
            <summary>
            返回阅读器
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TopSection`1.ToTable">
            <summary>
            返回表数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToSingle``1">
            <summary>
            返回一个实体
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.SubQuery">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.SubQuery(System.String)">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.SubQuery``1">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.SubQuery``1(System.String)">
            <summary>
            生成一个带别名的子查询
            </summary>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.GroupBy(MySoft.Data.GroupByClip)">
            <summary>
            进行GroupBy操作
            </summary>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.OrderBy(MySoft.Data.OrderByClip)">
            <summary>
            进行OrderBy操作
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Select(MySoft.Data.Field[])">
            <summary>
            选择输出的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Select(MySoft.Data.ExcludeField)">
            <summary>
            选择被排除以外的列（用于列多时排除某几列的情况）
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Where(MySoft.Data.WhereClip)">
            <summary>
            注入当前查询的条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Union(MySoft.Data.QuerySection{`0})">
            <summary>
            进行Union操作
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.UnionAll(MySoft.Data.QuerySection{`0})">
            <summary>
            进行Union操作
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Having(MySoft.Data.WhereClip)">
            <summary>
            进行Having操作
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.SetPagingField(MySoft.Data.Field)">
            <summary>
            设置分页字段
            </summary>
            <param name="pagingField"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.GetTop(System.Int32)">
            <summary>
            选择前n条
            </summary>
            <param name="topSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Distinct">
            <summary>
            进行Distinct操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.GetPage(System.Int32)">
            <summary>
            返回一个分页处理的Page节
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToSingle">
            <summary>
            返回一个实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToListResult(System.Int32,System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToListResult">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToListResult``1(System.Int32,System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToListResult``1">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToReader(System.Int32,System.Int32)">
            <summary>
            返回一个DbReader
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToReader">
            <summary>
            返回一个DbReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToList">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToList(System.Int32,System.Int32)">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToList``1">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToList``1(System.Int32,System.Int32)">
            <summary>
            返回IArrayList
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToTable(System.Int32,System.Int32)">
            <summary>
            返回一个DataTable
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToTable">
            <summary>
            返回一个DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToScalar``1">
            <summary>
            返回一个值
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToScalar">
            <summary>
            返回一个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.Count">
            <summary>
            返回当前查询记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.GetPageCount(System.Int32)">
            <summary>
            获取总页数
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.ToTablePage(System.Int32,System.Int32)">
            <summary>
            返回指定数据源的分页信息
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.InnerJoin``1(MySoft.Data.WhereClip)">
            <summary>
            内连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.InnerJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            内连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.InnerJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            内连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.InnerJoin``1(MySoft.Data.TableRelation{``0},MySoft.Data.WhereClip)">
            <summary>
            内连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.InnerJoin``1(MySoft.Data.TableRelation{``0},System.String,MySoft.Data.WhereClip)">
            <summary>
            内连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.LeftJoin``1(MySoft.Data.WhereClip)">
            <summary>
            左连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.LeftJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            左连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.LeftJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            左连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.LeftJoin``1(MySoft.Data.TableRelation{``0},MySoft.Data.WhereClip)">
            <summary>
            左连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.LeftJoin``1(MySoft.Data.TableRelation{``0},System.String,MySoft.Data.WhereClip)">
            <summary>
            左连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.RightJoin``1(MySoft.Data.WhereClip)">
            <summary>
            右连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.RightJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            右连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.RightJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            右连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.RightJoin``1(MySoft.Data.TableRelation{``0},MySoft.Data.WhereClip)">
            <summary>
            右连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.FromSection`1.RightJoin``1(MySoft.Data.TableRelation{``0},System.String,MySoft.Data.WhereClip)">
            <summary>
            右连接查询
            </summary>
            <typeparam name="TJoin"></typeparam>
            <param name="relation"></param>
            <param name="aliasName"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.Oracle.OracleProvider">
            <summary>
            Oracle 驱动
            </summary>
        </member>
        <member name="M:MySoft.Data.Oracle.OracleProvider.GetAutoIncrement(System.String)">
            <summary>
            格式化IdentityName
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Oracle.OracleProvider.GetParameterType(System.Data.Common.DbParameter)">
            <summary>
            获取参数类型
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Oracle.OracleProvider.CreateParameter(System.String,System.Object)">
            <summary>
            创建DbParameter
            </summary>
            <param name="parameterName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Oracle.OracleProvider.PrepareParameter(System.Data.Common.DbCommand)">
            <summary>
            调整DbCommand
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Oracle.OracleProvider.CreatePageQuery``1(MySoft.Data.QuerySection{``0},System.Int32,System.Int32)">
            <summary>
            创建分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="itemCount"></param>
            <param name="skipCount"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.Oracle.OracleProvider.SupportBatch">
            <summary>
            是否支持批处理
            </summary>
        </member>
        <member name="P:MySoft.Data.Oracle.OracleProvider.AllowAutoIncrement">
            <summary>
            是否使用自增列
            </summary>
        </member>
        <member name="P:MySoft.Data.Oracle.OracleProvider.AutoIncrementValue">
            <summary>
            返回自动ID的sql语句
            </summary>
        </member>
        <member name="T:MySoft.Data.IArrayList`1">
            <summary>
            可以输出Array的接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Data.IDataSource`1">
            <summary>
            数据源
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MySoft.Data.IDataSource`1.OriginalData">
            <summary>
            数据源
            </summary>
        </member>
        <member name="M:MySoft.Data.IArrayList`1.ToArray">
            <summary>
            返回数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IArrayList`1.ToDictionary``1(System.String)">
            <summary>
            返回字典
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IArrayList`1.ToDictionary``1(MySoft.Data.Field)">
            <summary>
            返回字典
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="groupField"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.IArrayList`1.Item(System.Int32)">
            <summary>
            获取当前索引的对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.ISourceList`1">
            <summary>
            数据源接口
            </summary>
        </member>
        <member name="T:MySoft.Data.IListConvert`1">
            <summary>
            列表转换
            </summary>
        </member>
        <member name="M:MySoft.Data.IListConvert`1.ConvertTo``1">
            <summary>
            返回另一类型的列表
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IListConvert`1.ConvertTo``2">
            <summary>
            返回另一类型的列表(输出为接口)
            </summary>
            <typeparam name="TOutput"></typeparam>
            <typeparam name="IOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IListConvert`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            将当前类型转成另一种类型
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceList`1.ToTable">
            <summary>
            转换成SourceTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceList`1.ForEach(System.Action{`0})">
            <summary>
            循环item
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MySoft.Data.ISourceList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            排序，可以使用内部的SortComparer类来实现多列排序
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:MySoft.Data.ISourceList`1.FindAll(System.Predicate{`0})">
            <summary>
            查找符合条件的对象
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            返回指定数据条数
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.SQLParameter">
            <summary>
            SQL命令的参数
            </summary>
        </member>
        <member name="M:MySoft.Data.SQLParameter.#ctor">
            <summary>
            初始化SQLParameter
            </summary>
        </member>
        <member name="M:MySoft.Data.SQLParameter.#ctor(System.String)">
            <summary>
            初始化SQLParameter
            </summary>
            <param name="pName"></param>
        </member>
        <member name="M:MySoft.Data.SQLParameter.#ctor(System.String,System.Object)">
            <summary>
            初始化OrmParameter
            </summary>
            <param name="pName"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:MySoft.Data.SQLParameter.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            初始化OrmParameter
            </summary>
            <param name="pName"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:MySoft.Data.SQLParameter.#ctor(System.Data.Common.DbParameter)">
            <summary>
            通过DbParameter实例化对象
            </summary>
            <param name="dbParameter"></param>
        </member>
        <member name="P:MySoft.Data.SQLParameter.Name">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:MySoft.Data.SQLParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:MySoft.Data.SQLParameter.Direction">
            <summary>
            参数方向
            </summary>
        </member>
        <member name="T:MySoft.Data.TableJoin">
            <summary>
            TableJoin
            </summary>
        </member>
        <member name="T:MySoft.Data.QueryCreator">
            <summary>
            查询创建器
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator.NewCreator">
            <summary>
            创建一个新的查询器（条件为全部，排序为默认)
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator.NewCreator(System.String)">
            <summary>
            创建一个新的查询器（条件为全部，排序为默认)
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator.NewCreator(MySoft.Data.Table)">
            <summary>
            创建一个新的查询器（条件为全部，排序为默认)
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator.NewCreator``1">
            <summary>
            创建一个新的查询器（条件为全部，排序为默认)
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator.#ctor">
            <summary>
            实例化QueryCreater
            </summary>
        </member>
        <member name="M:MySoft.Data.QueryCreator.#ctor(System.String)">
            <summary>
            实例化QueryCreator
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.#ctor(MySoft.Data.Table)">
            <summary>
            实例化QueryCreator
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.From``1">
            <summary>
            设置表信息
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.From(System.String)">
            <summary>
            设置表名
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.From(MySoft.Data.Table)">
            <summary>
            设置表信息
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join(System.String,System.String,MySoft.Data.SQLParameter[])">
            <summary>
            关联表信息
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            关联表信息
            </summary>
            <param name="table"></param>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join``1(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            关联表信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join``1(MySoft.Data.WhereClip)">
            <summary>
            关联表信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join(MySoft.Data.JoinType,System.String,System.String,MySoft.Data.SQLParameter[])">
            <summary>
            关联表信息
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join(MySoft.Data.JoinType,MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            关联表信息
            </summary>
            <param name="table"></param>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join``1(MySoft.Data.JoinType,System.String,MySoft.Data.SQLParameter[])">
            <summary>
            关联表信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.Join``1(MySoft.Data.JoinType,MySoft.Data.WhereClip)">
            <summary>
            关联表信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddWhere(MySoft.Data.WhereClip)">
            <summary>
            添加一个条件
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddWhere(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            添加一个条件
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddWhere(MySoft.Data.Field,System.Object)">
            <summary>
            添加一个条件
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddWhere(System.String,System.Object)">
            <summary>
            添加一个条件
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddWhere(System.String,System.String,System.Object)">
            <summary>
            添加一个条件
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddWhere``1(System.String,System.Object)">
            <summary>
            添加一个条件
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddOrder(MySoft.Data.OrderByClip)">
            <summary>
            添加一个排序
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddOrder(System.String)">
            <summary>
            添加一个排序
            </summary>
            <param name="orderby"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddOrder(MySoft.Data.Field,System.Boolean)">
            <summary>
            增加排序规则
            </summary>
            <param name="field"></param>
            <param name="desc"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddOrder(System.String,System.Boolean)">
            <summary>
            增加排序规则
            </summary>
            <param name="fieldName"></param>
            <param name="desc"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddOrder(System.String,System.String,System.Boolean)">
            <summary>
            增加排序规则
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="desc"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddOrder``1(System.String,System.Boolean)">
            <summary>
            增加排序规则
            </summary>
            <param name="fieldName"></param>
            <param name="desc"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddField(MySoft.Data.Field)">
            <summary>
            添加一个字段
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddField(System.String)">
            <summary>
            添加一个字段
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddField(System.String,System.String)">
            <summary>
            添加一个字段
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.AddField``1(System.String)">
            <summary>
            添加一个字段
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.QueryCreator.RemoveField(MySoft.Data.Field[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QueryCreator.RemoveField(System.String[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.QueryCreator.Table">
            <summary>
            返回table
            </summary>
        </member>
        <member name="P:MySoft.Data.QueryCreator.Where">
            <summary>
            返回条件
            </summary>
        </member>
        <member name="P:MySoft.Data.QueryCreator.OrderBy">
            <summary>
            返回排序
            </summary>
        </member>
        <member name="P:MySoft.Data.QueryCreator.Fields">
            <summary>
            返回字段列表
            </summary>
        </member>
        <member name="P:MySoft.Data.QueryCreator.IsRelation">
            <summary>
            是否关联查询
            </summary>
        </member>
        <member name="P:MySoft.Data.QueryCreator.Relations">
            <summary>
            获取关联信息
            </summary>
        </member>
        <member name="T:MySoft.Data.InsertCreator">
            <summary>
            插入创建器
            </summary>
        </member>
        <member name="M:MySoft.Data.InsertCreator.NewCreator">
            <summary>
            创建一个新的插入器
            </summary>
        </member>
        <member name="M:MySoft.Data.InsertCreator.NewCreator(System.String)">
            <summary>
            创建一个新的插入器
            </summary>
        </member>
        <member name="M:MySoft.Data.InsertCreator.NewCreator(MySoft.Data.Table)">
            <summary>
            创建一个新的插入器
            </summary>
        </member>
        <member name="M:MySoft.Data.InsertCreator.NewCreator``1">
            <summary>
            创建一个新的插入器
            </summary>
        </member>
        <member name="M:MySoft.Data.InsertCreator.#ctor">
            <summary>
            实例化InsertCreator
            </summary>
        </member>
        <member name="M:MySoft.Data.InsertCreator.#ctor(System.String)">
            <summary>
            实例化InsertCreator
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.#ctor(MySoft.Data.Table)">
            <summary>
            实例化InsertCreator
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.From``1">
            <summary>
            设置表信息
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.InsertCreator.From(System.String)">
            <summary>
            设置表名
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.From(MySoft.Data.Table)">
            <summary>
            设置表信息
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.SetEntity``1(``0)">
            <summary>
            设置实体信息
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.InsertCreator.SetIdentityField(MySoft.Data.Field)">
            <summary>
            设置主键字段
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.SetIdentityField(System.String)">
            <summary>
            设置主键字段
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(MySoft.Data.Field,System.Object)">
            <summary>
            添加一个数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(System.String,System.Object)">
            <summary>
            添加一个数据
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            添加一个数据字典
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(System.Collections.Generic.IDictionary{MySoft.Data.Field,System.Object})">
            <summary>
            添加一个数据字典
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(MySoft.Data.Field[],System.Object[])">
            <summary>
            添加多个数据
            </summary>
            <param name="fields"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.AddInsert(System.String[],System.Object[])">
            <summary>
            添加多个数据
            </summary>
            <param name="fieldNames"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.Data.InsertCreator.RemoveInsert(System.String[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.InsertCreator.RemoveInsert(MySoft.Data.Field[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.InsertCreator.Table">
            <summary>
            返回table
            </summary>
        </member>
        <member name="P:MySoft.Data.InsertCreator.IdentityField">
            <summary>
            返回标识列字段
            </summary>
        </member>
        <member name="P:MySoft.Data.InsertCreator.SequenceName">
            <summary>
            返回自增量名称
            </summary>
        </member>
        <member name="T:MySoft.Data.EntityConfig">
            <summary>
            映像配置类
            </summary>
        </member>
        <member name="M:MySoft.Data.EntityConfig.Refresh">
            <summary>
            刷新配置
            </summary>
        </member>
        <member name="M:MySoft.Data.EntityConfig.GetTableTimeout``1">
            <summary>
            获取表超时时间
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityConfig.GetMappingTable``1(System.String)">
            <summary>
            获取映射的表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityConfig.GetMappingField``1(System.String,System.String)">
            <summary>
            获取映射的字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.GroupByClip">
            <summary>
            
            </summary>
        </member>
        <member name="F:MySoft.Data.GroupByClip.None">
            <summary>
            默认的无分组对象
            </summary>
        </member>
        <member name="M:MySoft.Data.GroupByClip.#ctor">
            <summary>
            自定义一个GroupBy条件
            </summary>
        </member>
        <member name="M:MySoft.Data.GroupByClip.#ctor(System.String)">
            <summary>
            自定义一个GroupBy条件
            </summary>
            <param name="groupBy"></param>
        </member>
        <member name="M:MySoft.Data.GroupByClip.#ctor(MySoft.Data.Field[])">
            <summary>
            自定义一个GroupBy条件
            </summary>
            <param name="fields"></param>
        </member>
        <member name="P:MySoft.Data.GroupByClip.Value">
            <summary>
            GroupBy的值
            </summary>
        </member>
        <member name="M:MySoft.Data.PageSection`1.ToListResult(System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection`1.ToListResult``1(System.Int32)">
            <summary>
            返回一个Object列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection`1.ToReader(System.Int32)">
            <summary>
            返回一个DbReader
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection`1.ToTable(System.Int32)">
            <summary>
            返回一个DataTable
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection`1.ToList(System.Int32)">
            <summary>
            返回一个IArrayList
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.PageSection`1.PageCount">
            <summary>
            返回页数
            </summary>
        </member>
        <member name="P:MySoft.Data.PageSection`1.RowCount">
            <summary>
            返回记录数
            </summary>
        </member>
        <member name="T:MySoft.Data.ISourceReader">
            <summary>
            读数据接口
            </summary>
        </member>
        <member name="T:MySoft.Data.IRowReader">
            <summary>
            行数据阅读器
            </summary>
        </member>
        <member name="M:MySoft.Data.IRowReader.IsDBNull(System.Int32)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue(System.Int32)">
            <summary>
            返回object
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue``1(System.Int32)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.IsDBNull(System.String)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue(System.String)">
            <summary>
            返回object
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue``1(System.String)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetString(System.String)">
            <summary>
            获取string
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetBytes(System.String)">
            <summary>
            获取byte[]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt16(System.String)">
            <summary>
            获取short
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt32(System.String)">
            <summary>
            获取int
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt64(System.String)">
            <summary>
            获取long
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDecimal(System.String)">
            <summary>
            获取decimal
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDouble(System.String)">
            <summary>
            获取double
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetFloat(System.String)">
            <summary>
            获取float
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetByte(System.String)">
            <summary>
            获取byte
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetBoolean(System.String)">
            <summary>
            获取bool
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDateTime(System.String)">
            <summary>
            获取DateTime
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetGuid(System.String)">
            <summary>
            获取Guid
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.IsDBNull(MySoft.Data.Field)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue(MySoft.Data.Field)">
            <summary>
            返回object
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetValue``1(MySoft.Data.Field)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetString(MySoft.Data.Field)">
            <summary>
            获取string
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetBytes(MySoft.Data.Field)">
            <summary>
            获取byte[]
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt16(MySoft.Data.Field)">
            <summary>
            获取short
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt32(MySoft.Data.Field)">
            <summary>
            获取int
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetInt64(MySoft.Data.Field)">
            <summary>
            获取long
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDecimal(MySoft.Data.Field)">
            <summary>
            获取decimal
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDouble(MySoft.Data.Field)">
            <summary>
            获取double
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetFloat(MySoft.Data.Field)">
            <summary>
            获取float
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetByte(MySoft.Data.Field)">
            <summary>
            获取byte
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetBoolean(MySoft.Data.Field)">
            <summary>
            获取bool
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetDateTime(MySoft.Data.Field)">
            <summary>
            获取DateTime
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.IRowReader.GetGuid(MySoft.Data.Field)">
            <summary>
            获取Guid
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.IRowReader.Item(System.Int32)">
            <summary>
            按索引获取值
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.IRowReader.Item(System.String)">
            <summary>
            按名称获取值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceReader.Close">
            <summary>
            关闭DbReader
            </summary>
        </member>
        <member name="M:MySoft.Data.ISourceReader.Read">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceReader.NextResult">
            <summary>
            返回下一结果集
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.ISourceReader.FieldCount">
            <summary>
            获取字段数
            </summary>
        </member>
        <member name="T:MySoft.Data.ITableRelation`1">
            <summary>
            表关系类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Data.PageSection">
            <summary>
            分页器
            </summary>
        </member>
        <member name="M:MySoft.Data.PageSection.ToReader(System.Int32)">
            <summary>
            返回ISourceReader
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection.ToList``1(System.Int32)">
            <summary>
            返回IArrayList
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.PageSection.ToTable(System.Int32)">
            <summary>
            返回DataTable
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.PageSection.PageCount">
            <summary>
            返回页数
            </summary>
        </member>
        <member name="P:MySoft.Data.PageSection.RowCount">
            <summary>
            返回记录数
            </summary>
        </member>
        <member name="T:MySoft.Data.DbTrans">
            <summary>
            事务处理类
            </summary>
        </member>
        <member name="M:MySoft.Data.DbTrans.#ctor(MySoft.Data.DbProvider,System.Data.Common.DbTransaction)">
            <summary>
            以DbTransaction方式实例化一个事务
            </summary>
            <param name="dbProvider"></param>
            <param name="dbTran"></param>
        </member>
        <member name="M:MySoft.Data.DbTrans.#ctor(MySoft.Data.DbProvider,System.Data.Common.DbConnection)">
            <summary>
            以BbConnection方式实例化一个事务
            </summary>
            <param name="dbProvider"></param>
            <param name="dbConnection"></param>
        </member>
        <member name="M:MySoft.Data.DbTrans.BeginBatch">
            <summary>
            返回一个Batch
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.BeginBatch(System.Int32)">
            <summary>
            返回一个Batch
            </summary>
            <param name="batchSize">Batch大小</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Save``1(MySoft.Data.Table,``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``1(MySoft.Data.Table,MySoft.Data.Field[],System.Object[])">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``2(MySoft.Data.Table,MySoft.Data.Field[],System.Object[],``1@)">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(MySoft.Data.Table,``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(MySoft.Data.Table,System.Object[])">
            <summary>
            删除指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Save``1(``0)">
            <summary>
            保存一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``1(MySoft.Data.Field[],System.Object[])">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``2(MySoft.Data.Field[],System.Object[],``1@)">
            <summary>
             插入一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(``0)">
            <summary>
            删除一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(System.Object[])">
            <summary>
            按主键删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.InsertOrUpdate``1(``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.InsertOrUpdate``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:MySoft.Data.DbTrans.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:MySoft.Data.DbTrans.Dispose">
            <summary>
            Dispose事务
            </summary>
        </member>
        <member name="M:MySoft.Data.DbTrans.Close">
            <summary>
            关闭事务
            </summary>
        </member>
        <member name="M:MySoft.Data.DbTrans.Single``1(MySoft.Data.Table,System.Object[])">
            <summary>
            按主键获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Single``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            按条件获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(MySoft.Data.Table,``0)">
            <summary>
            是否存在指定的实体，按主键匹配
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(MySoft.Data.Table,System.Object[])">
            <summary>
            是否存在指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            是否存在指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Count``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            按条件获取记录条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Sum``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Avg``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Max``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Min``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Sum``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Avg``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Max``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Min``2(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Single``1(System.Object[])">
            <summary>
            按主键获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Single``1(MySoft.Data.WhereClip)">
            <summary>
            按条件获取一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(``0)">
            <summary>
            是否存在指定的实体，按主键匹配
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(System.Object[])">
            <summary>
            是否存在指定主键的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Exists``1(MySoft.Data.WhereClip)">
            <summary>
            是否存在指定条件的记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Count``1(MySoft.Data.WhereClip)">
            <summary>
            按条件获取记录条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Sum``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Avg``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Max``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Min``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Sum``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Sum操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Avg``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Avg操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Max``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Max操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Min``2(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            按条件进行Min操作
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.From``1">
            <summary>
            返回一个From节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.From``1(MySoft.Data.TableRelation{``0})">
            <summary>
            返回一个From节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Query``2">
            <summary>
            返回一个查询
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.From``1(MySoft.Data.Table)">
            <summary>
            返回一个From节
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.From``1(System.String)">
            <summary>
            返回一个From节，并可指定其别名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.FromSql(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            返回一个Sql节
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.FromProc(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            返回一个Proc节
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.FromSql(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            返回一个Sql节
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.FromProc(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            返回一个Proc节
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Excute(MySoft.Data.InsertCreator)">
            <summary>
            插入数据
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Excute``1(MySoft.Data.InsertCreator,``0@)">
            <summary>
             插入数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="creator"></param>
            <param name="identityValue"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Excute(MySoft.Data.DeleteCreator)">
            <summary>
            按条件删除指定记录
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Excute(MySoft.Data.UpdateCreator)">
            <summary>
            更新数据
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.From(MySoft.Data.QueryCreator)">
            <summary>
            返回一个Query节
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(MySoft.Data.WhereClip)">
            <summary>
            按条件删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Field,System.Object,MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="value"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Field[],System.Object[],MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Delete``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            按条件删除指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.InsertOrUpdate``1(MySoft.Data.Table,``0,MySoft.Data.Field[])">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.InsertOrUpdate``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            插入或更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Table,MySoft.Data.Field,System.Object,MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="value"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Table,MySoft.Data.Field[],System.Object[],MySoft.Data.WhereClip)">
            <summary>
            按条件更新指定记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="values"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``1(MySoft.Data.FieldValue[])">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``2(MySoft.Data.FieldValue[],``1@)">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="fvs"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.FieldValue,MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fv"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``1(MySoft.Data.Table,MySoft.Data.FieldValue[])">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``2(MySoft.Data.Table,MySoft.Data.FieldValue[],``1@)">
            <summary>
            插入数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Table,MySoft.Data.FieldValue,MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fv"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Update``1(MySoft.Data.Table,MySoft.Data.FieldValue[],MySoft.Data.WhereClip)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <param name="fvs"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``2(``0,``1@,MySoft.Data.FieldValue[])">
            <summary>
            插入实体
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="entity"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbTrans.Insert``2(MySoft.Data.Table,``0,``1@,MySoft.Data.FieldValue[])">
            <summary>
            插入实体
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="table"></param>
            <param name="entity"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.OrderByClip">
            <summary>
            排序构造器
            </summary>
        </member>
        <member name="F:MySoft.Data.OrderByClip.None">
            <summary>
            默认的无排序对象
            </summary>
        </member>
        <member name="M:MySoft.Data.OrderByClip.#ctor">
            <summary>
            自定义一个OrderBy条件
            </summary>
        </member>
        <member name="M:MySoft.Data.OrderByClip.#ctor(System.String)">
            <summary>
            自定义一个OrderBy条件
            </summary>
            <param name="orderBy"></param>
        </member>
        <member name="P:MySoft.Data.OrderByClip.Value">
            <summary>
            OrderBy的值
            </summary>
        </member>
        <member name="T:MySoft.Data.Field`1">
            <summary>
            用于实体内的Field操作
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MySoft.Data.Field">
            <summary>
            用于实体内的Field操作
            </summary>
        </member>
        <member name="T:MySoft.Data.Design.IField">
            <summary>
            
            </summary>
        </member>
        <member name="F:MySoft.Data.Field.All">
            <summary>
            字段*
            </summary>
        </member>
        <member name="M:MySoft.Data.Field.Set(System.Object)">
            <summary>
            创建一个FieldValue
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Set(MySoft.Data.DbValue)">
            <summary>
            创建一个FieldValue
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Set(MySoft.Data.Field)">
            <summary>
            创建一个FieldValue
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Create(System.String,MySoft.Data.QueryCreator)">
            <summary>
            创建一个内联字段
            </summary>
            <param name="fieldName"></param>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Create``1(System.String,MySoft.Data.QuerySection{``0})">
            <summary>
            创建一个内联字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Create``1(System.String,MySoft.Data.TableRelation{``0})">
            <summary>
            创建一个内联字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <param name="relation"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.#ctor(System.String)">
            <summary>
            实例化Field
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.Field.#ctor(System.String,System.String)">
            <summary>
            实例化Field
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.Field.#ctor(System.String,System.String,System.String)">
            <summary>
            实例化Field
            </summary>
            <param name="propertyName"></param>
            <param name="tableName"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:MySoft.Data.Field.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            实例化Field
            </summary>
            <param name="propertyName"></param>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="aliasName"></param>
        </member>
        <member name="M:MySoft.Data.Field.Distinct">
            <summary>
            对字段进行Distinct操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Count">
            <summary>
            对字段进行Count操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Sum">
            <summary>
            对字段进行Sum操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Avg">
            <summary>
            对字段进行Avg操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Max">
            <summary>
            对字段进行Max操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Min">
            <summary>
            对字段进行Min操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.As(System.String)">
            <summary>
            更改字段的别名
            </summary>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.At(System.String)">
            <summary>
            更改字段所在表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.At(MySoft.Data.Table)">
            <summary>
            更改字段所在表
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Func(System.String,System.String[])">
            <summary>
            函数处理
            </summary>
            <param name="funName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Func(System.String,System.Int32,System.String[])">
            <summary>
            函数处理
            </summary>
            <param name="funName"></param>
            <param name="findex"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.IsNull">
            <summary>
            返回一个值为null的条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Contains(System.String)">
            <summary>
            指定value进行模糊查询
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Like(System.String)">
            <summary>
            指定value进行Like查询
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.StartsWith(System.String)">
            <summary>
            指定value进行Like查询
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.EndsWith(System.String)">
            <summary>
            指定value进行Like查询
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.Between(System.Object,System.Object)">
            <summary>
            进行Between操作
            </summary>
            <param name="leftValue"></param>
            <param name="rightValue"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.Field)">
            <summary>
            进行In子查询操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.Table,MySoft.Data.Field)">
            <summary>
            进行In子查询操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            进行In子查询操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.Table,MySoft.Data.Field,MySoft.Data.WhereClip)">
            <summary>
            进行In子查询操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.QuerySection{``0})">
            <summary>
            进行In操作,query为一个子查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.TopSection{``0})">
            <summary>
            进行In操作,query为一个子查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In``1(MySoft.Data.TableRelation{``0})">
            <summary>
            进行In操作,relation为一个关联查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="relation"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In(System.Object[])">
            <summary>
            进行In子查询操作
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.In(MySoft.Data.QueryCreator)">
            <summary>
            进行In子查询操作
            </summary>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Field.CreateWhereClip(MySoft.Data.Field,System.String,System.Object)">
            <summary>
            创建一个参数方式的WhereClip
            </summary>
            <param name="field"></param>
            <param name="join"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.Field.Name">
            <summary>
            获取真实字段名
            </summary>
        </member>
        <member name="P:MySoft.Data.Field.OriginalName">
            <summary>
            获取原始的字段名
            </summary>
        </member>
        <member name="P:MySoft.Data.Field.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="T:MySoft.Data.Design.MappingAttribute">
            <summary>
            字段映射的名称
            </summary>
        </member>
        <member name="T:MySoft.Data.RelationEntity`1">
            <summary>
            关系实体
            </summary>
        </member>
        <member name="M:MySoft.Data.RelationEntity`1.GetRelation">
            <summary>
            返回表关系
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.SqlServer9.SqlServer9Provider">
            <summary>
            SQL Server 2005 驱动
            </summary>
        </member>
        <member name="T:MySoft.Data.SqlServer.SqlServerProvider">
            <summary>
            SQL Server 2000 驱动
            </summary>
        </member>
        <member name="M:MySoft.Data.SqlServer.SqlServerProvider.GetParameterType(System.Data.Common.DbParameter)">
            <summary>
            获取参数类型
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlServer.SqlServerProvider.CreateParameter(System.String,System.Object)">
            <summary>
            创建DbParameter
            </summary>
            <param name="parameterName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlServer.SqlServerProvider.PrepareParameter(System.Data.Common.DbCommand)">
            <summary>
            调整DbCommand
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SqlServer.SqlServerProvider.SupportBatch">
            <summary>
            是否支持批处理
            </summary>
        </member>
        <member name="P:MySoft.Data.SqlServer.SqlServerProvider.AutoIncrementValue">
            <summary>
            返回自动ID的sql语句
            </summary>
        </member>
        <member name="M:MySoft.Data.SqlServer9.SqlServer9Provider.CreatePageQuery``1(MySoft.Data.QuerySection{``0},System.Int32,System.Int32)">
            <summary>
            创建分页查询
            </summary>
            <param name="query"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.ISourceTable">
            <summary>
            数据源接口
            </summary>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Select(System.String[])">
            <summary>
            选择某些列
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Filter(System.String)">
            <summary>
            过虑数据
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Sort(System.String)">
            <summary>
            排序数据
            </summary>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Add(System.String,System.Type)">
            <summary>
            添加列
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Add(System.String,System.Type,System.String)">
            <summary>
            添加列
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.SetOrdinal(System.String,System.Int32)">
            <summary>
            设置列的顺序
            </summary>
            <param name="name"></param>
            <param name="index"></param>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Rename(System.String,System.String)">
            <summary>
            字段更名
            </summary>
            <param name="oldname"></param>
            <param name="newname"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Revalue``1(System.String,System.String,MySoft.Data.ReturnValue{``0})">
            <summary>
            按要求改变某列值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readName"></param>
            <param name="changeName"></param>
            <param name="revalue"></param>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Remove(System.String[])">
            <summary>
            移除指定的列
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ISourceTable.Fill(MySoft.Data.FillRelation,System.String[])">
            <summary>
            将另一个表中的某字段值按字段关联后进行填充
            </summary>
            <param name="relation"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.ISourceTable.RowCount">
            <summary>
            获取数据行数
            </summary>
        </member>
        <member name="P:MySoft.Data.ISourceTable.ColumnCount">
            <summary>
            获取数据列数
            </summary>
        </member>
        <member name="P:MySoft.Data.ISourceTable.Item(System.Int32)">
            <summary>
            获取行
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.UpdateCreator">
            <summary>
            更新创建器
            </summary>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.NewCreator">
            <summary>
            创建一个新的更新器
            </summary>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.NewCreator(System.String)">
            <summary>
            创建一个新的更新器
            </summary>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.NewCreator(MySoft.Data.Table)">
            <summary>
            创建一个新的更新器
            </summary>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.NewCreator``1">
            <summary>
            创建一个新的更新器
            </summary>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.#ctor">
            <summary>
            实例化UpdateCreator
            </summary>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.#ctor(System.String)">
            <summary>
            实例化UpdateCreator
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.#ctor(MySoft.Data.Table)">
            <summary>
            实例化UpdateCreator
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.From``1">
            <summary>
            设置表信息
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.From(System.String)">
            <summary>
            设置表名
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.From(MySoft.Data.Table)">
            <summary>
            设置表信息
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.SetEntity``1(``0,System.Boolean)">
            <summary>
            设置表和实体信息
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddWhere(MySoft.Data.WhereClip)">
            <summary>
            添加一个条件
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddWhere(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            添加一个条件
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddWhere(MySoft.Data.Field,System.Object)">
            <summary>
            添加一个条件
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddWhere(System.String,System.Object)">
            <summary>
            添加一个条件
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(MySoft.Data.Field,System.Object)">
            <summary>
            添加一个数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(System.String,System.Object)">
            <summary>
            添加一个数据
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            添加一个数据字典
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(System.Collections.Generic.IDictionary{MySoft.Data.Field,System.Object})">
            <summary>
            添加一个数据字典
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(MySoft.Data.Field[],System.Object[])">
            <summary>
            添加一个数据
            </summary>
            <param name="fields"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.AddUpdate(System.String[],System.Object[])">
            <summary>
            添加一个数据
            </summary>
            <param name="fieldNames"></param>
            <param name="values"></param>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.RemoveUpdate(System.String[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.UpdateCreator.RemoveUpdate(MySoft.Data.Field[])">
            <summary>
            移除指定的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.UpdateCreator.Table">
            <summary>
            返回table
            </summary>
        </member>
        <member name="P:MySoft.Data.UpdateCreator.Where">
            <summary>
            返回条件
            </summary>
        </member>
        <member name="T:MySoft.Data.SourceReader">
            <summary>
            自定义数据记录
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceReader.#ctor(System.Data.IDataReader)">
            <summary>
            初始化DbReader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MySoft.Data.SourceReader.Read">
            <summary>
            读取下一条数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.NextResult">
            <summary>
            返回下一结果集
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.Close">
            <summary>
            关闭DbReader
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceReader.IsDBNull(System.Int32)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue(System.Int32)">
            <summary>
            返回object
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue``1(System.Int32)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.IsDBNull(System.String)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue(System.String)">
            <summary>
            返回object
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue``1(System.String)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetString(System.String)">
            <summary>
            获取string
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetBytes(System.String)">
            <summary>
            获取byte[]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt16(System.String)">
            <summary>
            获取short
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt32(System.String)">
            <summary>
            获取int
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt64(System.String)">
            <summary>
            获取long
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDecimal(System.String)">
            <summary>
            获取decimal
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDouble(System.String)">
            <summary>
            获取double
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetFloat(System.String)">
            <summary>
            获取float
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetByte(System.String)">
            <summary>
            获取byte
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetBoolean(System.String)">
            <summary>
            获取bool
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDateTime(System.String)">
            <summary>
            获取DateTime
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetGuid(System.String)">
            <summary>
            获取Guid
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.IsDBNull(MySoft.Data.Field)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue(MySoft.Data.Field)">
            <summary>
            返回object
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetValue``1(MySoft.Data.Field)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetString(MySoft.Data.Field)">
            <summary>
            获取string
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetBytes(MySoft.Data.Field)">
            <summary>
            获取byte[]
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt16(MySoft.Data.Field)">
            <summary>
            获取short
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt32(MySoft.Data.Field)">
            <summary>
            获取int
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetInt64(MySoft.Data.Field)">
            <summary>
            获取long
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDecimal(MySoft.Data.Field)">
            <summary>
            获取decimal
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDouble(MySoft.Data.Field)">
            <summary>
            获取double
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetFloat(MySoft.Data.Field)">
            <summary>
            获取float
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetByte(MySoft.Data.Field)">
            <summary>
            获取byte
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetBoolean(MySoft.Data.Field)">
            <summary>
            获取bool
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetDateTime(MySoft.Data.Field)">
            <summary>
            获取DateTime
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.GetGuid(MySoft.Data.Field)">
            <summary>
            获取Guid
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.ConvertTo``1">
            <summary>
            返回指定类型的List
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.ConvertTo``2">
            <summary>
            返回另一类型的列表(输入为类、输出为接口，用于实体的解耦)
            </summary>
            <typeparam name="TOutput"></typeparam>
            <typeparam name="IOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceReader.ConvertAll``1(System.Converter{MySoft.Data.IRowReader,``0})">
            <summary>
            通过委托来创建实体
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceReader.FieldCount">
            <summary>
            获取字段数
            </summary>
        </member>
        <member name="P:MySoft.Data.SourceReader.OriginalData">
            <summary>
            获取当前DataSource
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceReader.Item(System.Int32)">
            <summary>
            按索引获取值
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceReader.Item(System.String)">
            <summary>
            按名称获取值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.Design.DescriptionAttribute">
            <summary>
            字段描述信息
            </summary>
        </member>
        <member name="T:MySoft.Data.TableRelation`1">
            <summary>
            关系表，可以用来存储关联信息
            </summary>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.LeftJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            左关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.RightJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            右关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.InnerJoin``1(MySoft.Data.Table,MySoft.Data.WhereClip)">
            <summary>
            内关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.LeftJoin``1(MySoft.Data.WhereClip)">
            <summary>
            左关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.RightJoin``1(MySoft.Data.WhereClip)">
            <summary>
            右关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.InnerJoin``1(MySoft.Data.WhereClip)">
            <summary>
            内关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.LeftJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            左关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.RightJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            右关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.InnerJoin``1(System.String,MySoft.Data.WhereClip)">
            <summary>
            内关联
            </summary>
            <param name="table"></param>
            <param name="onWhere"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.SubQuery">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.SubQuery(System.String)">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.SubQuery``1">
            <summary>
            生成一个子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.SubQuery``1(System.String)">
            <summary>
            生成一个带别名的子查询
            </summary>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.Where(MySoft.Data.WhereClip)">
            <summary>
            进行条件操作
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.OrderBy(MySoft.Data.OrderByClip)">
            <summary>
            进行排序操作
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.GroupBy(MySoft.Data.GroupByClip)">
            <summary>
            进行分组操作
            </summary>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.TableRelation`1.Select(MySoft.Data.Field[])">
            <summary>
            进行查询操作
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.DbField">
            <summary>
            数据库字段
            </summary>
        </member>
        <member name="P:MySoft.Data.DbField.Name">
            <summary>
            返回原始字段名称
            </summary>
        </member>
        <member name="M:MySoft.Data.IProvider.SetDbProvider(MySoft.Data.DbProvider,MySoft.Data.DbTrans)">
            <summary>
            设置驱动
            </summary>
            <param name="dbProvider"></param>
            <param name="dbTran"></param>
        </member>
        <member name="T:MySoft.Data.CustomField">
            <summary>
            系统字段
            </summary>
        </member>
        <member name="M:MySoft.Data.CustomField.MySoft#Data#IProvider#SetDbProvider(MySoft.Data.DbProvider,MySoft.Data.DbTrans)">
            <summary>
            处理qString;
            </summary>
            <param name="dbProvider"></param>
            <param name="dbTran"></param>
        </member>
        <member name="P:MySoft.Data.CustomField.Name">
            <summary>
            重载名称
            </summary>
        </member>
        <member name="T:MySoft.Data.CustomField`1">
            <summary>
            系统字段
            </summary>
        </member>
        <member name="M:MySoft.Data.CustomField`1.MySoft#Data#IProvider#SetDbProvider(MySoft.Data.DbProvider,MySoft.Data.DbTrans)">
            <summary>
            处理qString;
            </summary>
            <param name="dbProvider"></param>
            <param name="dbTran"></param>
        </member>
        <member name="P:MySoft.Data.CustomField`1.Name">
            <summary>
            重载名称
            </summary>
        </member>
        <member name="T:MySoft.Data.DataHelper">
            <summary>
            数据服务类
            </summary>
        </member>
        <member name="M:MySoft.Data.DataHelper.CloneObject``1(``0)">
            <summary>
            克隆对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.ConvertType``2(``0)">
            <summary>
            从对象obj中获取值传给当前实体,TOutput必须为class或接口
            TInput可以为class、NameValueCollection、IDictionary、IRowReader、DataRow
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.IsNullOrEmpty(MySoft.Data.WhereClip)">
            <summary>
            判断WhereClip是否为null或空
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.IsNullOrEmpty(MySoft.Data.OrderByClip)">
            <summary>
            判断OrderByClip是否为null或空
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.IsNullOrEmpty(MySoft.Data.GroupByClip)">
            <summary>
            判断GroupByClip是否为null或空
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.FormatValue(System.Object)">
            <summary>
            格式化数据为数据库通用格式
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DataHelper.CreateFieldValue(MySoft.Data.Field[],System.Object[],System.Boolean)">
            <summary>
            创建一个FieldValue列表
            </summary>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.Design.PrimaryKeyAttribute">
            <summary>
            表示主键
            </summary>
        </member>
        <member name="T:MySoft.Data.Design.SequenceAttribute">
            <summary>
            定义自增长列
            </summary>
        </member>
        <member name="T:MySoft.Data.WhereClip">
            <summary>
            条件构造器
            </summary>
        </member>
        <member name="F:MySoft.Data.WhereClip.None">
            <summary>
            默认的无条件对象
            </summary>
        </member>
        <member name="M:MySoft.Data.WhereClip.#ctor">
            <summary>
            自定义一个Where条件
            </summary>
        </member>
        <member name="M:MySoft.Data.WhereClip.#ctor(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            自定义一个Where条件
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:MySoft.Data.WhereClip.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            自定义一个Where条件
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:MySoft.Data.WhereClip.op_True(MySoft.Data.WhereClip)">
            <summary>
            
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.op_False(MySoft.Data.WhereClip)">
            <summary>
            
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.op_LogicalNot(MySoft.Data.WhereClip)">
            <summary>
            非
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.op_BitwiseAnd(MySoft.Data.WhereClip,MySoft.Data.WhereClip)">
            <summary>
            与
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.op_BitwiseOr(MySoft.Data.WhereClip,MySoft.Data.WhereClip)">
            <summary>
            或者
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.WhereClip.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.WhereClip.Value">
            <summary>
            Where的值
            </summary>
        </member>
        <member name="P:MySoft.Data.WhereClip.Parameters">
            <summary>
            返回参数列表
            </summary>
        </member>
        <member name="T:MySoft.Data.ArrayList`1">
            <summary>
            数组列表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Data.ArrayList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            实例化ArrayList
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:MySoft.Data.ArrayList`1.ToDictionary``1(MySoft.Data.Field)">
            <summary>
            返回字典
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="groupField"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ArrayList`1.ToDictionary``1(System.String)">
            <summary>
            返回字典
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ArrayList`1.Dispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="P:MySoft.Data.ArrayList`1.Item(System.Int32)">
            <summary>
            获取当前索引的对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.ArrayList`1.OriginalData">
            <summary>
            获取当前DataSource
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.SourceList`1">
            <summary>
            数组列表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MySoft.Data.SourceList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            实例化SourceList
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:MySoft.Data.SourceList`1.ToTable">
            <summary>
            转换成SourceTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.ConvertTo``1">
            <summary>
            返回另一类型的列表(用于实体的解耦))
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.FindAll(System.Predicate{`0})">
            <summary>
            查找符合条件的对象
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            返回指定数据条数
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            将当前类型转成另一种类型
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.ConvertTo``2">
            <summary>
            返回另一类型的列表(输入为类、输出为接口，用于实体的解耦)
            </summary>
            <typeparam name="TOutput"></typeparam>
            <typeparam name="IOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceList`1.GetDataTable(System.Type)">
            <summary>
             转换成DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.JoinType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="F:MySoft.Data.JoinType.LeftJoin">
            <summary>
            左链接
            </summary>
        </member>
        <member name="F:MySoft.Data.JoinType.RightJoin">
            <summary>
            右链接
            </summary>
        </member>
        <member name="F:MySoft.Data.JoinType.InnerJoin">
            <summary>
            内部链接
            </summary>
        </member>
        <member name="T:MySoft.Data.SqlSection">
            <summary>
            sql语句操作实现类
            </summary>
        </member>
        <member name="M:MySoft.Data.SqlSection.AddParameters(System.Data.Common.DbParameter[])">
            <summary>
            增加多个参数到当前Sql命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.AddParameters(MySoft.Data.SQLParameter[])">
            <summary>
            增加多个参数到当前Sql命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.AddParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            增加多个参数到当前Sql命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.AddInputParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            增加一个输入参数到当前Sql命令
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.AddInputParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            增加一个输入参数到当前Sql命令
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.Execute">
            <summary>
            执行当前Sql命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToSingle``1">
            <summary>
            执行当前Sql命令并返回一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToList``1">
            <summary>
            执行当前Sql命令并返回一个List列表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToListResult``1">
            <summary>
            执行当前Sql并返回一个列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToReader">
            <summary>
            执行当前Sql命令并返回一个DbReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToTable">
            <summary>
            执行当前Sql命令并返回一个DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToDataSet">
            <summary>
            执行当前Sql命令并返回一个DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToScalar">
            <summary>
            执行当前Sql命令并返回一个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SqlSection.ToScalar``1">
            <summary>
            执行当前
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.DbProviderType">
            <summary>
            驱动类型
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.Access">
            <summary>
            Access数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.SqlServer">
            <summary>
            SqlServer2000数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.SqlServer9">
            <summary>
            SqlServer2005数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.Oracle">
            <summary>
            Oracle数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.MySql">
            <summary>
            MySql数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.SQLite">
            <summary>
            SQLite数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.FireBird">
            <summary>
            FireBird数据库
            </summary>
        </member>
        <member name="F:MySoft.Data.DbProviderType.PostgreSQL">
            <summary>
            PostgreSQL数据库
            </summary>
        </member>
        <member name="T:MySoft.Data.DbProviderFactory">
            <summary>
            The db provider factory.
            </summary>
        </member>
        <member name="M:MySoft.Data.DbProviderFactory.CreateDbProvider(MySoft.Data.DbProviderType,System.String)">
            <summary>
            Creates the db provider.
            </summary>
            <param name="connectionString">Name of the conn STR.</param>
            <returns>The db provider.</returns>
        </member>
        <member name="M:MySoft.Data.DbProviderFactory.CreateDbProvider(System.String,System.String,System.String)">
            <summary>
            Creates the db provider.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="connectionString">The conn STR.</param>
            <returns>The db provider.</returns>
        </member>
        <member name="M:MySoft.Data.DbProviderFactory.CreateDbProvider(System.String)">
            <summary>
            Creates the db provider.
            </summary>
            <param name="connectName">Name of the conn STR.</param>
            <returns>The db provider.</returns>
        </member>
        <member name="M:MySoft.Data.DbProviderFactory.CreateDbProvider(System.String,MySoft.Data.DbProviderType)">
            <summary>
            Creates the db provider.
            </summary>
            <param name="connStrName">Name of the conn STR.</param>
            <returns>The db provider.</returns>
        </member>
        <member name="P:MySoft.Data.DbProviderFactory.Default">
            <summary>
            Gets the default db provider.
            </summary>
            <value>The default.</value>
        </member>
        <member name="T:MySoft.Data.DeleteCreator">
            <summary>
            删除创建器
            </summary>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.NewCreator">
            <summary>
            创建一个新的删除器
            </summary>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.NewCreator(System.String)">
            <summary>
            创建一个新的删除器
            </summary>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.NewCreator(MySoft.Data.Table)">
            <summary>
            创建一个新的删除器
            </summary>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.NewCreator``1">
            <summary>
            创建一个新的删除器
            </summary>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.#ctor">
            <summary>
            实例化DeleteCreator
            </summary>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.#ctor(System.String)">
            <summary>
            实例化DeleteCreator
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.#ctor(MySoft.Data.Table)">
            <summary>
            实例化DeleteCreator
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.From``1">
            <summary>
            设置表信息
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.From(System.String)">
            <summary>
            设置表名
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.From(MySoft.Data.Table)">
            <summary>
            设置表信息
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.AddWhere(MySoft.Data.WhereClip)">
            <summary>
            添加一个条件
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.AddWhere(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            添加一个条件
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.AddWhere(MySoft.Data.Field,System.Object)">
            <summary>
            添加一个条件
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySoft.Data.DeleteCreator.AddWhere(System.String,System.Object)">
            <summary>
            添加一个条件
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="P:MySoft.Data.DeleteCreator.Table">
            <summary>
            返回table
            </summary>
        </member>
        <member name="P:MySoft.Data.DeleteCreator.Where">
            <summary>
            返回条件
            </summary>
        </member>
        <member name="T:MySoft.Data.IExcutingLog">
            <summary>
            执行并输出日志的接口
            </summary>
        </member>
        <member name="M:MySoft.Data.IExcutingLog.BeginExcute(System.String,MySoft.Data.SQLParameter[])">
            <summary>
            开始执行命令，返回是否需要执行
            </summary>
            <param name="cmdText"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:MySoft.Data.IExcutingLog.EndExcute(System.String,MySoft.Data.SQLParameter[],System.Object,System.Int32)">
            <summary>
            结束执行命令
            </summary>
            <param name="cmdText"></param>
            <param name="parameter"></param>
            <param name="result"></param>
            <param name="elapsedTime"></param>
        </member>
        <member name="T:MySoft.Data.DataException">
            <summary>
            Data异常
            </summary>
        </member>
        <member name="M:MySoft.Data.DataException.#ctor(System.String)">
            <summary>
            普通异常的构造方法
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.Data.DataException.#ctor(System.String,System.Exception)">
            <summary>
            内嵌异常的构造方法
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:MySoft.Data.Design.ReadOnlyAttribute">
            <summary>
            表示只读，一般用于视图
            </summary>
        </member>
        <member name="T:MySoft.Data.FieldValueCollection`1">
            <summary>
            FieldValue集合
            </summary>
        </member>
        <member name="M:MySoft.Data.FieldValueCollection`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            实例化FieldValueCollection
            </summary>
            <param name="dictValues"></param>
        </member>
        <member name="M:MySoft.Data.FieldValueCollection`1.#ctor(System.Collections.Generic.IDictionary{MySoft.Data.Field,System.Object})">
            <summary>
            实例化FieldValueCollection
            </summary>
            <param name="dictValues"></param>
        </member>
        <member name="M:MySoft.Data.FieldValueCollection`1.ToList">
            <summary>
            返回列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.FieldValue">
            <summary>
            字段及值
            </summary>
        </member>
        <member name="M:MySoft.Data.FieldValue.#ctor(MySoft.Data.Field,System.Object)">
            <summary>
            实例化FieldValue
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="P:MySoft.Data.FieldValue.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:MySoft.Data.FieldValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:MySoft.Data.FieldValue.IsIdentity">
            <summary>
            是否标识列
            </summary>
        </member>
        <member name="P:MySoft.Data.FieldValue.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:MySoft.Data.FieldValue.IsChanged">
            <summary>
            是否更改
            </summary>
        </member>
        <member name="T:MySoft.Data.Validator`1">
            <summary>
            实体验证类
            </summary>
        </member>
        <member name="M:MySoft.Data.Validator`1.#ctor(`0)">
            <summary>
            实例化验证类
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:MySoft.Data.Validator`1.Check(System.Predicate{`0},System.String)">
            <summary>
            验证实体属性的有效性并返回错误列表(验证所有的列)
            </summary>
            <param name="predicate"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Validator`1.Check(System.Predicate{`0},MySoft.Data.Field,System.String)">
            <summary>
            验证实体属性的有效性并返回错误列表(只验证需要插入或更新的列)
            </summary>
            <param name="predicate"></param>
            <param name="field"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.Validator`1.Result">
            <summary>
            验证的结果
            </summary>
        </member>
        <member name="T:MySoft.Data.ProcSection">
            <summary>
            存储过程操作实现类
            </summary>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddParameters(System.Data.Common.DbParameter[])">
            <summary>
            增加多个参数到当前Proc命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddParameters(MySoft.Data.SQLParameter[])">
            <summary>
            增加多个参数到当前Proc命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            增加多个参数到当前Sql命令
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddInputParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            增加一个输入参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddInputParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            增加一个输入参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddOutputParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            增加一个输出参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddOutputParameter(System.String,System.Data.DbType)">
            <summary>
            增加一个输出参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddInputOutputParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            增加一个输入输出参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddInputOutputParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            增加一个输入输出参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddReturnValueParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            增加一个返回参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.AddReturnValueParameter(System.String,System.Data.DbType)">
            <summary>
            增加一个返回参数到当前Proc命令
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.Execute">
            <summary>
            执行当前Proc
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToSingle``1">
            <summary>
            执行当前Proc并返回一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToList``1">
            <summary>
            执行当前Proc并返回一个列表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToListResult``1">
            <summary>
            执行当前Proc并返回一个列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToReader">
            <summary>
            执行当前Proc并返回一个DbReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToTable">
            <summary>
            执行当前Proc并返回一个DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToDataSet">
            <summary>
            执行当前Sql命令并返回一个DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToScalar">
            <summary>
            执行当前Proc并返回一个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToScalar``1">
            <summary>
            执行当前Proc并返回一个值
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.Execute(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc,并输出参数值
            </summary>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToSingle``1(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个实体,并输出参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToList``1(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个列表,并输出参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToListResult``1(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc并返回一个列表
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToReader(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个DbReader,并输出参数值
            </summary>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToTable(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个DataTable,并输出参数值
            </summary>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToDataSet(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个DataSet,并输出参数值
            </summary>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToScalar(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个值,并输出参数值
            </summary>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.ProcSection.ToScalar``1(System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            执行当前Proc返回一个值,并输出参数值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="outValues"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.ProcSection.ReturnValue">
            <summary>
            获取返回值
            </summary>
        </member>
        <member name="T:MySoft.Data.DbHelper">
            <summary>
            数据库操作类
            </summary>
        </member>
        <member name="M:MySoft.Data.DbHelper.CreateCommand">
            <summary>
            创建命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.DbHelper.CreateParameter">
            <summary>
            创建参数
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.DbValue">
            <summary>
            数据库值
            </summary>
        </member>
        <member name="P:MySoft.Data.DbValue.DateTime">
            <summary>
            系统时间
            </summary>
        </member>
        <member name="P:MySoft.Data.DbValue.Default">
            <summary>
            返回默认值
            </summary>
        </member>
        <member name="T:MySoft.Data.EntityState">
            <summary>
            Entity状态
            </summary>
        </member>
        <member name="F:MySoft.Data.EntityState.Insert">
            <summary>
            插入状态
            </summary>
        </member>
        <member name="F:MySoft.Data.EntityState.Update">
            <summary>
            修改状态
            </summary>
        </member>
        <member name="T:MySoft.Data.EntityBase">
            <summary>
            Entity基类
            </summary>
        </member>
        <member name="T:MySoft.Data.IValidator">
            <summary>
            实体验证接口
            </summary>
        </member>
        <member name="M:MySoft.Data.IValidator.Validation">
            <summary>
            根据实体状态来验证实体的有效性，返回一组错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.As``1">
            <summary>
            转换成另一对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#ToRowReader">
            <summary>
            返回一个行阅读对象
            </summary>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#ToDictionary">
            <summary>
            返回字典对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#GetValue(System.String)">
            <summary>
            使用propertyName获取值信息
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#SetValue(System.String,System.Object)">
            <summary>
            使用propertyName获设置信息
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#GetValue(MySoft.Data.Field)">
            <summary>
            使用field获取值信息
            </summary>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#SetValue(MySoft.Data.Field,System.Object)">
            <summary>
            使用field获设置信息
            </summary>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#GetField(System.String)">
            <summary>
            通过属性获取字段
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#GetObjectState">
            <summary>
            获取对象状态
            </summary>
        </member>
        <member name="M:MySoft.Data.EntityBase.MySoft#Data#IEntityBase#CloneObject">
            <summary>
            克隆一个对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetSequence">
            <summary>
            返回标识列的名称（如Oracle中Sequence.nextval）
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetIdentityField">
            <summary>
            获取标识列
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetPrimaryKeyFields">
            <summary>
            获取主键列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetFields">
            <summary>
            获取字段列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetValues">
            <summary>
            获取属性值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetReadOnly">
            <summary>
            获取只读属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetTable">
            <summary>
            获取表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.SetValues(MySoft.Data.IRowReader)">
            <summary>
            设置属性值
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MySoft.Data.EntityBase.SetDbValues(MySoft.Data.IRowReader)">
            <summary>
            设置所有的值
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MySoft.Data.EntityBase.GetFieldValues">
            <summary>
            获取字段及值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.EntityBase.Validation">
            <summary>
            验证实体的有效性
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.EntityBase.SequenceName">
            <summary>
            获取系列的名称
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.PagingField">
            <summary>
            获取排序或分页字段
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.EntityBase.IdentityField">
            <summary>
            获取标识列
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#Table">
            <summary>
            表信息
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#Fields">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#FieldValues">
            <summary>
            字段及值信息
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#UpdateFields">
            <summary>
            更新字段
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#UpdateFieldValues">
            <summary>
            更新字段及值信息
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#IsUpdate">
            <summary>
            是否修改
            </summary>
        </member>
        <member name="P:MySoft.Data.EntityBase.MySoft#Data#IEntityInfo#IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="T:MySoft.Data.RelationPage`1">
            <summary>
            关系分页
            </summary>
        </member>
        <member name="M:MySoft.Data.RelationPage`1.ToReader(System.Int32)">
            <summary>
            返回ISourceReader
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationPage`1.ToList(System.Int32)">
            <summary>
            返回IArrayList
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationPage`1.ToTable(System.Int32)">
            <summary>
            返回DataTable
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.RelationPage`1.PageCount">
            <summary>
            返回页数
            </summary>
        </member>
        <member name="P:MySoft.Data.RelationPage`1.RowCount">
            <summary>
            返回记录数
            </summary>
        </member>
        <member name="T:MySoft.Data.ValidateResult">
            <summary>
            验证返回信息
            </summary>
        </member>
        <member name="F:MySoft.Data.ValidateResult.Default">
            <summary>
            默认的验证器
            </summary>
        </member>
        <member name="M:MySoft.Data.ValidateResult.#ctor">
            <summary>
            实例化ValidateResult
            </summary>
        </member>
        <member name="M:MySoft.Data.ValidateResult.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            实例化ValidateResult
            </summary>
            <param name="messages"></param>
        </member>
        <member name="P:MySoft.Data.ValidateResult.IsSuccess">
            <summary>
            验证是否成功
            </summary>
        </member>
        <member name="P:MySoft.Data.ValidateResult.Messages">
            <summary>
            消息列表
            </summary>
        </member>
        <member name="T:MySoft.Data.Entity">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="M:MySoft.Data.Entity.Attach(MySoft.Data.Field[])">
            <summary>
            将实体置为修改状态并移除指定的列
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.Detach(MySoft.Data.Field[])">
            <summary>
            将实体置为插入状态并移除指定的列
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.AttachAll(MySoft.Data.Field[])">
            <summary>
            将实体置为修改状态并移除指定的列(所有字段)
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.DetachAll(MySoft.Data.Field[])">
            <summary>
            将实体置为插入状态并移除指定的列(所有字段)
            </summary>
            <param name="removeFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.AttachSet(MySoft.Data.Field[])">
            <summary>
            将实体置为修改状态并更新指定的列
            </summary>
            <param name="setFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.DetachSet(MySoft.Data.Field[])">
            <summary>
            将实体置为插入状态并插入指定的列
            </summary>
            <param name="setFields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.OnPropertyValueChange(MySoft.Data.Field,System.Object,System.Object)">
            <summary>
            增加单个属性到修改列表
            </summary>
            <param name="field"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:MySoft.Data.Entity.AddFieldsToUpdate(System.Collections.Generic.IList{MySoft.Data.Field})">
            <summary>
            添加字段到修改列表
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.AddFieldsToUpdate(MySoft.Data.Field)">
            <summary>
            添加字段到修改列表
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.RemoveFieldsToUpdate(System.Collections.Generic.IList{MySoft.Data.Field})">
            <summary>
            移除字段到修改列表
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:MySoft.Data.Entity.RemoveFieldsToInsert(System.Collections.Generic.IList{MySoft.Data.Field})">
            <summary>
            移除字段到修改列表
            </summary>
            <param name="fields"></param>
        </member>
        <member name="T:MySoft.Data.RelationQuery`1">
            <summary>
            关系查询
            </summary>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.SetPagingField(System.String)">
            <summary>
            设置分页字段
            </summary>
            <param name="pagingFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.SetPagingField(MySoft.Data.Field)">
            <summary>
            设置分页字段
            </summary>
            <param name="pagingField"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.GetPage(System.Int32)">
            <summary>
            获取分页
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.ToScalar">
            <summary>
            返回首行首列值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.ToScalar``1">
            <summary>
            返回首行首列值
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.Count">
            <summary>
            返回记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.Exists">
            <summary>
            记录是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.ToSingle">
            <summary>
            返回T
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.ToList">
            <summary>
            返回IList
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.ToReader">
            <summary>
            返回ISourceReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.ToTable">
            <summary>
            返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.ToReader(System.Int32)">
            <summary>
            返回ISourceReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.ToList(System.Int32)">
            <summary>
            返回IList
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.ToTable(System.Int32)">
            <summary>
            返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.ToListPage(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.RelationQuery`1.ToTablePage(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.AllField`1">
            <summary>
            所有字段（特殊字段）
            </summary>
        </member>
        <member name="T:MySoft.Data.AllField">
            <summary>
            所有字段（特殊字段）
            </summary>
        </member>
        <member name="M:MySoft.Data.AllField.#ctor">
            <summary>
            All实例化
            </summary>
        </member>
        <member name="M:MySoft.Data.AllField.Remove(MySoft.Data.Field[])">
            <summary>
            选择被排除的列
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.AllField.Item(System.String)">
            <summary>
            从实体中获取属性转换成Field
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.AllField`1.#ctor">
            <summary>
            All实例化
            </summary>
        </member>
        <member name="P:MySoft.Data.AllField`1.Item(System.String)">
            <summary>
            通过属性返回字段
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.ExcludeField">
            <summary>
            用于被排除的Field
            </summary>
        </member>
        <member name="M:MySoft.Data.ExcludeField.#ctor(MySoft.Data.Field[])">
            <summary>
            实例化被排序的Field
            </summary>
            <param name="fields"></param>
        </member>
        <member name="T:MySoft.Data.ReturnValue`1">
            <summary>
            获取返回值的委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.FillRelation">
            <summary>
            表信息填充关系
            </summary>
        </member>
        <member name="M:MySoft.Data.FillRelation.#ctor">
            <summary>
            实例化填充关系
            </summary>
        </member>
        <member name="M:MySoft.Data.FillRelation.#ctor(MySoft.Data.SourceTable,System.String)">
            <summary>
            实例化填充关系
            </summary>
            <param name="source"></param>
            <param name="relationName"></param>
        </member>
        <member name="M:MySoft.Data.FillRelation.#ctor(MySoft.Data.SourceTable,System.String,System.String)">
            <summary>
            实例化填充关系
            </summary>
            <param name="source"></param>
            <param name="relationName"></param>
        </member>
        <member name="P:MySoft.Data.FillRelation.DataSource">
            <summary>
            填充用到的数据源
            </summary>
        </member>
        <member name="P:MySoft.Data.FillRelation.ParentName">
            <summary>
            关联的数据列
            </summary>
        </member>
        <member name="P:MySoft.Data.FillRelation.ChildName">
            <summary>
            关联的数据列
            </summary>
        </member>
        <member name="T:MySoft.Data.SourceTable">
            <summary>
            数据源
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceTable.#ctor">
            <summary>
            实例化SourceTable
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceTable.#ctor(System.String)">
            <summary>
            实例化SourceTable
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceTable.#ctor(System.Data.DataTable)">
            <summary>
            实例化SourceTable
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MySoft.Data.SourceTable.Select(System.String[])">
            <summary>
            选择某些列
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Filter(System.String)">
            <summary>
            过虑数据
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Sort(System.String)">
            <summary>
            排序数据
            </summary>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Remove(System.String[])">
            <summary>
            移除指定的列
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.SetOrdinal(System.String,System.Int32)">
            <summary>
            设置列的顺序
            </summary>
            <param name="name"></param>
            <param name="index"></param>
        </member>
        <member name="M:MySoft.Data.SourceTable.Add(System.String,System.Type)">
            <summary>
            添加列
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Add(System.String,System.Type,System.String)">
            <summary>
            添加列
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Rename(System.String,System.String)">
            <summary>
            字段更名
            </summary>
            <param name="oldname"></param>
            <param name="newname"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.Revalue``1(System.String,System.String,MySoft.Data.ReturnValue{``0})">
            <summary>
            按要求改变某列值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readName"></param>
            <param name="changeName"></param>
            <param name="revalue"></param>
        </member>
        <member name="M:MySoft.Data.SourceTable.Fill(MySoft.Data.FillRelation,System.String[])">
            <summary>
            将另一个表中的某字段值按字段关联后进行填充
            </summary>
            <param name="relation"></param>
            <param name="fillNames"></param>
        </member>
        <member name="M:MySoft.Data.SourceTable.ConvertTo``1">
            <summary>
            返回指定类型的List
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.ConvertTo``2">
            <summary>
            返回另一类型的列表(输入为类、输出为接口，用于实体的解耦)
            </summary>
            <typeparam name="TOutput"></typeparam>
            <typeparam name="IOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceTable.ConvertAll``1(System.Converter{MySoft.Data.IRowReader,``0})">
            <summary>
            返回指定类型的List
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceTable.OriginalData">
            <summary>
            获取当前DataSource
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceTable.RowCount">
            <summary>
            获取数据行数
            </summary>
        </member>
        <member name="P:MySoft.Data.SourceTable.ColumnCount">
            <summary>
            获取数据列数
            </summary>
        </member>
        <member name="P:MySoft.Data.SourceTable.Item(System.Int32)">
            <summary>
            获取行
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.SourceRow">
            <summary>
            数据行
            </summary>
        </member>
        <member name="M:MySoft.Data.SourceRow.#ctor(System.Data.DataRow)">
            <summary>
            实例化DbRow
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:MySoft.Data.SourceRow.IsDBNull(System.Int32)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue(System.Int32)">
            <summary>
            返回object
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue``1(System.Int32)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.IsDBNull(System.String)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue(System.String)">
            <summary>
            返回object
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue``1(System.String)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetString(System.String)">
            <summary>
            获取string
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetBytes(System.String)">
            <summary>
            获取byte[]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt16(System.String)">
            <summary>
            获取short
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt32(System.String)">
            <summary>
            获取int
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt64(System.String)">
            <summary>
            获取long
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDecimal(System.String)">
            <summary>
            获取decimal
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDouble(System.String)">
            <summary>
            获取double
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetFloat(System.String)">
            <summary>
            获取float
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetByte(System.String)">
            <summary>
            获取byte
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetBoolean(System.String)">
            <summary>
            获取bool
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDateTime(System.String)">
            <summary>
            获取DateTime
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetGuid(System.String)">
            <summary>
            获取Guid
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.IsDBNull(MySoft.Data.Field)">
            <summary>
            判断数据是否为null
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue(MySoft.Data.Field)">
            <summary>
            返回object
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetValue``1(MySoft.Data.Field)">
            <summary>
            返回指定类型的数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetString(MySoft.Data.Field)">
            <summary>
            获取string
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetBytes(MySoft.Data.Field)">
            <summary>
            获取byte[]
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt16(MySoft.Data.Field)">
            <summary>
            获取short
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt32(MySoft.Data.Field)">
            <summary>
            获取int
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetInt64(MySoft.Data.Field)">
            <summary>
            获取long
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDecimal(MySoft.Data.Field)">
            <summary>
            获取decimal
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDouble(MySoft.Data.Field)">
            <summary>
            获取double
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetFloat(MySoft.Data.Field)">
            <summary>
            获取float
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetByte(MySoft.Data.Field)">
            <summary>
            获取byte
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetBoolean(MySoft.Data.Field)">
            <summary>
            获取bool
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetDateTime(MySoft.Data.Field)">
            <summary>
            获取DateTime
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.SourceRow.GetGuid(MySoft.Data.Field)">
            <summary>
            获取Guid
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceRow.OriginalData">
            <summary>
            获取当前DataSource
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceRow.Item(System.Int32)">
            <summary>
            按索引获取值
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.Data.SourceRow.Item(System.String)">
            <summary>
            按名称获取值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.Data.Design.ViewEntity">
            <summary>
            只用于显示的实体
            </summary>
        </member>
        <member name="M:MySoft.Data.Design.ViewEntity.GetFields">
            <summary>
            重载GetFields
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Design.ViewEntity.GetValues">
            <summary>
            重载GetValues
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.Design.ViewEntity.SetValues(MySoft.Data.IRowReader)">
            <summary>
            重载SetValues
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:MySoft.Data.QuerySection">
            <summary>
            查询器
            </summary>
        </member>
        <member name="M:MySoft.Data.QuerySection.SetPagingField(System.String)">
            <summary>
            设置分页字段
            </summary>
            <param name="pagingFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.SetPagingField(MySoft.Data.Field)">
            <summary>
            设置分页字段
            </summary>
            <param name="pagingField"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.GetPage(System.Int32)">
            <summary>
            获取分页
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToScalar">
            <summary>
            返回首行首列值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToScalar``1">
            <summary>
            返回首行首列值
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.Count">
            <summary>
            返回记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.GetPageCount(System.Int32)">
            <summary>
            获取总页数
            </summary>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.Exists">
            <summary>
            记录是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToSingle``1">
            <summary>
            返回T
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToList``1">
            <summary>
            返回IList
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToReader">
            <summary>
            返回ISourceReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToTable">
            <summary>
            返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToReader(System.Int32)">
            <summary>
            返回ISourceReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToList``1(System.Int32)">
            <summary>
            返回IList
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToTable(System.Int32)">
            <summary>
            返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToListPage``1(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.Data.QuerySection.ToTablePage(System.Int32,System.Int32)">
            <summary>
            返回DataPage
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.QueryOptions">
            <summary>
            Query options
            </summary>
            <remarks>
            Oplog replay: 8 (internal replication use only - drivers should not implement)
            </remarks>
        </member>
        <member name="F:MongoDB.QueryOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:MongoDB.QueryOptions.TailableCursor">
            <summary>
            Tailable cursor
            </summary>
        </member>
        <member name="F:MongoDB.QueryOptions.SlaveOK">
            <summary>
            Slave OK
            </summary>
        </member>
        <member name="F:MongoDB.QueryOptions.NoCursorTimeout">
            <summary>
            No cursor timeout
            </summary>
        </member>
        <member name="T:MongoDB.MongoSymbol">
            <summary>
              Type to hold an interned string that maps to the bson symbol type.
            </summary>
        </member>
        <member name="M:MongoDB.MongoSymbol.#cctor">
            <summary>
            Initializes the <see cref="T:MongoDB.MongoSymbol"/> struct.
            </summary>
        </member>
        <member name="M:MongoDB.MongoSymbol.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoSymbol"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.MongoSymbol.CompareTo(MongoDB.MongoSymbol)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.CompareTo(System.String)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.Equals(MongoDB.MongoSymbol)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.Equals(System.String)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.op_Equality(MongoDB.MongoSymbol,MongoDB.MongoSymbol)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.op_Inequality(MongoDB.MongoSymbol,MongoDB.MongoSymbol)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.op_Implicit(MongoDB.MongoSymbol)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:MongoDB.MongoSymbol"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="s">The s.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.op_Implicit(System.String)~MongoDB.MongoSymbol">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:MongoDB.MongoSymbol"/>.
            </summary>
            <param name="s">The s.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.IsEmpty(MongoDB.MongoSymbol)">
            <summary>
            Determines whether the specified s is empty.
            </summary>
            <param name="s">The s.</param>
            <returns>
            	<c>true</c> if the specified s is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.SymbolEqual(System.String,System.String)">
            <summary>
            Symbols the equal.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:MongoDB.MongoSymbol.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:MongoDB.MongoSymbol.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:MongoDB.MongoSymbol.Empty">
            <summary>
            Gets or sets the empty.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:MongoDB.MongoSymbol.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MongoDB.GridFS.GridFileStream">
            <summary>
            Stream for reading and writing to a file in GridFS.
            </summary>
            <remarks>
            When using the stream for random io it is possible to produce chunks in the begining and middle of the
            file that are not full size followed by other chunks that are full size.  This only affects the md5 sum
            that is calculated on the file on close.  Because of this do not rely on the md5 sum of a file when doing
            random io.  Writing to the stream sequentially works fine and will produce a consistent md5.
            </remarks>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.#ctor(MongoDB.GridFS.GridFileInfo,MongoDB.IMongoCollection,MongoDB.IMongoCollection,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.GridFS.GridFileStream"/> class.
            </summary>
            <param name="gridfileinfo">The gridfileinfo.</param>
            <param name="files">The files.</param>
            <param name="chunks">The chunks.</param>
            <param name="access">The access.</param>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream into the specified array.  It will fill the array in starting at offset and
            adding count bytes returning the number of bytes read from the stream.
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies from the source array into the grid file.
            </summary>
            <param name="array">The array.</param>
            <param name="offset">A <see cref="T:System.Int32"/>  The offset within the source array.</param>
            <param name="count">A <see cref="T:System.Int32"/>  The number of bytes from within the source array to copy.</param>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.Flush">
            <summary>
            Flushes any changes to current chunk to the database.  It can be called in client code at any time or it
            will automatically be called on Close() and when the stream position moves off the bounds of the current
            chunk.
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek to any location in the stream.  Seeking past the end of the file is allowed.  Any writes to that
            location will cause the file to grow to that size.  Any holes that may be created from the seek will
            be zero filled on close.
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">
            A <see cref="T:System.Int64"/>
            </param>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.Close">
            <summary>
            Close the stream and flush any changes to the database.
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.MoveTo(System.Int64)">
            <summary>
            Moves the current position to the new position.  If this causes a new chunk to need to be loaded it will take
            care of flushing the buffer and loading a new chunk.
            </summary>
            <param name="position">
            A <see cref="T:System.Int32"/> designating where to go to.
            </param>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.LoadOrCreateChunk(System.Int32)">
            <summary>
            Loads a chunk from the chunks collection if it exists.  Otherwise it creates a blank chunk Document.
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.TruncateAfter(System.Int64)">
            <summary>
            Deletes all chunks after the specified position and clears out any extra bytes if the position doesn't fall on
            a chunk boundry.
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.EnsureNoHoles">
            <summary>
            Makes sure that at least a skelton chunk exists for all numbers.  If not the MD5 calculation will fail on a sparse file.
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFileStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:MongoDB.GridFS.GridFileStream.GridFileInfo">
            <summary>
            Gets or sets the grid file info.
            </summary>
            <value>The grid file info.</value>
        </member>
        <member name="P:MongoDB.GridFS.GridFileStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>true if the stream supports reading; otherwise, false.
            </returns>
        </member>
        <member name="P:MongoDB.GridFS.GridFileStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.
            </returns>
        </member>
        <member name="P:MongoDB.GridFS.GridFileStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.
            </returns>
        </member>
        <member name="P:MongoDB.GridFS.GridFileStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">
            A class derived from Stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="P:MongoDB.GridFS.GridFileStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.IIdGeneratorConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.IIdGeneratorConvention.GetGenerator(System.Type)">
            <summary>
            Gets the generator.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.IExtendedPropertiesConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.IExtendedPropertiesConvention.GetExtendedPropertiesMember(System.Type)">
            <summary>
            Gets the member representing extended properties if one exists.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DelegateDiscriminatorConvention">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.IDiscriminatorConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.IDiscriminatorConvention.GetDiscriminator(System.Type)">
            <summary>
            Gets the discriminator if one exists.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateDiscriminatorConvention.#ctor(System.Func{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DelegateDiscriminatorConvention"/> class.
            </summary>
            <param name="discriminator">The discriminator.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateDiscriminatorConvention.GetDiscriminator(System.Type)">
            <summary>
            Gets the discriminator.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DelegateCollectionNameConvention">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.ICollectionNameConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.ICollectionNameConvention.GetCollectionName(System.Type)">
            <summary>
            Gets the name of the collection.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateCollectionNameConvention.#ctor(System.Func{System.Type,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DelegateCollectionNameConvention"/> class.
            </summary>
            <param name="collectionName">Name of the collection.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateCollectionNameConvention.GetCollectionName(System.Type)">
            <summary>
            Gets the name of the collection.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Builders.MappingStoreBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MappingStoreBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Builders.MappingStoreBuilder"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MappingStoreBuilder.BuildMappingStore">
            <summary>
            Gets the mapping store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MappingStoreBuilder.DefaultProfile(System.Action{MongoDB.Configuration.Builders.AutoMappingProfileBuilder})">
            <summary>
            Configures the default profile.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MappingStoreBuilder.DefaultProfile(MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile)">
            <summary>
            Configures the default profile.
            </summary>
            <param name="defaultProfile">The default profile.</param>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MappingStoreBuilder.CustomProfile(System.Func{System.Type,System.Boolean},System.Action{MongoDB.Configuration.Builders.AutoMappingProfileBuilder})">
            <summary>
            Configures a custom profile.
            </summary>
            <param name="filter">The filter.</param>
            <param name="config">The config.</param>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MappingStoreBuilder.CustomProfile(System.Func{System.Type,System.Boolean},MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile)">
            <summary>
            Adds a custom profile.
            </summary>
            <param name="filter">The filter.</param>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MappingStoreBuilder.Map``1">
            <summary>
            Maps this instance.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MappingStoreBuilder.Map``1(System.Action{MongoDB.Configuration.Builders.ClassOverridesBuilder{``0}})">
            <summary>
            Maps the specified config.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="config">The config.</param>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MappingStoreBuilder.CreateOverrideableProfile(MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile)">
            <summary>
            Creates the overrideable profile.
            </summary>
            <param name="profile">The profile.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Builders.MappingStoreBuilder.FilteredProfile">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.CodeWScope">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.CodeWScope.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.CodeWScope"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.CodeWScope.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.CodeWScope"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:MongoDB.CodeWScope.#ctor(System.String,MongoDB.Document)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.CodeWScope"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="M:MongoDB.CodeWScope.Equals(MongoDB.CodeWScope)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.CodeWScope.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:MongoDB.CodeWScope.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MongoDB.CodeWScope.op_Equality(MongoDB.CodeWScope,MongoDB.CodeWScope)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.CodeWScope.op_Inequality(MongoDB.CodeWScope,MongoDB.CodeWScope)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:MongoDB.CodeWScope.Value">
            <summary>
              Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:MongoDB.CodeWScope.Scope">
            <summary>
              Gets or sets the scope.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="T:MongoDB.Mo">
            <summary>
            Staticly typed way of using MongoDB update modifiers.
            </summary>
        </member>
        <member name="T:MongoDB.Document">
            <summary>
            Description of Document.
            </summary>
        </member>
        <member name="M:MongoDB.Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Document"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Document.#ctor(System.Collections.Generic.IComparer{System.String})">
            <summary>
            Initialize a new instance of the <see cref="T:MongoDB.Document"/> class with an optional key sorter.
            </summary>
        </member>
        <member name="M:MongoDB.Document.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Document"/> class and
            add's the given values to it.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Document.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Document"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:MongoDB.Document.Get(System.String)">
            <summary>
            Gets the value of the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Document.Get``1(System.String)">
            <summary>
            Gets the typed value of the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Document.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:MongoDB.Document.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:MongoDB.Document.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:MongoDB.Document.System#Collections#Generic#IDictionary{System#String@System#Object}#Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:MongoDB.Document.Append(System.String,System.Object)">
            <summary>
            Appends the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Document.Set(System.String,System.Object)">
            <summary>
            Sets the value of the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Document.Insert(System.String,System.Object,System.Int32)">
            <summary>
            Adds an item to the Document at the specified position
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:MongoDB.Document.Prepend(System.String,System.Object)">
            <summary>
            Prepends the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>This document</returns>
        </member>
        <member name="M:MongoDB.Document.Merge(MongoDB.Document)">
            <summary>
            Merges the source document into this.
            </summary>
            <param name="source">The source.</param>
            <returns>This document</returns>
        </member>
        <member name="M:MongoDB.Document.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:MongoDB.Document.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:MongoDB.Document.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"/> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"/> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:MongoDB.Document.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"/> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"/> object.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IDictionary"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IDictionary"/> has a fixed size.
            </exception>
        </member>
        <member name="M:MongoDB.Document.Clear">
            <summary>
            Clears the contents of the <see cref="T:System.Collections.DictionaryBase"/> instance.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:MongoDB.Document.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="M:MongoDB.Document.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IDictionary"/> object is read-only.
            -or-
            The <see cref="T:System.Collections.IDictionary"/> has a fixed size.
            </exception>
        </member>
        <member name="M:MongoDB.Document.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.Document.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:MongoDB.Document.CopyTo(MongoDB.Document)">
            <summary>
            Copies to items to destinationDocument.
            </summary>
            <param name="destinationDocument">The destination document.</param>
        </member>
        <member name="M:MongoDB.Document.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:MongoDB.Document.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:MongoDB.Document.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:MongoDB.Document.Equals(MongoDB.Document)">
            <summary>
            Equalses the specified obj.
            </summary>
            <param name="document">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Document.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MongoDB.Document.GetValueHashCode(System.Object)">
            <summary>
            Gets the value hash code.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Document.GetArrayHashcode(System.Array)">
            <summary>
            Gets the array hashcode.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Document.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MongoDB.Document.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MongoDB.Document.ToDictionary">
            <summary>
            Toes the dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Document.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MongoDB.Document.EnsureKeyOrdering">
            <summary>
            Ensures the key ordering.
            </summary>
        </member>
        <member name="M:MongoDB.Document.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:MongoDB.Document.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:MongoDB.Document.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:MongoDB.Document.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:MongoDB.Document.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:MongoDB.Document.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:MongoDB.Document.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:MongoDB.Document.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:MongoDB.Document.Id">
            <summary>
            Gets or sets the mongo _id field.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MongoDB.Document.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:MongoDB.Document.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:MongoDB.Document.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:MongoDB.Document.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:MongoDB.Document.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:MongoDB.Document.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.Mo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Mo"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Mo.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Mo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Mo.Inc(System.String,System.Object)">
            <summary>
            Increments field by the number value. If field is present in the object, 
            otherwise sets field to the number value.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Mo.Set(System.String,System.Object)">
            <summary>
            Sets field to value.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            All datatypes are supported with $set.
            </remarks>
        </member>
        <member name="M:MongoDB.Mo.Unset(System.String)">
            <summary>
            Deletes a given field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
            <remarks>
            Supported version in MongoDB 1.3 and up.
            </remarks>
        </member>
        <member name="M:MongoDB.Mo.Unset(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes the given fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
            <remarks>
            Supported version in MongoDB 1.3 and up.
            </remarks>
        </member>
        <member name="M:MongoDB.Mo.Push(System.String,System.Object)">
            <summary>
            Appends value to field, if field is an existing array.
            Otherwise sets field to the array and add value if field is not present. 
            If field is present but is not an array, an error condition is raised.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Mo.PushAll(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Appends each value in values to field,
            if field is an existing array. 
            Otherwise sets field to the array values if field is not present.
            If field is present but is not an array, an error
            condition is raised.
            </summary>
            <param name="field">The field.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Mo.AddToSet(System.String,System.Object)">
            <summary>
            Adds value to the array only if its not in the array already.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Mo.AddToSet(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds values to the array only if its not in the array already.
            </summary>
            <param name="field">The field.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Mo.PopFirst(System.String)">
            <summary>
            Removes the first element in an array.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
            <remarks>
            Supported in MongoDB 1.1 and up.
            </remarks>
        </member>
        <member name="M:MongoDB.Mo.PopLast(System.String)">
            <summary>
            Removes the last element in an array.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
            <remarks>
            Supported in MongoDB 1.1 and up.
            </remarks>
        </member>
        <member name="M:MongoDB.Mo.Pull(System.String,System.Object)">
            <summary>
            Removes all occurrences of value from field, if field is an array.
            If field is present but is not an array, an error condition is raised.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Mo.PullAll(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Removes all occurrences of each value in values from field,
            if field is an array.
            If field is present but is not an array, an error condition is raised.
            </summary>
            <param name="field">The field.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Mo.op_BitwiseAnd(MongoDB.Mo,MongoDB.Mo)">
            <summary>
            Implements the operator &amp;. This is used for conjunctions.
            </summary>
            <param name="modifier1">The modifier1.</param>
            <param name="modifier2">The modifier2.</param>
            <returns>The result of the modifier.</returns>
        </member>
        <member name="M:MongoDB.Linq.Translators.PartialEvaluator.Evaluate(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="canBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>
            A new tree with sub-trees evaluated and replaced.
            </returns>
        </member>
        <member name="T:MongoDB.Linq.Translators.PartialEvaluator.SubtreeEvaluator">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.LinqExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.LinqExtensions.Count``1(MongoDB.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Counts the specified collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.LinqExtensions.Delete``1(MongoDB.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Deletes the documents according to the selector.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:MongoDB.LinqExtensions.Remove``1(MongoDB.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Removes the specified collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:MongoDB.LinqExtensions.Find``1(MongoDB.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Finds the selectorified collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.LinqExtensions.FindOne``1(MongoDB.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Finds the one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.LinqExtensions.Linq``1(MongoDB.IMongoCollection{``0})">
            <summary>
            Linqs the selectorified collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.LinqExtensions.Linq(MongoDB.IMongoCollection)">
            <summary>
            Linqs the selectorified collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.LinqExtensions.Update``1(MongoDB.IMongoCollection{``0},System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Updates the selectorified collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:MongoDB.LinqExtensions.Update``1(MongoDB.IMongoCollection{``0},System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Updates the selectorified collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="safeMode">if set to <c>true</c> [safe mode].</param>
        </member>
        <member name="M:MongoDB.LinqExtensions.Update``1(MongoDB.IMongoCollection{``0},System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.UpdateFlags)">
            <summary>
            Updates the selectorified collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:MongoDB.LinqExtensions.Update``1(MongoDB.IMongoCollection{``0},System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.UpdateFlags,System.Boolean)">
            <summary>
            Updates the selectorified collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="flags">The flags.</param>
            <param name="safeMode">if set to <c>true</c> [safe mode].</param>
        </member>
        <member name="M:MongoDB.LinqExtensions.UpdateAll``1(MongoDB.IMongoCollection{``0},System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Updates all.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:MongoDB.LinqExtensions.UpdateAll``1(MongoDB.IMongoCollection{``0},System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Updates all.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="safeMode">if set to <c>true</c> [safe mode].</param>
        </member>
        <member name="M:MongoDB.LinqExtensions.GetQuery``1(MongoDB.IMongoCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.IMongo">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.IMongo.GetDatabase(System.String)">
            <summary>
            Gets the named database.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongo.Connect">
            <summary>
            Connects this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongo.TryConnect">
            <summary>
            Tries to connect to server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongo.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MongoDB.IMongo.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MongoDB.IMongo.Item(System.String)">
            <summary>
            Gets the <see cref="T:MongoDB.IMongoDatabase"></see> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:MongoDB.GridFS.GridFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.#ctor(MongoDB.IMongoDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.GridFS.GridFile"/> class.
            </summary>
            <param name="db">The db.</param>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.#ctor(MongoDB.IMongoDatabase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.GridFS.GridFile"/> class.
            </summary>
            <param name="db">The db.</param>
            <param name="bucket">The bucket.</param>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.ListFiles">
            <summary>
            Lists the files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.ListFiles(MongoDB.Document)">
            <summary>
            Lists the files.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Copy(System.String,System.String)">
            <summary>
            Copies one file to another.  The destination file must not exist or an IOException will be thrown.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">Source file not found.</exception>
            <exception cref="T:System.IO.IOException">Destination file already exists.</exception>
            <exception cref="T:MongoDB.MongoCommandException">A database error occurred executing the copy function.</exception>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Create(System.String)">
            <summary>
            Creates the specified filename.
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Create(System.String,System.IO.FileMode)">
            <summary>
            Creates the specified filename.
            </summary>
            <param name="filename">The filename.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Create(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Creates the specified filename.
            </summary>
            <param name="filename">The filename.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified filename.
            </summary>
            <param name="filename">The filename.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.OpenRead(System.String)">
            <summary>
            Opens the read.
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.OpenWrite(System.String)">
            <summary>
            Opens the write.
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Delete(System.Object)">
            <summary>
            Permanently removes a file from the database. 
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Delete(System.String)">
            <summary>
            Permanently removes a file from the database. 
            </summary>        
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Delete(MongoDB.Document)">
            <summary>
            Permanently removes all files from the database that match the query. 
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Exists(System.String)">
            <summary>
            Gets a value indicating whether the file exists.
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Exists(System.Object)">
            <summary>
            Gets a value indicating whether the file exists.
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Move(System.String,System.String)">
            <summary>
            Moves the specified SRC.
            </summary>
            <param name="src">The SRC.</param>
            <param name="dest">The dest.</param>
        </member>
        <member name="M:MongoDB.GridFS.GridFile.Move(System.Object,System.String)">
            <summary>
            Moves the specified id.
            </summary>
            <param name="id">The id.</param>
            <param name="dest">The dest.</param>
        </member>
        <member name="P:MongoDB.GridFS.GridFile.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MongoDB.GridFS.GridFile.Files">
            <summary>
            Gets the files.
            </summary>
            <value>The files.</value>
        </member>
        <member name="P:MongoDB.GridFS.GridFile.Chunks">
            <summary>
            Gets the chunks.
            </summary>
            <value>The chunks.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Model.ClassMapBase">
            <summary>
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Model.IClassMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.IClassMap.CreateInstance">
            <summary>
            Creates an instance of the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.IClassMap.GetClassMapFromDiscriminator(System.Object)">
            <summary>
            Gets the class map from the specified discriminator.
            </summary>
            <param name="discriminator">The discriminator.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.IClassMap.GetId(System.Object)">
            <summary>
            Gets the id of the specified entitiy.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.IClassMap.GetMemberMapFromAlias(System.String)">
            <summary>
            Gets the member map that corresponds to the specified alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.IClassMap.GetMemberMapFromMemberName(System.String)">
            <summary>
            Gets the member map that corresponds to the specified member name.
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.ClassType">
            <summary>
            Gets the type of class to which this map pertains.
            </summary>
            <value>The type of the class.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.CollectionName">
            <summary>
            Gets the name of the collection.
            </summary>
            <value>The name of the collection.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.Discriminator">
            <summary>
            Gets the discriminator.
            </summary>
            <value>The discriminator.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.DiscriminatorAlias">
            <summary>
            Gets the alias used to store the discriminator.
            </summary>
            <value>The discriminator alias.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.ExtendedPropertiesMap">
            <summary>
            Gets the extended properties map.
            </summary>
            <value>The extended properties map.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.HasDiscriminator">
            <summary>
            Gets a value indicating whether this instance has discriminator.
            </summary>
            <value>
            	<c>true</c> if this instance has discriminator; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.HasExtendedProperties">
            <summary>
            Gets a value indicating whether the class map has extended properties.
            </summary>
            <value>
            	<c>true</c> if the class map has extended properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.HasId">
            <summary>
            Gets a value indicating whether the class map has an id.
            </summary>
            <value><c>true</c> if the class map has an id; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.IdMap">
            <summary>
            Gets the id map.
            </summary>
            <value>The id map.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.IsPolymorphic">
            <summary>
            Gets a value indicating whether this class map is polymorphic.
            </summary>
            <value>
            	<c>true</c> if this class map is polymorphic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.IsSubClass">
            <summary>
            Gets a value indicating whether this class map is a subclass.
            </summary>
            <value>
            	<c>true</c> if this class map is a subclass; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.MemberMaps">
            <summary>
            Gets the member maps.
            </summary>
            <value>The member maps.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IClassMap.SubClassMaps">
            <summary>
            Gets the sub class maps.
            </summary>
            <value>The sub class maps.</value>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ClassMapBase.#ctor(System.Type)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Model.ClassMapBase"/> class.
            </summary>
            <param name="classType">Type of the entity.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ClassMapBase.CreateInstance">
            <summary>
              Creates an instance of the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ClassMapBase.GetClassMapFromDiscriminator(System.Object)">
            <summary>
              Gets the class map from discriminator.
            </summary>
            <param name = "discriminator">The discriminator.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ClassMapBase.GetId(System.Object)">
            <summary>
              Gets the id of the specified entitiy.
            </summary>
            <param name = "entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ClassMapBase.GetMemberMapFromAlias(System.String)">
            <summary>
              Gets the member map from alias.
            </summary>
            <param name = "propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ClassMapBase.GetMemberMapFromMemberName(System.String)">
            <summary>
              Gets the member map that corresponds to the specified member name.
            </summary>
            <param name = "memberName">Name of the member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ClassMapBase.AddMemberMap(MongoDB.Configuration.Mapping.Model.PersistentMemberMap)">
            <summary>
              Adds the member map.
            </summary>
            <param name = "memberMap">The member map.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ClassMapBase.AddMemberMaps(System.Collections.Generic.IEnumerable{MongoDB.Configuration.Mapping.Model.PersistentMemberMap})">
            <summary>
              Adds the member maps.
            </summary>
            <param name = "memberMaps">The member maps.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ClassMapBase.AddSubClassMap(MongoDB.Configuration.Mapping.Model.SubClassMap)">
            <summary>
              Adds the sub class map.
            </summary>
            <param name = "subClassMap">The sub class map.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ClassMapBase.AddSubClassMaps(System.Collections.Generic.IEnumerable{MongoDB.Configuration.Mapping.Model.SubClassMap})">
            <summary>
              Adds the sub class maps.
            </summary>
            <param name = "subClassMaps">The sub class maps.</param>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.ClassType">
            <summary>
              Gets the type of class to which this map pertains.
            </summary>
            <value>The type of the class.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.CollectionName">
            <summary>
              Gets the name of the collection.
            </summary>
            <value>The name of the collection.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.Discriminator">
            <summary>
              Gets the discriminator.
            </summary>
            <value>The discriminator.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.DiscriminatorAlias">
            <summary>
              Gets the alias used to store the discriminator.
            </summary>
            <value>The discriminator alias.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.ExtendedPropertiesMap">
            <summary>
              Gets the extended properties map.
            </summary>
            <value>The extended properties map.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.HasDiscriminator">
            <summary>
              Gets a value indicating whether this instance has discriminator.
            </summary>
            <value>
              <c>true</c> if this instance has discriminator; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.HasExtendedProperties">
            <summary>
              Gets a value indicating whether the class map has extended properties.
            </summary>
            <value>
              <c>true</c> if the class map has extended properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.HasId">
            <summary>
              Gets a value indicating whether the class map has an id.
            </summary>
            <value><c>true</c> if the class map has an id; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.IdMap">
            <summary>
              Gets the id map.
            </summary>
            <value>The id map.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.IsPolymorphic">
            <summary>
              Gets a value indicating whether this class map is polymorphic.
            </summary>
            <value>
              <c>true</c> if this class map is polymorphic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.IsSubClass">
            <summary>
              Gets a value indicating whether this class map is a subclass.
            </summary>
            <value>
              <c>true</c> if this class map is a subclass; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.MemberMaps">
            <summary>
              Gets the member maps.
            </summary>
            <value>The member maps.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMapBase.SubClassMaps">
            <summary>
              Gets the sub class maps.
            </summary>
            <value>The sub class maps.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.FindExtendedPropertiesMember(System.Type)">
            <summary>
            Finds the extended properties member.
            </summary>
            <param name="classType">Type of the class.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.FindIdMember(System.Type)">
            <summary>
            Gets the id member for the class type.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.FindMembers(System.Type)">
            <summary>
            Finds the members to map for the class type.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.GetAlias(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the alias for the specified member.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.GetCollectionName(System.Type)">
            <summary>
            Gets the collection name for the class type.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.GetCollectionAdapter(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the collection adapter.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <param name="memberReturnType">Type of the member return.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.GetCollectionElementType(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the type of the collection element.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <param name="memberReturnType">Type of the member return.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.GetDefaultValue(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the default value.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.GetDictionaryAdapter(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the dictionary adadpter.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <param name="memberReturnType">Type of the member return.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.GetDiscriminator(System.Type)">
            <summary>
            Gets the descriminator for the class type.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.GetDiscriminatorAlias(System.Type)">
            <summary>
            Gets the discriminator alias.
            </summary>
            <param name="classType">Type of the class.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.GetIdGenerator(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the id generator for the member.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.GetIdUnsavedValue(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the unsaved value for the id.
            </summary>
            <param name="classType">Type of the entity.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.GetPersistDefaultValue(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets a value indicating whether the member should be persisted if it is it's default value.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile.IsSubClass(System.Type)">
            <summary>
            Indicates whether the class type is a sub class.
            </summary>
            <param name="classType">Type of the class.</param>
            <returns>
            	<c>true</c> if the classType is a sub class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.ClassOverridesMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.ClassOverridesMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Auto.ClassOverridesMap"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.ClassOverridesMap.GetOverridesForType(System.Type)">
            <summary>
            Gets the class overrides for the type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.ClassOverridesMap.HasOverridesForType(System.Type)">
            <summary>
            Determines whether [has overrides for type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if [has overrides for type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.ClassOverrides">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.ClassOverrides.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Auto.ClassOverrides"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.ClassOverrides.GetOverridesFor(System.Reflection.MemberInfo)">
            <summary>
            Gets the overrides for.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.ClassOverrides.CollectionName">
            <summary>
            Gets or sets the name of the collection.
            </summary>
            <value>The name of the collection.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.ClassOverrides.IdOverrides">
            <summary>
            Gets or sets the id overrides.
            </summary>
            <value>The id overrides.</value>
        </member>
        <member name="T:MongoDB.Configuration.CollectionAdapters.GenericListCollectionAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.CollectionAdapters.ICollectionAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.CollectionAdapters.ICollectionAdapter.CreateCollection(System.Type,System.Object[])">
            <summary>
            Adds the element to instance.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="elements">The elements.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.CollectionAdapters.ICollectionAdapter.GetElementsFromCollection(System.Object)">
            <summary>
            Gets the elements from collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.CollectionAdapters.GenericListCollectionAdapter.CreateCollection(System.Type,System.Object[])">
            <summary>
            Adds the element to instance.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="elements">The elements.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.CollectionAdapters.GenericListCollectionAdapter.GetElementsFromCollection(System.Object)">
            <summary>
            Gets the elements from collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Attributes.MongoDefaultAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Attributes.MongoDefaultAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Attributes.MongoDefaultAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Attributes.MongoDefaultAttribute.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Attributes.MongoDefaultAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="persistDefaultValue">if set to <c>true</c> [persist default value].</param>
        </member>
        <member name="P:MongoDB.Attributes.MongoDefaultAttribute.PersistDefaultValue">
            <summary>
            Gets or sets a value indicating whether the default value should be persisted.
            </summary>
            <value><c>true</c> if [persist default value]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MongoDB.Attributes.MongoDefaultAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MongoDB.Serialization.IObjectDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Serialization.IObjectDescriptor.GenerateId(System.Object)">
            <summary>
            Generates the id.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.IObjectDescriptor.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="mongoName">Name of the mongo.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.IObjectDescriptor.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="mongoName">Name of the mongo.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Serialization.IObjectDescriptor.GetMongoPropertyNames(System.Object)">
            <summary>
            Gets the mongo property names.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Protocol.QueryMessage">
            <summary>
            The OP_QUERY message is used to query the database for documents in a collection.
            </summary>
            <remarks>
            struct {
                MsgHeader header;                 // standard message header
                int32     opts;                   // query options.  See below for details.
                cstring   fullCollectionName;     // "dbname.collectionname"
                int32     numberToSkip;           // number of documents to skip when returning results
                int32     numberToReturn;         // number of documents to return in the first OP_REPLY
                BSON      query ;                 // query object.  See below for details.
                [ BSON      returnFieldSelector; ]  // OPTIONAL : selector indicating the fields to return.  See below for details.
            }
            </remarks>
        </member>
        <member name="T:MongoDB.Protocol.RequestMessageBase">
            <summary>
              Description of Message.
            </summary>
        </member>
        <member name="T:MongoDB.Protocol.MessageBase">
            <summary>
            Base class for all raw messages
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.MessageBase.MaximumMessageSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:MongoDB.Protocol.MessageBase.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="T:MongoDB.Protocol.IRequestMessage">
            <summary>
            A Message that is to be written to the database.
            </summary>
        </member>
        <member name="M:MongoDB.Protocol.IRequestMessage.Write(System.IO.Stream)">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:MongoDB.Protocol.RequestMessageBase.#ctor(MongoDB.Bson.BsonWriterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.RequestMessageBase"/> class.
            </summary>
            <param name="bsonWriterSettings">The bson writer settings.</param>
        </member>
        <member name="M:MongoDB.Protocol.RequestMessageBase.Write(System.IO.Stream)">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:MongoDB.Protocol.RequestMessageBase.WriteBody(MongoDB.Bson.BsonWriter)">
            <summary>
            Writes the body.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:MongoDB.Protocol.RequestMessageBase.CalculateBodySize(MongoDB.Bson.BsonWriter)">
            <summary>
            Calculates the size of the body.
            </summary>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Protocol.QueryMessage.#ctor(MongoDB.Bson.BsonWriterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.QueryMessage"/> class.
            </summary>
            <param name="bsonWriterSettings">The bson writer settings.</param>
        </member>
        <member name="M:MongoDB.Protocol.QueryMessage.#ctor(MongoDB.Bson.BsonWriterSettings,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.QueryMessage"/> class.
            </summary>
            <param name="bsonWriterSettings">The bson writer settings.</param>
            <param name="query">The query.</param>
            <param name="fullCollectionName">Full name of the collection.</param>
        </member>
        <member name="M:MongoDB.Protocol.QueryMessage.#ctor(MongoDB.Bson.BsonWriterSettings,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.QueryMessage"/> class.
            </summary>
            <param name="bsonWriterSettings">The bson writer settings.</param>
            <param name="query">The query.</param>
            <param name="fullCollectionName">Full name of the collection.</param>
            <param name="numberToReturn">The number to return.</param>
            <param name="numberToSkip">The number to skip.</param>
        </member>
        <member name="M:MongoDB.Protocol.QueryMessage.#ctor(MongoDB.Bson.BsonWriterSettings,System.Object,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.QueryMessage"/> class.
            </summary>
            <param name="bsonWriterSettings">The bson writer settings.</param>
            <param name="query">The query.</param>
            <param name="fullCollectionName">Full name of the collection.</param>
            <param name="numberToReturn">The number to return.</param>
            <param name="numberToSkip">The number to skip.</param>
            <param name="returnFieldSelector">The return field selector.</param>
        </member>
        <member name="M:MongoDB.Protocol.QueryMessage.WriteBody(MongoDB.Bson.BsonWriter)">
            <summary>
            Writes the body.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:MongoDB.Protocol.QueryMessage.CalculateBodySize(MongoDB.Bson.BsonWriter)">
            <summary>
            Calculates the size of the body.
            </summary>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Protocol.QueryMessage.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:MongoDB.Protocol.QueryMessage.FullCollectionName">
            <summary>
            Gets or sets the full name of the collection.
            </summary>
            <value>The full name of the collection.</value>
        </member>
        <member name="P:MongoDB.Protocol.QueryMessage.NumberToSkip">
            <summary>
            Gets or sets the number to skip.
            </summary>
            <value>The number to skip.</value>
        </member>
        <member name="P:MongoDB.Protocol.QueryMessage.NumberToReturn">
            <summary>
            Gets or sets the number to return.
            </summary>
            <value>The number to return.</value>
        </member>
        <member name="P:MongoDB.Protocol.QueryMessage.Query">
            <summary>
            Gets or sets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="P:MongoDB.Protocol.QueryMessage.ReturnFieldSelector">
            <summary>
            Gets or sets the return field selector.
            </summary>
            <value>The return field selector.</value>
        </member>
        <member name="T:MongoDB.Protocol.DeleteMessage">
            <summary>
            The OP_DELETE message is used to remove one or more messages from a collection.
            </summary>
            <remarks>
            struct {
                MsgHeader header;                 // standard message header
                int32     ZERO;                   // 0 - reserved for future use
                cstring   fullCollectionName;     // "dbname.collectionname"
                int32     ZERO;                   // 0 - reserved for future use
                BSON      selector;               // query object.  See below for details.
            }
            </remarks>
        </member>
        <member name="M:MongoDB.Protocol.DeleteMessage.#ctor(MongoDB.Bson.BsonWriterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.DeleteMessage"/> class.
            </summary>
            <param name="bsonWriterSettings">The bson writer settings.</param>
        </member>
        <member name="M:MongoDB.Protocol.DeleteMessage.WriteBody(MongoDB.Bson.BsonWriter)">
            <summary>
            Writes the body.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:MongoDB.Protocol.DeleteMessage.CalculateBodySize(MongoDB.Bson.BsonWriter)">
            <summary>
            Calculates the size of the body.
            </summary>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Protocol.DeleteMessage.FullCollectionName">
            <summary>
            Gets or sets the full name of the collection.
            </summary>
            <value>The full name of the collection.</value>
        </member>
        <member name="P:MongoDB.Protocol.DeleteMessage.Selector">
            <summary>
            Gets or sets the selector.
            </summary>
            <value>The selector.</value>
        </member>
        <member name="T:MongoDB.Op">
            <summary>
            Staticly typed way of using MongoDB query operators.
            </summary>
        </member>
        <member name="M:MongoDB.Op.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Op"/> class.
            </summary>
            <remarks>Only allow instantiation through static methods.</remarks>
        </member>
        <member name="M:MongoDB.Op.GreaterThan``1(``0)">
            <summary>
            Matches an object which is greater than the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.GreaterThanOrEqual``1(``0)">
            <summary>
            Matches an object which is greater than or equal to the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.LessThan``1(``0)">
            <summary>
            Matches an object which is less than the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.LessThanOrEqual``1(``0)">
            <summary>
            Matches an object which is less than or equal to the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.NotEqual``1(``0)">
            <summary>
            Matches an object which does not equal the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.In``1(``0[])">
            <summary>
            Matches an array which has one of the specified values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.NotIn``1(``0[])">
            <summary>
            Matches an array which does not have any of the specified values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.All``1(``0[])">
            <summary>
            Matches an array which has all of the specified values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.Mod(System.Int32,System.Int32)">
            <summary>
            Modulus operator.
            </summary>
            <param name="denominator">The denominator.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.Size(System.Int32)">
            <summary>
            Matches any array with the specified number of elements
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.Exists">
            <summary>
            Check for existence of a field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.NotExists">
            <summary>
            Check for lack of existence of a field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.Type(MongoDB.Bson.BsonType)">
            <summary>
            Matches values based on their bson type.
            </summary>
            <param name="bsonType">Type of the bson.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.Where(System.String)">
            <summary>
            Sends the Javascript expressiosn to the server.
            </summary>
            <param name="javascript">The javascript.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Op.op_BitwiseAnd(MongoDB.Op,MongoDB.Op)">
            <summary>
            Implements the operator &amp;.  This is used for conjunctions.
            </summary>
            <param name="op1">The op1.</param>
            <param name="op2">The op2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Op.op_LogicalNot(MongoDB.Op)">
            <summary>
            Implements the operator !. This is used for the meta operator $not.
            </summary>
            <param name="op">The op.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MongoDB.MongoConnectionStringBuilder">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.MongoConnectionStringBuilder.DefaultDatabase">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.MongoConnectionStringBuilder.DefaultMaximumPoolSize">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.MongoConnectionStringBuilder.DefaultMinimumPoolSize">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.MongoConnectionStringBuilder.DefaultPooled">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.MongoConnectionStringBuilder.DefaultConnectionLifeTime">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.MongoConnectionStringBuilder.DefaultConnectionTimeout">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.#ctor">
            <summary>
              Initializes a new instance of the
              <see cref="T:MongoDB.MongoConnectionStringBuilder"/>
              class. Uses the default server connection when
              no server is added.
            </summary>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.#ctor(System.String)">
            <summary>
              Initializes a new instance of the
              <see cref="T:MongoDB.MongoConnectionStringBuilder"/>
              class. Uses the default server connection when
              no server is added.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.ParseUri(System.String)">
            <summary>
              Parses the URI.
            </summary>
            <param name = "connectionString">The connection string.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.Parse(System.String)">
            <summary>
              Parses the specified connection string.
            </summary>
            <param name = "connectionString">The connection string.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.ParseValuePair(System.String)">
            <summary>
              Parses the value pair.
            </summary>
            <param name = "pair">The pair.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.ParseValuePair(System.String,System.String)">
            <summary>
              Parses the specified key.
            </summary>
            <param name = "key">The key.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.ParseServers(System.String)">
            <summary>
              Parses the servers.
            </summary>
            <param name = "value">The value.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.AddServer(MongoDB.MongoServerEndPoint)">
            <summary>
              Adds the server.
            </summary>
            <param name = "endPoint">The end point.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.ClearServers">
            <summary>
              Clears the servers.
            </summary>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.AddServer(System.String)">
            <summary>
              Adds the server with the given host and default port.
            </summary>
            <param name = "host">The host.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.AddServer(System.String,System.Int32)">
            <summary>
              Adds the server with the given host and port.
            </summary>
            <param name = "host">The host.</param>
            <param name = "port">The port.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionStringBuilder.ToString">
            <summary>
              Returns a
              <see cref="T:System.String"/>
              that represents this instance.
            </summary>
            <returns>A
              <see cref="T:System.String"/>
              that represents this instance.</returns>
        </member>
        <member name="P:MongoDB.MongoConnectionStringBuilder.Servers">
            <summary>
              Gets the servers.
            </summary>
            <value>The servers.</value>
        </member>
        <member name="P:MongoDB.MongoConnectionStringBuilder.Password">
            <summary>
              Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:MongoDB.MongoConnectionStringBuilder.Username">
            <summary>
              Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:MongoDB.MongoConnectionStringBuilder.MaximumPoolSize">
            <summary>
              Gets or sets the maximum size of the connection pool.
            </summary>
            <value>The maximum size of the pool.</value>
        </member>
        <member name="P:MongoDB.MongoConnectionStringBuilder.MinimumPoolSize">
            <summary>
              Gets or sets the size of the minimum connection pool.
            </summary>
            <value>The size of the minimal pool.</value>
        </member>
        <member name="P:MongoDB.MongoConnectionStringBuilder.ConnectionLifetime">
            <summary>
              Gets or sets the connection lifetime in connection pool.
            </summary>
            <value>The connection lifetime.</value>
        </member>
        <member name="P:MongoDB.MongoConnectionStringBuilder.ConnectionTimeout">
            <summary>
              Gets or sets the connection timeout.
            </summary>
            <value>The connection timeout.</value>
        </member>
        <member name="P:MongoDB.MongoConnectionStringBuilder.Pooled">
            <summary>
              Gets or sets a value indicating whether connection is pooled.
            </summary>
            <value><c>true</c> if pooled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MongoDB.MongoConnectionStringBuilder.Database">
            <summary>
              Gets or sets the database.
            </summary>
            <remarks>
              Is only used when passing directly constructing MongoDatabase instance.
            </remarks>
            <value>The database.</value>
        </member>
        <member name="T:MongoDB.Linq.Grouping`2">
            <summary>
            
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:MongoDB.Linq.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Linq.Grouping`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="group">The group.</param>
        </member>
        <member name="M:MongoDB.Linq.Grouping`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MongoDB.Linq.Grouping`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:MongoDB.Linq.Grouping`2.Key">
            <summary>
            Gets the key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <value></value>
            <returns>
            The key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </returns>
        </member>
        <member name="T:MongoDB.IMongoCollection`1">
            <summary>
              A collection is a storage unit for a group of <see cref="T:MongoDB.Document"/>s.  The documents do not all have to 
              contain the same schema but for efficiency they should all be similar.
            </summary>
            <remarks>
              Safemode checks the database for any errors that may have occurred during 
              the insert such as a duplicate key constraint violation.
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.FindOne(System.String)">
            <summary>
            Finds and returns the first document in a selector query.
            </summary>
            <param name="javascriptWhere">The where.</param>
            <returns>
            A <see cref="T:MongoDB.Document"/> from the collection.
            </returns>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.FindOne(System.Object)">
            <summary>
            Finds and returns the first document in a selector query.
            </summary>
            <param name="selector">The selector.</param>
            <returns>
            A <see cref="T:MongoDB.Document"/> from the collection.
            </returns>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.FindAll">
            <summary>
              Returns a cursor that contains all of the documents in the collection.
            </summary>
            <remarks>
              Cursors load documents from the database in batches instead of all at once.
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Find(System.String)">
            <summary>
            Uses the $where operator to query the collection.  The value of the where is Javascript that will
            produce a true for the documents that match the criteria.
            </summary>
            <param name="javascriptWhere">Javascript</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Find(System.Object)">
            <summary>
            Queries the collection using the query selector.
            </summary>
            <param name="selector">The selector.</param>
            <returns>A <see cref="T:MongoDB.ICursor"/></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Find(System.Object,System.Object)">
            <summary>
            Queries the collection using the specification and only returns a subset of fields.
            </summary>
            <param name="selector">The selector.</param>
            <param name="fields">The fields.</param>
            <returns>A <see cref="T:MongoDB.ICursor"/></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Find(System.Object,System.Int32,System.Int32)">
            <summary>
            Deprecated.  Use the fluent interface on the cursor to specify a limit and skip value.
            </summary>
            <param name="selector">The selector.</param>
            <param name="limit">The limit.</param>
            <param name="skip">The skip.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Find(System.Object,System.Int32,System.Int32,System.Object)">
            <summary>
            Queries the collection using the specification and only returns a subset of fields
            </summary>
            <param name="selector">The selector.</param>
            <param name="limit">The limit.</param>
            <param name="skip">The skip.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.FindAndModify(System.Object,System.Object)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.FindAndModify(System.Object,System.Object,System.Object)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
            <see cref="T:MongoDB.IndexOrder"/>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.FindAndModify(System.Object,System.Object,System.Boolean)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.FindAndModify(System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the
            <see cref="T:MongoDB.IndexOrder"/></param>
            <param name="fields">The fields.</param>
            <param name="remove">if set to <c>true</c> [remove].</param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <param name="upsert">if set to <c>true</c> [upsert].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.MapReduce">
            <summary>
              Entrypoint into executing a map/reduce query against the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Count">
            <summary>
              Count all items in the collection.
            </summary>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Count(System.Object)">
            <summary>
              Count all items in a collection that match the query selector.
            </summary>
            <param name = "selector">The selector.</param>
            <returns></returns>
            <remarks>
              It will return 0 if the collection doesn't exist yet.
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Insert(System.Object,System.Boolean)">
            <summary>
              Inserts the Document into the collection.
            </summary>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Insert(System.Object)">
            <summary>
              Inserts the specified doc.
            </summary>
            <param name = "document">The doc.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
              Bulk inserts the specified documents into the database.
            </summary>
            <remarks>
              See the safemode description in the class description
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              Bulk inserts the specified documents into the database.
            </summary>
            <param name = "documents">The documents.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Delete(System.Object,System.Boolean)">
            <summary>
              Deletes documents from the collection according to the selector.
            </summary>
            <param name = "selector">The selector.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
            <remarks>
              An empty document will match all documents in the collection and effectively truncate it.
              See the safemode description in the class description
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Remove(System.Object,System.Boolean)">
            <summary>
              Remove documents from the collection according to the selector.
            </summary>
            <param name = "selector">The selector.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
            <remarks>
              An empty document will match all documents in the collection and effectively truncate it.
              See the safemode description in the class description
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Delete(System.Object)">
            <summary>
              Deletes documents from the collection according to the selector.
            </summary>
            <param name = "selector">The selector.</param>
            <remarks>
              An empty document will match all documents in the collection and effectively truncate it.
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Remove(System.Object)">
            <summary>
            Remove documents from the collection according to the selector.
            </summary>
            <param name="selector">The selector.</param>
            <remarks>
            An empty document will match all documents in the collection and effectively truncate it.
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Update(System.Object,System.Boolean)">
            <summary>
              Inserts or updates a document in the database.  If the document does not contain an _id one will be
              generated and an upsert sent.  Otherwise the document matching the _id of the document will be updated.
            </summary>
            <param name = "document">The document.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
            <remarks>
              See the safemode description in the class description
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Update(System.Object)">
            <summary>
              Inserts or updates a document in the database.  If the document does not contain an _id one will be
              generated and an upsert sent.  Otherwise the document matching the _id of the document will be updated.
            </summary>
            <param name = "document">The document.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Update(System.Object,System.Object,System.Boolean)">
            <summary>
              Updates the specified document with the current document.  In order to only do a partial update use a
              document containing modifier operations ($set, $unset, $inc, etc.)
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
            <remarks>
              See the safemode description in the class description
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Update(System.Object,System.Object)">
            <summary>
              Updates the specified document with the current document.  In order to only do a partial update use a 
              document containing modifier operations ($set, $unset, $inc, etc.)
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Update(System.Object,System.Object,MongoDB.UpdateFlags,System.Boolean)">
            <summary>
              Updates the specified document with the current document.  In order to only do a partial update use a
              document containing modifier operations ($set, $unset, $inc, etc.)
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
            <param name = "flags">The flags.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
            <remarks>
              See the safemode description in the class description
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Update(System.Object,System.Object,MongoDB.UpdateFlags)">
            <summary>
              Updates the specified document with the current document.  In order to only do a partial update use a 
              document containing modifier operations ($set, $unset, $inc, etc.)
            </summary>
            <param name="document">The <see cref="T:MongoDB.Document"/> to update with</param>
            <param name="selector">The query selector to find the document to update.</param>
            <param name="flags"><see cref="T:MongoDB.UpdateFlags"/></param>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.UpdateAll(System.Object,System.Object)">
            <summary>
              Runs a multiple update query against the database.  It will wrap any
              doc with $set if the passed in doc doesn't contain any '$' modifier ops.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.UpdateAll(System.Object,System.Object,System.Boolean)">
            <summary>
              Runs a multiple update query against the database.  It will wrap any
              doc with $set if the passed in doc doesn't contain any '$' modifier ops.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
            <remarks>
              See the safemode description in the class description
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Save(System.Object)">
            <summary>
              Inserts or updates a document in the database.  If the document does not contain an _id one will be
              generated and an upsert sent.  Otherwise the document matching the _id of the document will be updated.
            </summary>
            <param name = "document">The document.</param>
            <remarks>
              The document will contain the _id that is saved to the database.
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.Save(System.Object,System.Boolean)">
            <summary>
              Saves a document to the database using an upsert.
            </summary>
            <param name = "document">The document.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.IMongoCollection`1.FindAndModify(System.Object,System.Object,System.Object,System.Boolean)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the
            <see cref="T:MongoDB.IndexOrder"/></param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="P:MongoDB.IMongoCollection`1.Database">
            <summary>
              Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:MongoDB.IMongoCollection`1.Name">
            <summary>
              Name of the collection.
            </summary>
        </member>
        <member name="P:MongoDB.IMongoCollection`1.DatabaseName">
            <summary>
              String value of the database name.
            </summary>
        </member>
        <member name="P:MongoDB.IMongoCollection`1.FullName">
            <summary>
              Full name of the collection databasename . collectionname
            </summary>
        </member>
        <member name="P:MongoDB.IMongoCollection`1.Metadata">
            <summary>
              Metadata about the collection such as indexes.
            </summary>
        </member>
        <member name="T:MongoDB.GridFS.GridFileInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, 
            and aids in the creation of GridFileStream objects.  The api is very similar to the FileInfo class in
            System.IO.
            
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.#ctor(MongoDB.IMongoDatabase,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.GridFS.GridFileInfo"/> class.
            </summary>
            <param name="db">The db.</param>
            <param name="bucket">The bucket.</param>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.#ctor(MongoDB.MongoDatabase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.GridFS.GridFileInfo"/> class.
            </summary>
            <param name="db">The db.</param>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.Create">
            <summary>
            Creates the file named FileName and returns the GridFileStream
            </summary>
            <returns></returns>
            <exception cref="T:System.IO.IOException">If the file already exists</exception>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.Create(System.IO.FileMode)">
            <summary>
            Creates the specified mode.
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.Create(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Creates the specified mode.
            </summary>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.OpenRead">
            <summary>
            Creates a read-only GridFileStream to an existing file. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.OpenWrite">
            <summary>
            Creates a write-only GridFileStream to an existing file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified mode.
            </summary>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.Delete">
            <summary>
            Permanently removes a file from the database. 
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.MoveTo(System.String)">
            <summary>
            Renames a file. 
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.Truncate">
            <summary>
            Deletes all data in a file and sets the length to 0.
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.CalcMD5">
            <summary>
            Calcs the M d5.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.UpdateInfo">
            <summary>
            Updates the aliases, contentType, metadata and uploadDate in the database.
            </summary>
            <remarks> To rename a file use the MoveTo method.
            </remarks>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.Refresh">
            <summary>
            Reloads the file information from the database. 
            </summary>
            <remarks>The data in the database will not reflect any changes done through an open stream until it is closed.
            </remarks>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.ToDocument">
            <summary>
            Toes the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.GridFS.GridFileInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MongoDB.GridFS.GridFileInfo.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MongoDB.GridFS.GridFileInfo.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:MongoDB.GridFS.GridFileInfo.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:MongoDB.GridFS.GridFileInfo.Length">
            <summary>
            Writing to the length property will not affect the actual data of the file.  Open a GridFileStream
            and call SetLength instead. 
            </summary>
        </member>
        <member name="P:MongoDB.GridFS.GridFileInfo.Aliases">
            <summary>
            Gets or sets the aliases.
            </summary>
            <value>The aliases.</value>
        </member>
        <member name="P:MongoDB.GridFS.GridFileInfo.ChunkSize">
            <summary>
            Gets or sets the size of the chunk.
            </summary>
            <value>The size of the chunk.</value>
        </member>
        <member name="P:MongoDB.GridFS.GridFileInfo.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:MongoDB.GridFS.GridFileInfo.UploadDate">
            <summary>
            Gets or sets the upload date.
            </summary>
            <value>The upload date.</value>
        </member>
        <member name="P:MongoDB.GridFS.GridFileInfo.Md5">
            <summary>
            Gets or sets the MD5.
            </summary>
            <value>The MD5.</value>
        </member>
        <member name="P:MongoDB.GridFS.GridFileInfo.Exists">
            <summary>
            Gets a value indicating whether the file exists.
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.MemberFinderBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.MemberFinderBase.#ctor(System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.MemberFinderBase"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.MemberFinderBase.#ctor(System.Func{System.Reflection.MemberInfo,System.Boolean},System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.MemberFinderBase"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="memberTypes">The member types.</param>
            <param name="bindingFlags">The binding flags.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.MemberFinderBase.GetMember(System.Type)">
            <summary>
            Gets the member representing the id if one exists.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.MemberFinderBase.IsMatch(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Determines whether the specified member info is match.
            </summary>
            <param name="memberInfo">The member info.</param>
            <param name="criteria">The criteria.</param>
            <returns>
            	<c>true</c> if the specified member info is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.IdOverrides">
            <summary>
            Overrides the Id member.
            </summary>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.IdOverrides.Member">
            <summary>
            Gets or sets the member.
            </summary>
            <value>The member.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.IdOverrides.Generator">
            <summary>
            Gets or sets the generator.
            </summary>
            <value>The generator.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.IdOverrides.UnsavedValue">
            <summary>
            Gets or sets the unsaved value.
            </summary>
            <value>The unsaved value.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.FindExtendedPropertiesMember(System.Type)">
            <summary>
            Finds the extended properties member.
            </summary>
            <param name="classType">Type of the class.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.FindIdMember(System.Type)">
            <summary>
            Gets the id member for the class type.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.FindMembers(System.Type)">
            <summary>
            Finds the members to map for the class type.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.GetAlias(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the property name for the member.
            </summary>
            <param name="classType">Type of the entity.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.GetCollectionName(System.Type)">
            <summary>
            Gets the collection name for the class type.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.GetCollectionAdapter(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the type of the collection.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <param name="memberReturnType">Type of the member return.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.GetCollectionElementType(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the type of the collection element.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <param name="memberReturnType">Type of the member return.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.GetDefaultValue(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the default value.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.GetDictionaryAdapter(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the dictionary adadpter.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <param name="memberReturnType">Type of the member return.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.GetDiscriminator(System.Type)">
            <summary>
            Gets the descriminator for the class type.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.GetDiscriminatorAlias(System.Type)">
            <summary>
            Gets the property name of the discriminator for the class type.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.GetIdGenerator(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the id generator for the member.
            </summary>
            <param name="classType"></param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.GetIdUnsavedValue(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the unsaved value for the id.
            </summary>
            <param name="classType">Type of the entity.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.GetPersistDefaultValue(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets a value indicating whether the member should be persisted if it is null.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.IsSubClass(System.Type)">
            <summary>
            Indicates whether the class type is a sub class.
            </summary>
            <param name="classType">Type of the class.</param>
            <returns>
            	<c>true</c> if the classType is a sub class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.Conventions">
            <summary>
            Gets or sets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.MemberFinder">
            <summary>
            Gets or sets the member finder.
            </summary>
            <value>The member finder.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile.IsSubClassDelegate">
            <summary>
            Gets or sets the is sub class.
            </summary>
            <value>The is sub class.</value>
        </member>
        <member name="T:MongoDB.Configuration.IdGenerators.AssignedIdGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.IdGenerators.IIdGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.IdGenerators.IIdGenerator.Generate(System.Object,MongoDB.Configuration.Mapping.Model.IdMap)">
            <summary>
            Generates an id for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="idMap">The id map.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.IdGenerators.AssignedIdGenerator.Generate(System.Object,MongoDB.Configuration.Mapping.Model.IdMap)">
            <summary>
            Generates an id for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="idMap">The id map.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Builders.AutoMappingProfileBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.#ctor(MongoDB.Configuration.Mapping.Auto.AutoMappingProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Builders.AutoMappingProfileBuilder"/> class.
            </summary>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.AliasesAreCamelCased">
            <summary>
            Aliaseses the are camel cased.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.AliasesAre(System.Func{System.Reflection.MemberInfo,System.String})">
            <summary>
            Aliaseses the are.
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.CollectionsAreNamed(System.Func{System.Type,System.String})">
            <summary>
            Collectionses the are named.
            </summary>
            <param name="collectionName">Name of the collection.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.CollectionNamesAreCamelCased">
            <summary>
            Collections the names are camel cased.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.CollectionNamesAreCamelCasedAndPlural">
            <summary>
            Collections the names are camel cased and plural.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.ConventionsAre(MongoDB.Configuration.Mapping.Conventions.ConventionProfile)">
            <summary>
            Conventionses the are.
            </summary>
            <param name="conventions">The conventions.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.DiscriminatorAliasesAre(System.Func{System.Type,System.String})">
            <summary>
            Discriminators the aliases are.
            </summary>
            <param name="discriminatorAlias">The discriminator alias.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.DiscriminatorValuesAre(System.Func{System.Type,System.Object})">
            <summary>
            Discriminators the values are.
            </summary>
            <param name="discriminator">The discriminator.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.ExtendedPropertiesAre(System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Extendeds the properties are.
            </summary>
            <param name="extendedProperty">The extended property.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.ExtendedPropertiesAre(System.Func{System.Reflection.MemberInfo,System.Boolean},System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Extendeds the properties are.
            </summary>
            <param name="extendedProperty">The extended property.</param>
            <param name="memberTypes">The member types.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.ExtendedPropertiesAreNamed(System.String)">
            <summary>
            Extendeds the properties are named.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.ExtendedPropertiesAreNamed(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Extendeds the properties are named.
            </summary>
            <param name="name">The name.</param>
            <param name="memberTypes">The member types.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.FindMembersWith(MongoDB.Configuration.Mapping.Auto.IMemberFinder)">
            <summary>
            Finds the members with.
            </summary>
            <param name="memberFinder">The member finder.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.IdsAre(System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Idses the are.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.IdsAre(System.Func{System.Reflection.MemberInfo,System.Boolean},System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Idses the are.
            </summary>
            <param name="id">The id.</param>
            <param name="memberTypes">The member types.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.IdsAreNamed(System.String)">
            <summary>
            Idses the are named.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.IdsAreNamed(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Idses the are named.
            </summary>
            <param name="name">The name.</param>
            <param name="memberTypes">The member types.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.SubClassesAre(System.Func{System.Type,System.Boolean})">
            <summary>
            Subs the classes are.
            </summary>
            <param name="isSubClass">The is sub class.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.UseCollectionAdapterConvention(MongoDB.Configuration.Mapping.Conventions.ICollectionAdapterConvention)">
            <summary>
            Uses the collection adapter convention.
            </summary>
            <param name="collectionAdapterConvention">The collection adapter convention.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.UseCollectionNameConvention(MongoDB.Configuration.Mapping.Conventions.ICollectionNameConvention)">
            <summary>
            Uses the collection name convention.
            </summary>
            <param name="collectionNameConvention">The collection name convention.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.UseDefaultValueConvention(MongoDB.Configuration.Mapping.Conventions.IDefaultValueConvention)">
            <summary>
            Uses the default value convention.
            </summary>
            <param name="defaultValueConvention">The default value convention.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.UseDiscriminatorAliasConvention(MongoDB.Configuration.Mapping.Conventions.IDiscriminatorAliasConvention)">
            <summary>
            Uses the discriminator alias convention.
            </summary>
            <param name="discriminatorAliasConvention">The discriminator alias convention.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.UseDiscriminatorConvention(MongoDB.Configuration.Mapping.Conventions.IDiscriminatorConvention)">
            <summary>
            Uses the discriminator convention.
            </summary>
            <param name="discriminatorConvention">The discriminator convention.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.UseExtendedPropertiesConvention(MongoDB.Configuration.Mapping.Conventions.IExtendedPropertiesConvention)">
            <summary>
            Uses the extended properties convention.
            </summary>
            <param name="extendedPropertiesConvention">The extended properties convention.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.UseIdConvention(MongoDB.Configuration.Mapping.Conventions.IIdConvention)">
            <summary>
            Uses the id convention.
            </summary>
            <param name="idConvention">The id convention.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.UseIdGeneratorConvention(MongoDB.Configuration.Mapping.Conventions.IIdGeneratorConvention)">
            <summary>
            Uses the id generator convention.
            </summary>
            <param name="idGeneratorConvention">The id generator convention.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.UseIdUnsavedValueConvention(MongoDB.Configuration.Mapping.Conventions.IIdUnsavedValueConvention)">
            <summary>
            Uses the id unsaved value convention.
            </summary>
            <param name="idUnsavedValueConvention">The id unsaved value convention.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.AutoMappingProfileBuilder.UseMemberAliasConvention(MongoDB.Configuration.Mapping.Conventions.IAliasConvention)">
            <summary>
            Uses the member alias convention.
            </summary>
            <param name="aliasConvention">The alias convention.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.CollectionMetadata">
            <summary>
              Lazily loaded meta data on the collection.
            </summary>
        </member>
        <member name="M:MongoDB.CollectionMetadata.#ctor(MongoDB.Configuration.MongoConfiguration,System.String,System.String,MongoDB.Connections.Connection)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.CollectionMetadata"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="collectionName">The name.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:MongoDB.CollectionMetadata.CreateIndex(System.String,MongoDB.Document,System.Boolean)">
            <summary>
              Creates the index.
            </summary>
            <param name = "name">The name.</param>
            <param name = "fieldsAndDirections">The fields and directions.</param>
            <param name = "unique">if set to <c>true</c> [unique].</param>
        </member>
        <member name="M:MongoDB.CollectionMetadata.CreateIndex(MongoDB.Document,System.Boolean)">
            <summary>
              Creates the index.
            </summary>
            <param name = "fieldsAndDirections">The fields and directions.</param>
            <param name = "unique">if set to <c>true</c> [unique].</param>
        </member>
        <member name="M:MongoDB.CollectionMetadata.DropIndex(System.String)">
            <summary>
              Drops the index.
            </summary>
            <param name = "name">The name.</param>
        </member>
        <member name="M:MongoDB.CollectionMetadata.Rename(System.String)">
            <summary>
              Renames the specified new name.
            </summary>
            <param name = "newName">The new name.</param>
        </member>
        <member name="M:MongoDB.CollectionMetadata.Refresh">
            <summary>
              Refreshes this instance.
            </summary>
        </member>
        <member name="M:MongoDB.CollectionMetadata.generateIndexName(MongoDB.Document,System.Boolean)">
            <summary>
              Generates the name of the index.
            </summary>
            <param name = "fieldsAndDirections">The fields and directions.</param>
            <param name = "unique">if set to <c>true</c> [unique].</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.CollectionMetadata.Options">
            <summary>
              Gets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:MongoDB.CollectionMetadata.Indexes">
            <summary>
              Gets the indexes.
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="T:MongoDB.Serialization.Builders.DictionaryBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Serialization.Builders.DictionaryBuilder.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.Builders.DictionaryBuilder"/> class.
            </summary>
            <param name="valueType">Type of the value.</param>
        </member>
        <member name="M:MongoDB.Serialization.Builders.DictionaryBuilder.AddProperty(System.String,System.Object)">
            <summary>
            Adds the property.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Serialization.Builders.DictionaryBuilder.BuildObject">
            <summary>
            Builds the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Builders.DictionaryBuilder.GetPropertyDescriptor(System.String)">
            <summary>
            Gets the property descriptor.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Protocol.KillCursorsMessage">
            <summary>
            The OP_KILL_CURSORS message is used to close an active
            cursor in the database. This is necessary to ensure
            that database resources are reclaimed at the end of the query.
            </summary>
            <remarks>
            struct {
            MsgHeader header;                 // standard message header
            int32     ZERO;                   // 0 - reserved for future use
            int32     numberOfCursorIDs;      // number of cursorIDs in message
            int64[]   cursorIDs;                // array of cursorIDs to close
            }
            </remarks>
        </member>
        <member name="M:MongoDB.Protocol.KillCursorsMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.KillCursorsMessage"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Protocol.KillCursorsMessage.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.KillCursorsMessage"/> class.
            </summary>
            <param name="cursorId">The cursor id.</param>
        </member>
        <member name="M:MongoDB.Protocol.KillCursorsMessage.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.KillCursorsMessage"/> class.
            </summary>
            <param name="cursorIDs">The cursor I ds.</param>
        </member>
        <member name="M:MongoDB.Protocol.KillCursorsMessage.WriteBody(MongoDB.Bson.BsonWriter)">
            <summary>
            Writes the body.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:MongoDB.Protocol.KillCursorsMessage.CalculateBodySize(MongoDB.Bson.BsonWriter)">
            <summary>
            Calculates the size of the body.
            </summary>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Protocol.KillCursorsMessage.CursorIds">
            <summary>
            Gets or sets the cursor ids.
            </summary>
            <value>The cursor ids.</value>
        </member>
        <member name="T:MongoDB.Mongo">
            <summary>
              Description of Mongo.
            </summary>
        </member>
        <member name="M:MongoDB.Mongo.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Mongo"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Mongo.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Mongo"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:MongoDB.Mongo.#ctor(MongoDB.Configuration.MongoConfiguration)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Mongo"/> class.
            </summary>
            <param name="configuration">The mongo configuration.</param>
        </member>
        <member name="M:MongoDB.Mongo.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MongoDB.Mongo.GetDatabase(System.String)">
            <summary>
              Gets the named database.
            </summary>
            <param name = "name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Mongo.Connect">
            <summary>
              Connects to server.
            </summary>
            <returns></returns>
            <exception cref="T:MongoDB.MongoConnectionException">Thrown when connection fails.</exception>
        </member>
        <member name="M:MongoDB.Mongo.TryConnect">
            <summary>
              Tries to connect to server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Mongo.Disconnect">
            <summary>
              Disconnects this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Mongo.GetDatabases">
            <summary>
              Gets the databases.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Mongo.ConnectionString">
            <summary>
              Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MongoDB.Mongo.Item(System.String)">
            <summary>
              Gets the <see cref="T:MongoDB.MongoDatabase"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:MongoDB.GridFS.MongoGridFSException">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.GridFS.MongoGridFSException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.GridFS.MongoGridFSException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="filename">The filename.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:MongoDB.GridFS.MongoGridFSException.Filename">
            <summary>
            Gets the filename.
            </summary>
            <value>The filename.</value>
        </member>
        <member name="T:MongoDB.InvalidQueryException">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.InvalidQueryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.InvalidQueryException"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.InvalidQueryException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.InvalidQueryException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MongoDB.InvalidQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.InvalidQueryException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:MongoDB.InvalidQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.InvalidQueryException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:MongoDB.IdGenerationException">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.MongoException">
            <summary>
            Base class for all Mongo Exceptions
            </summary>
        </member>
        <member name="M:MongoDB.MongoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner.</param>
        </member>
        <member name="M:MongoDB.MongoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MongoDB.MongoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:MongoDB.IdGenerationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.IdGenerationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MongoDB.IdGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.IdGenerationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.IIdConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.IIdConvention.GetIdMember(System.Type)">
            <summary>
            Gets the member representing the id if one exists.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Bson.BsonReader">
            <summary>
              Reads binary streams containing BSON data and converts them to native types.
            </summary>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.#ctor(System.IO.Stream,MongoDB.Bson.BsonReaderSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.#ctor(System.IO.Stream,MongoDB.Bson.IBsonObjectBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.Read">
            <summary>
            Reads this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadObject">
            <summary>
            Reads the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadArray">
            <summary>
            Reads the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadElements(System.Object)">
            <summary>
            Reads the elements.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadElement(System.Object)">
            <summary>
            Reads the element.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadElementType(System.Int32)">
            <summary>
            Reads the type of the element.
            </summary>
            <param name="typeNumber">The type number.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadDateTime">
            <summary>
            Reads the date time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadString">
            <summary>
            Reads the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadLengthString">
            <summary>
            Reads the length string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.GetString(System.Int32)">
            <summary>
            Gets the string.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadScope">
            <summary>
            Reads the scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadCode">
            <summary>
            Reads the code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadRegex">
            <summary>
            Reads the regex.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.ReadBinary">
            <summary>
            Reads the binary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.GetLastFullCharStop(System.Int32)">
            <summary>
            Gets the last full char stop.
            </summary>
            <param name="start">The start.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.BytesInSequence(System.Byte)">
            <summary>
            Byteses the in sequence.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonReader.EnsureBuffers">
            <summary>
            Ensures the buffers.
            </summary>
        </member>
        <member name="P:MongoDB.Bson.BsonReader.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:MongoDB.Serialization.Builders.PropertyDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="P:MongoDB.Serialization.Builders.PropertyDescriptor.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MongoDB.Serialization.Builders.PropertyDescriptor.IsDictionary">
            <summary>
            Gets or sets a value indicating whether this instance is dictionary.
            </summary>
            <value>
            	<c>true</c> if this instance is dictionary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MongoDB.MongoMaxKey">
            <summary>
            Class representing the MaxKey Bson type.  It will always compare higher than any other type.
            </summary>
        </member>
        <member name="M:MongoDB.MongoMaxKey.#cctor">
            <summary>
            Initializes the <see cref="T:MongoDB.MongoMaxKey"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.MongoMaxKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoMaxKey"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.MongoMaxKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MongoDB.MongoMaxKey.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MongoDB.DatabaseMetadata">
            <summary>
              Administration of metadata for a database.
            </summary>
        </member>
        <member name="M:MongoDB.DatabaseMetadata.#ctor(MongoDB.Configuration.MongoConfiguration,System.String,MongoDB.Connections.Connection)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.DatabaseMetadata"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="name">The name.</param>
            <param name="conn">The conn.</param>
        </member>
        <member name="M:MongoDB.DatabaseMetadata.CreateCollection(System.String)">
            <summary>
              Creates the collection.
            </summary>
            <param name = "name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.DatabaseMetadata.CreateCollection(System.String,MongoDB.Document)">
            <summary>
              Creates the collection.
            </summary>
            <param name = "name">The name.</param>
            <param name = "options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.DatabaseMetadata.DropCollection(MongoDB.MongoCollection)">
            <summary>
              Drops the collection.
            </summary>
            <param name = "collection">The col.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.DatabaseMetadata.DropCollection(System.String)">
            <summary>
              Drops the collection.
            </summary>
            <param name = "name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.DatabaseMetadata.DropDatabase">
            <summary>
              Drops the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.DatabaseMetadata.AddUser(System.String,System.String)">
            <summary>
              Adds the user.
            </summary>
            <param name = "username">The username.</param>
            <param name = "password">The password.</param>
        </member>
        <member name="M:MongoDB.DatabaseMetadata.RemoveUser(System.String)">
            <summary>
              Removes the user.
            </summary>
            <param name = "username">The username.</param>
        </member>
        <member name="M:MongoDB.DatabaseMetadata.ListUsers">
            <summary>
              Lists the users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.DatabaseMetadata.FindUser(System.String)">
            <summary>
              Finds the user.
            </summary>
            <param name = "username">The username.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.DatabaseMetadata.FindUser(MongoDB.Document)">
            <summary>
              Finds the user.
            </summary>
            <param name = "spec">The spec.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.ICollectionAdapterConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.ICollectionAdapterConvention.GetCollectionAdapter(System.Type)">
            <summary>
            Gets the collection adapter.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.ICollectionAdapterConvention.GetElementType(System.Type)">
            <summary>
            Gets the type of the element.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DelegateDiscriminatorAliasConvention">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.IDiscriminatorAliasConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.IDiscriminatorAliasConvention.GetDiscriminatorAlias(System.Type)">
            <summary>
            Gets the name of the discriminator property if one exists.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateDiscriminatorAliasConvention.#ctor(System.Func{System.Type,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DelegateDiscriminatorAliasConvention"/> class.
            </summary>
            <param name="discriminatorAlias">The discriminator alias.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateDiscriminatorAliasConvention.GetDiscriminatorAlias(System.Type)">
            <summary>
            Gets the discriminator alias.
            </summary>
            <param name="classType">Type of the class.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.MemberOverrides">
            <summary>
            </summary>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.MemberOverrides.Alias">
            <summary>
            Gets or sets the alias to use for the member.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.MemberOverrides.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.MemberOverrides.Ignore">
            <summary>
            Gets or sets a value whether the member should be ignored from the map.
            </summary>
            <value><c>true</c> if exclude; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Auto.MemberOverrides.PersistDefaultValue">
            <summary>
            Gets or sets a value indicating whether a member with the default value gets persisted.
            </summary>
            <value>The persist default value.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.AutoMappingStore">
            <summary>
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.IMappingStore">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.IMappingStore.GetClassMap(System.Type)">
            <summary>
            Gets the class map.
            </summary>
            <param name="classType">Type of the class.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.AutoMappingStore.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.AutoMappingStore"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.AutoMappingStore.#ctor(MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.AutoMappingStore"/> class.
            </summary>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.AutoMappingStore.#ctor(MongoDB.Configuration.Mapping.Auto.IAutoMapper)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.AutoMappingStore"/> class.
            </summary>
            <param name="autoMapper">The auto mapper.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.AutoMappingStore.#ctor(MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile,MongoDB.Configuration.Mapping.IMappingStore)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.AutoMappingStore"/> class.
            </summary>
            <param name="profile">The profile.</param>
            <param name="mappingStore">The mapping store.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.AutoMappingStore.#ctor(MongoDB.Configuration.Mapping.Auto.IAutoMapper,MongoDB.Configuration.Mapping.IMappingStore)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.AutoMappingStore"/> class.
            </summary>
            <param name="autoMapper">The auto mapper.</param>
            <param name="mappingStore">The mapping store.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.AutoMappingStore.GetClassMap(System.Type)">
            <summary>
              Gets the class map for the specified class type.
            </summary>
            <param name = "classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Builders.ClassOverridesBuilder`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MongoDB.Configuration.Builders.ClassOverridesBuilder`1.#ctor(MongoDB.Configuration.Mapping.Auto.ClassOverrides)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Builders.ClassOverridesBuilder`1"/> class.
            </summary>
            <param name="overrides">The overrides.</param>
        </member>
        <member name="M:MongoDB.Configuration.Builders.ClassOverridesBuilder`1.CollectionName(System.String)">
            <summary>
            Collections the name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:MongoDB.Configuration.Builders.ClassOverridesBuilder`1.Id(System.Reflection.MemberInfo)">
            <summary>
            Ids the specified member.
            </summary>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.ClassOverridesBuilder`1.Id(System.String)">
            <summary>
            Ids the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.ClassOverridesBuilder`1.Id(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Ids the specified member.
            </summary>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.ClassOverridesBuilder`1.Member(System.Reflection.MemberInfo)">
            <summary>
            Members the specified member.
            </summary>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.ClassOverridesBuilder`1.Member(System.String)">
            <summary>
            Members the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.ClassOverridesBuilder`1.Member(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Members the specified member.
            </summary>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.ClassOverridesBuilder`1.GetMemberExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the member expression.
            </summary>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Commands.MapReduceCommand">
            <summary>
              A fluent interface for executing a Map/Reduce call against a collection.
            </summary>
        </member>
        <member name="M:MongoDB.Commands.MapReduceCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Commands.MapReduceCommand"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:MongoDB.Commands.MapReduceCommand.Name">
            <summary>
              Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MongoDB.Commands.MapReduceCommand.Map">
            <summary>
              The map function references the variable this to inspect the current object under consideration.
              A map function must call emit(key,value) at least once, but may be invoked any number of times, 
              as may be appropriate.
            </summary>
        </member>
        <member name="P:MongoDB.Commands.MapReduceCommand.Reduce">
            <summary>
              The reduce function receives a key and an array of values. To use, reduce the received values, 
              and return a result.
            </summary>
            <remarks>
              The MapReduce engine may invoke reduce functions iteratively; thus, these functions 
              must be idempotent. If you need to perform an operation only once, use a finalize function.
            </remarks>
        </member>
        <member name="P:MongoDB.Commands.MapReduceCommand.Query">
            <summary>
              Gets or sets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="P:MongoDB.Commands.MapReduceCommand.Sort">
            <summary>
              Sort the query.  Useful for optimization
            </summary>
        </member>
        <member name="P:MongoDB.Commands.MapReduceCommand.Limit">
            <summary>
              Number of objects to return from collection
            </summary>
        </member>
        <member name="P:MongoDB.Commands.MapReduceCommand.Out">
            <summary>
              Name of the final collection the results should be stored in.
            </summary>
            <remarks>
              A temporary collection is still used and then renamed to the target name atomically.
            </remarks>
        </member>
        <member name="P:MongoDB.Commands.MapReduceCommand.KeepTemp">
            <summary>
              When true the generated collection is not treated as temporary.  Specifying out automatically makes
              the collection permanent
            </summary>
        </member>
        <member name="P:MongoDB.Commands.MapReduceCommand.Verbose">
            <summary>
              Provides statistics on job execution time.
            </summary>
        </member>
        <member name="P:MongoDB.Commands.MapReduceCommand.Finalize">
            <summary>
              Function to apply to all the results when finished.
            </summary>
        </member>
        <member name="P:MongoDB.Commands.MapReduceCommand.Scope">
            <summary>
              Document where fields go into javascript global scope
            </summary>
        </member>
        <member name="T:MongoDB.Bson.IBsonObjectBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectBuilder.BeginObject">
            <summary>
            Begins the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectBuilder.EndObject(System.Object)">
            <summary>
            Ends the object.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectBuilder.BeginArray">
            <summary>
            Begins the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectBuilder.EndArray(System.Object)">
            <summary>
            Ends the array.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectBuilder.BeginProperty(System.Object,System.String)">
            <summary>
            Begins the property.
            </summary>
            <param name="instance">The instance.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectBuilder.EndProperty(System.Object,System.String,System.Object)">
            <summary>
            Ends the property.
            </summary>
            <param name="instance">The instance.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:MongoDB.Bson.BsonWriter">
            <summary>
              Class that knows how to format a native object into bson bits.
            </summary>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.#ctor(System.IO.Stream,MongoDB.Bson.BsonWriterSettings)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.#ctor(System.IO.Stream,MongoDB.Bson.IBsonObjectDescriptor)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.WriteValue(MongoDB.Bson.BsonType,System.Object)">
            <summary>
              Writes the value.
            </summary>
            <param name = "type">Type of the data.</param>
            <param name = "obj">The obj.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Write(MongoDB.Oid)">
            <summary>
              Writes the specified id.
            </summary>
            <param name = "id">The id.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Write(MongoDB.Binary)">
            <summary>
              Writes the specified binary.
            </summary>
            <param name = "binary">The binary.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Write(System.Guid)">
            <summary>
              Writes the specified GUID.
            </summary>
            <param name = "guid">The GUID.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Write(System.Byte[])">
            <summary>
              Writes the specified bytes.
            </summary>
            <param name = "bytes">The bytes.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Write(MongoDB.CodeWScope)">
            <summary>
              Writes the specified code scope.
            </summary>
            <param name = "codeScope">The code scope.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Write(MongoDB.Code)">
            <summary>
              Writes the specified code.
            </summary>
            <param name = "code">The code.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Write(MongoDB.MongoRegex)">
            <summary>
              Writes the specified regex.
            </summary>
            <param name = "regex">The regex.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Write(MongoDB.DBRef)">
            <summary>
              Writes the specified reference.
            </summary>
            <param name = "reference">The reference.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Write(System.DateTime)">
            <summary>
              Writes the specified data time.
            </summary>
            <param name = "dateTime">The data time.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.WriteObject(System.Object)">
            <summary>
              Writes the object.
            </summary>
            <param name = "obj">The obj.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.WriteElements(System.Object)">
            <summary>
              Writes the elements.
            </summary>
            <param name = "obj">The obj.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.WriteArray(System.Collections.IEnumerable)">
            <summary>
              Writes the array.
            </summary>
            <param name = "enumerable">The enumerable.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Write(System.String)">
            <summary>
              Writes the specified value.
            </summary>
            <param name = "value">The value.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Write(System.String,System.Boolean)">
            <summary>
              Writes the specified value.
            </summary>
            <param name = "value">The value.</param>
            <param name = "includeLength">if set to <c>true</c> [include length].</param>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSize(System.Object)">
            <summary>
              Calculates the size.
            </summary>
            <param name = "obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSize(MongoDB.Code)">
            <summary>
              Calculates the size.
            </summary>
            <param name = "code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSize(MongoDB.MongoRegex)">
            <summary>
              Calculates the size.
            </summary>
            <param name = "regex">The regex.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSize(MongoDB.CodeWScope)">
            <summary>
              Calculates the size.
            </summary>
            <param name = "codeScope">The code scope.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSize(MongoDB.Binary)">
            <summary>
              Calculates the size.
            </summary>
            <param name = "binary">The binary.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSize(System.Byte[])">
            <summary>
              Calculates the size.
            </summary>
            <param name = "bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSize(System.Guid)">
            <summary>
              Calculates the size.
            </summary>
            <param name = "guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSize(MongoDB.DBRef)">
            <summary>
              Calculates the size.
            </summary>
            <param name = "reference">The reference.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSizeObject(System.Object)">
            <summary>
              Calculates the size object.
            </summary>
            <param name = "obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSizeObject(System.Object,System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonProperty})">
            <summary>
              Calculates the size object.
            </summary>
            <param name = "obj">The obj.</param>
            <param name = "propertys">The propertys.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSize(System.Collections.IEnumerable)">
            <summary>
              Calculates the size.
            </summary>
            <param name = "enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSize(System.String)">
            <summary>
              Calculates the size.
            </summary>
            <param name = "value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.CalculateSize(System.String,System.Boolean)">
            <summary>
              Calculates the size.
            </summary>
            <param name = "value">The value.</param>
            <param name = "includeLength">if set to <c>true</c> [include length].</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.Flush">
            <summary>
              Flushes this instance.
            </summary>
        </member>
        <member name="M:MongoDB.Bson.BsonWriter.TranslateToBsonType(System.Object)">
            <summary>
              Translates the type of to bson.
            </summary>
            <param name = "obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Attributes.MongoIdAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Attributes.MongoIdAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Attributes.MongoIdAttribute"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Serialization.Builders.DocumentBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.Builders.DocumentBuilder"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Serialization.Builders.DocumentBuilder.AddProperty(System.String,System.Object)">
            <summary>
            Adds the property.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Serialization.Builders.DocumentBuilder.BuildObject">
            <summary>
            Builds the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Builders.DocumentBuilder.GetPropertyDescriptor(System.String)">
            <summary>
            Gets the type of the property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DefaultDictionaryAdapterConvention">
            <summary>
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.IDictionarynAdapterConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.IDictionarynAdapterConvention.GetDictionaryAdapter(System.Type)">
            <summary>
            Gets the dictionary adapter.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="F:MongoDB.Configuration.Mapping.Conventions.DefaultDictionaryAdapterConvention.DictionaryTypes">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.Configuration.Mapping.Conventions.DefaultDictionaryAdapterConvention.Instance">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DefaultDictionaryAdapterConvention.GetDictionaryAdapter(System.Type)">
            <summary>
              Gets the type of the dictionary.
            </summary>
            <param name = "type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DefaultDictionaryAdapterConvention.DictionaryTypeFactoryDelegate">
            <summary>
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.IdGenerators.OidGenerator">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.IdGenerators.OidGenerator.Generate(System.Object,MongoDB.Configuration.Mapping.Model.IdMap)">
            <summary>
            Generates an id for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="idMap">The id map.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.CollectionAdapters.ArrayCollectionAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.CollectionAdapters.ArrayCollectionAdapter.CreateCollection(System.Type,System.Object[])">
            <summary>
            Adds the element to instance.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="elements">The elements.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.CollectionAdapters.ArrayCollectionAdapter.GetElementsFromCollection(System.Object)">
            <summary>
            Gets the elements from collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Bson.BsonDocumentBuilder">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentBuilder.BeginObject">
            <summary>
              Begins the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentBuilder.EndObject(System.Object)">
            <summary>
              Ends the object.
            </summary>
            <param name = "instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentBuilder.BeginArray">
            <summary>
              Begins the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentBuilder.EndArray(System.Object)">
            <summary>
              Ends the array.
            </summary>
            <param name = "instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentBuilder.BeginProperty(System.Object,System.String)">
            <summary>
              Begins the property.
            </summary>
            <param name = "instance">The instance.</param>
            <param name = "name">The name.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentBuilder.EndProperty(System.Object,System.String,System.Object)">
            <summary>
              Ends the property.
            </summary>
            <param name = "instance">The instance.</param>
            <param name = "name">The name.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentBuilder.GetTypeForIEnumerable(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              Gets the type for IEnumerable.
            </summary>
            <param name = "doc">The doc.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentBuilder.ConvertToArray(MongoDB.Document)">
            <summary>
              Converts to array.
            </summary>
            <param name = "doc">The doc.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Linq.MongoQuery`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MongoDB.Linq.MongoQuery`1.#ctor(MongoDB.Linq.MongoQueryProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Linq.MongoQuery`1"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:MongoDB.Linq.MongoQuery`1.#ctor(MongoDB.Linq.MongoQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Linq.MongoQuery`1"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:MongoDB.Linq.MongoQuery`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MongoDB.Linq.MongoQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MongoDB.Linq.MongoQuery`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MongoDB.Linq.MongoQuery`1.MongoDB#Linq#IMongoQueryable#GetQueryObject">
            <summary>
            Gets the query object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Linq.MongoQuery`1.System#Linq#IQueryable#Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="P:MongoDB.Linq.MongoQuery`1.System#Linq#IQueryable#ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
            </returns>
        </member>
        <member name="P:MongoDB.Linq.MongoQuery`1.MongoDB#Linq#IMongoQueryable#CollectionName">
            <summary>
            Gets the name of the collection.
            </summary>
            <value>The name of the collection.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQuery`1.MongoDB#Linq#IMongoQueryable#Database">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQuery`1.System#Linq#IQueryable#Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </returns>
        </member>
        <member name="T:MongoDB.DatabaseJavascript">
            <summary>
              Encapsulates and provides access to the serverside javascript stored in db.system.js.
            </summary>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.#ctor(MongoDB.IMongoDatabase)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.DatabaseJavascript"/> class.
            </summary>
            <param name="database">The database.</param>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.EnsureIndexExists">
            <summary>
            Ensures the index exists.
            </summary>
            <remarks>
            Needed for some versions of the db to retrieve the functions.
            </remarks>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.Add(MongoDB.Document)">
            <summary>
            Stores a function in the database.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.Clear">
            <summary>
            Removes every function in the database.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.Contains(MongoDB.Document)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.CopyTo(MongoDB.Document[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="array"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.Remove(MongoDB.Document)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.GetFunction(System.String)">
            <summary>
              Gets the document representing the function in the database.
            </summary>
            <param name="name">
              A <see cref="T:System.String"/>
            </param>
            <returns>
              A <see cref="T:MongoDB.Document"/>
            </returns>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.GetFunctionNames">
            <summary>
              Returns a listing of the names of all the functions in the database
            </summary>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.Add(System.String,System.String)">
            <summary>
            Adds the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="func">The func.</param>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.Add(System.String,MongoDB.Code)">
            <summary>
            Adds the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="func">The func.</param>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.Add(System.String,MongoDB.Code,System.Single)">
            <summary>
              Store a function in the database with an extended attribute called version.
            </summary>
            <remarks>
              Version attributes are an extension to the spec.  Function names must be unique
              to the database so only one version can be stored at a time.  This is most useful for libraries
              that store function in the database to make sure that the function they are using is the most
              up to date.
            </remarks>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.Contains(System.String)">
            <summary>
              Checks to see if a function named name is stored in the database.
            </summary>
            <param name="name">
              A <see cref="T:System.String"/>
            </param>
            <returns>
              A <see cref="T:System.Boolean"/>
            </returns>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.Update(MongoDB.Document)">
            <summary>
            Updates the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MongoDB.DatabaseJavascript.Remove(System.String)">
            <summary>
            Removes the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.DatabaseJavascript.Item(System.String)">
            <summary>
              Gets or sets the <see cref="T:MongoDB.Document"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:MongoDB.DatabaseJavascript.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:MongoDB.DatabaseJavascript.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:MongoDB.Connections.PooledConnectionFactory">
            <summary>
              Connection pool implementation based on this document:
              http://msdn.microsoft.com/en-us/library/8xx3tyca%28VS.100%29.aspx
            </summary>
        </member>
        <member name="T:MongoDB.Connections.ConnectionFactoryBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.Connections.IConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Connections.IConnectionFactory.Open">
            <summary>
            Opens a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.IConnectionFactory.Close(MongoDB.Connections.RawConnection)">
            <summary>
            Closes the specified connection.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:MongoDB.Connections.IConnectionFactory.Cleanup">
            <summary>
            Cleanups this instance.
            </summary>
        </member>
        <member name="P:MongoDB.Connections.IConnectionFactory.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Connections.ConnectionFactoryBase"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryBase.Open">
            <summary>
            Opens a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryBase.Close(MongoDB.Connections.RawConnection)">
            <summary>
            Closes the specified connection.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryBase.Cleanup">
            <summary>
            Cleanups this instance.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryBase.CreateRawConnection">
            <summary>
            Creates the raw connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryBase.GetNextEndPoint">
            <summary>
              Gets the next end point.
            </summary>
            <remarks>
              Currently is only cyles to the server list.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:MongoDB.Connections.ConnectionFactoryBase.Builder">
            <summary>
            Gets or sets the builder.
            </summary>
            <value>The builder.</value>
        </member>
        <member name="P:MongoDB.Connections.ConnectionFactoryBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="M:MongoDB.Connections.PooledConnectionFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:MongoDB.Connections.PooledConnectionFactory"/>
            class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:MongoDB.Connections.PooledConnectionFactory.Cleanup">
            <summary>
            Cleanups the connections.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.PooledConnectionFactory.CheckFreeConnectionsAlive">
            <summary>
            Checks the free connections alive.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.PooledConnectionFactory.DisposeInvalidConnections">
            <summary>
            Disposes the invalid connections.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.PooledConnectionFactory.IsAlive(MongoDB.Connections.RawConnection)">
            <summary>
            Determines whether the specified connection is alive.
            </summary>
            <param name="connection">The connection.</param>
            <returns>
            	<c>true</c> if the specified connection is alive; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MongoDB.Connections.PooledConnectionFactory.Open">
            <summary>
              Borrows the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.PooledConnectionFactory.Close(MongoDB.Connections.RawConnection)">
            <summary>
              Returns the connection.
            </summary>
            <param name = "connection">The connection.</param>
        </member>
        <member name="M:MongoDB.Connections.PooledConnectionFactory.EnsureMinimalPoolSize">
            <summary>
            Ensures the size of the minimal pool.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.PooledConnectionFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:MongoDB.Connections.PooledConnectionFactory.PoolSize">
            <summary>
            Gets the size of the pool.
            </summary>
            <value>The size of the pool.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DefaultIdUnsavedValueConvention">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.IIdUnsavedValueConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.IIdUnsavedValueConvention.GetUnsavedValue(System.Type)">
            <summary>
            Gets the unsaved value.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="F:MongoDB.Configuration.Mapping.Conventions.DefaultIdUnsavedValueConvention.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DefaultIdUnsavedValueConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DefaultIdUnsavedValueConvention"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DefaultIdUnsavedValueConvention.GetUnsavedValue(System.Type)">
            <summary>
            Gets the unsaved value.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.ConventionProfile">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.ConventionProfile"/> class.
            </summary>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.AliasConvention">
            <summary>
            Gets or sets the alias convention.
            </summary>
            <value>The alias convention.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.CollectionAdapterConvention">
            <summary>
            Gets or sets the collection adapter convention.
            </summary>
            <value>The collection adapter convention.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.CollectionNameConvention">
            <summary>
            Gets or sets the collection name convention.
            </summary>
            <value>The collection name convention.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.DefaultValueConvention">
            <summary>
            Gets or sets the default value convention.
            </summary>
            <value>The default value convention.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.DictionaryAdapterConvention">
            <summary>
            Gets or sets the dictionary adapter convention.
            </summary>
            <value>The dictionary adapter convention.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.DiscriminatorConvention">
            <summary>
            Gets or sets the discriminator convention.
            </summary>
            <value>The discriminator convention.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.DiscriminatorAliasConvention">
            <summary>
            Gets or sets the discriminator alias convention.
            </summary>
            <value>The discriminator alias convention.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.ExtendedPropertiesConvention">
            <summary>
            Gets or sets the extended properties convention.
            </summary>
            <value>The extended properties convention.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.IdConvention">
            <summary>
            Gets or sets the id convention.
            </summary>
            <value>The id convention.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.IdGeneratorConvention">
            <summary>
            Gets or sets the id generator convention.
            </summary>
            <value>The id generator convention.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Conventions.ConventionProfile.IdUnsavedValueConvention">
            <summary>
            Gets or sets the id unsaved value convention.
            </summary>
            <value>The id unsaved value convention.</value>
        </member>
        <member name="T:MongoDB.Configuration.DictionaryAdapters.GenericSortedListDictionaryAdapter`2">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.DictionaryAdapters.IDictionaryAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.DictionaryAdapters.IDictionaryAdapter.CreateDictionary(MongoDB.Document)">
            <summary>
            Creates the dictionary.
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.DictionaryAdapters.IDictionaryAdapter.GetDocument(System.Object)">
            <summary>
            Gets the document.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Configuration.DictionaryAdapters.IDictionaryAdapter.KeyType">
            <summary>
            Gets the type of the key.
            </summary>
            <value>The type of the key.</value>
        </member>
        <member name="P:MongoDB.Configuration.DictionaryAdapters.IDictionaryAdapter.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="M:MongoDB.Configuration.DictionaryAdapters.GenericSortedListDictionaryAdapter`2.CreateDictionary(MongoDB.Document)">
            <summary>
            Creates the dictionary.
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.DictionaryAdapters.GenericSortedListDictionaryAdapter`2.GetDocument(System.Object)">
            <summary>
            Gets the pairs.
            </summary>
            <param name="dictionary">The collection.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Configuration.DictionaryAdapters.GenericSortedListDictionaryAdapter`2.KeyType">
            <summary>
            Gets the type of the key.
            </summary>
            <value>The type of the key.</value>
        </member>
        <member name="P:MongoDB.Configuration.DictionaryAdapters.GenericSortedListDictionaryAdapter`2.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="T:MongoDB.Util.ErrorTranslator">
            <summary>
              Translates an error returned from Mongo into the proper exception.
            </summary>
        </member>
        <member name="M:MongoDB.Util.ErrorTranslator.Translate(MongoDB.Document)">
            <summary>
            Translates the specified error.
            </summary>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.ErrorTranslator.IsError(MongoDB.Document)">
            <summary>
            Determines whether the specified document is error.
            </summary>
            <param name="document">The document.</param>
            <returns>
            	<c>true</c> if the specified document is error; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MongoDB.Util.ErrorTranslator.GetErrorNumber(System.String)">
            <summary>
            Gets the error number.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.ErrorTranslator.BuildException(System.String,System.String,MongoDB.Document)">
            <summary>
            Builds the exception.
            </summary>
            <param name="errorNumber">The error number.</param>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Protocol.GetMoreMessage">
            <summary>
            The OP_GETMORE message is used to query the database for documents in a collection.
            </summary>
            <remarks>
            struct {
                MsgHeader header;                 // standard message header
                int32     ZERO;                   // 0 - reserved for future use
                cstring   fullCollectionName;     // "dbname.collectionname"
                int32     numberToReturn;         // number of documents to return
                int64     cursorID;               // cursorID from the OP_REPLY
            }
            </remarks>
        </member>
        <member name="M:MongoDB.Protocol.GetMoreMessage.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.GetMoreMessage"/> class.
            </summary>
            <param name="fullCollectionName">Full name of the collection.</param>
            <param name="cursorId">The cursor id.</param>
        </member>
        <member name="M:MongoDB.Protocol.GetMoreMessage.#ctor(System.String,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.GetMoreMessage"/> class.
            </summary>
            <param name="fullCollectionName">Full name of the collection.</param>
            <param name="cursorId">The cursor id.</param>
            <param name="numberToReturn">The number to return.</param>
        </member>
        <member name="M:MongoDB.Protocol.GetMoreMessage.WriteBody(MongoDB.Bson.BsonWriter)">
            <summary>
            Writes the body.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:MongoDB.Protocol.GetMoreMessage.CalculateBodySize(MongoDB.Bson.BsonWriter)">
            <summary>
            Calculates the size of the body.
            </summary>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Protocol.GetMoreMessage.CursorId">
            <summary>
            cursorID from the OP_REPLY.
            </summary>
            <value>The cursor id.</value>
        </member>
        <member name="P:MongoDB.Protocol.GetMoreMessage.FullCollectionName">
            <summary>
            Gets or sets the full name of the collection.
            </summary>
            <value>The full name of the collection.</value>
        </member>
        <member name="P:MongoDB.Protocol.GetMoreMessage.NumberToReturn">
            <summary>
            Gets or sets the number to return.
            </summary>
            <value>The number to return.</value>
        </member>
        <member name="T:MongoDB.MongoCollection">
            <summary>
            </summary>
        </member>
        <member name="T:MongoDB.IMongoCollection">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.IMongoCollection.FindOne(MongoDB.Document)">
            <summary>
            Finds the one.
            </summary>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.FindAll">
            <summary>
              Finds all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.Find(System.String)">
            <summary>
              Finds the specified where.
            </summary>
            <param name = "where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.Find(MongoDB.Document)">
            <summary>
            Finds the specified selector.
            </summary>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.Find(MongoDB.Document,System.Int32,System.Int32)">
            <summary>
              Finds the specified spec.
            </summary>
            <param name = "spec">The spec.</param>
            <param name = "limit">The limit.</param>
            <param name = "skip">The skip.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.Find(MongoDB.Document,System.Int32,System.Int32,MongoDB.Document)">
            <summary>
              Finds the specified spec.
            </summary>
            <param name = "spec">The spec.</param>
            <param name = "limit">The limit.</param>
            <param name = "skip">The skip.</param>
            <param name = "fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.FindAndModify(MongoDB.Document,MongoDB.Document)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.FindAndModify(MongoDB.Document,MongoDB.Document,MongoDB.Document)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
            <see cref="T:MongoDB.IndexOrder"/>
        </member>
        <member name="M:MongoDB.IMongoCollection.FindAndModify(MongoDB.Document,MongoDB.Document,System.Boolean)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.FindAndModify(MongoDB.Document,MongoDB.Document,MongoDB.Document,System.Boolean)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the
            <see cref="T:MongoDB.IndexOrder"/></param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.FindAndModify(MongoDB.Document,MongoDB.Document,MongoDB.Document,MongoDB.Document,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the
            <see cref="T:MongoDB.IndexOrder"/></param>
            <param name="fields">The fields.</param>
            <param name="remove">if set to <c>true</c> [remove].</param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <param name="upsert">if set to <c>true</c> [upsert].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.MapReduce">
            <summary>
              Maps the reduce.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.Count">
            <summary>
              Counts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.Count(MongoDB.Document)">
            <summary>
            Counts the specified spec.
            </summary>
            <param name="selector">The selector.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoCollection.Insert(MongoDB.Document)">
            <summary>
              Inserts the specified doc.
            </summary>
            <param name = "document">The document.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Insert(MongoDB.Document,System.Boolean)">
            <summary>
              Inserts the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Insert(System.Collections.Generic.IEnumerable{MongoDB.Document})">
            <summary>
              Inserts the specified docs.
            </summary>
            <param name = "documents">The docs.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Insert(System.Collections.Generic.IEnumerable{MongoDB.Document},System.Boolean)">
            <summary>
              Inserts the specified docs.
            </summary>
            <param name = "documents">The docs.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Delete(MongoDB.Document)">
            <summary>
              Deletes the specified selector.
            </summary>
            <param name = "selector">The selector.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Remove(MongoDB.Document)">
            <summary>
            Removes the specified selector.
            </summary>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Delete(MongoDB.Document,System.Boolean)">
            <summary>
              Deletes the specified selector.
            </summary>
            <param name = "selector">The selector.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Remove(MongoDB.Document,System.Boolean)">
            <summary>
            Removes the specified selector.
            </summary>
            <param name="selector">The selector.</param>
            <param name="safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Update(MongoDB.Document)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Update(MongoDB.Document,MongoDB.Document)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Update(MongoDB.Document,MongoDB.Document,MongoDB.UpdateFlags)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
            <param name = "flags">The flags.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Update(MongoDB.Document,System.Boolean)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Update(MongoDB.Document,MongoDB.Document,System.Boolean)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Update(MongoDB.Document,MongoDB.Document,MongoDB.UpdateFlags,System.Boolean)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
            <param name = "flags">The flags.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.UpdateAll(MongoDB.Document,MongoDB.Document)">
            <summary>
              Updates all.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.UpdateAll(MongoDB.Document,MongoDB.Document,System.Boolean)">
            <summary>
              Updates all.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Save(MongoDB.Document)">
            <summary>
              Saves the specified doc.
            </summary>
            <param name = "document">The document.</param>
        </member>
        <member name="M:MongoDB.IMongoCollection.Save(MongoDB.Document,System.Boolean)">
            <summary>
              Saves the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="P:MongoDB.IMongoCollection.Name">
            <summary>
              Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MongoDB.IMongoCollection.DatabaseName">
            <summary>
              Gets the name of the database.
            </summary>
            <value>The name of the database.</value>
        </member>
        <member name="P:MongoDB.IMongoCollection.FullName">
            <summary>
              Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:MongoDB.IMongoCollection.Database">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:MongoDB.IMongoCollection.Metadata">
            <summary>
              Gets the meta data.
            </summary>
            <value>The meta data.</value>
        </member>
        <member name="M:MongoDB.MongoCollection.#ctor(MongoDB.Configuration.MongoConfiguration,MongoDB.Connections.Connection,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.MongoCollection`1"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="connection">The connection.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:MongoDB.MongoCollection.FindOne(MongoDB.Document)">
            <summary>
              Finds the one.
            </summary>
            <param name = "spec">The spec.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.FindAll">
            <summary>
              Finds all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.Find(System.String)">
            <summary>
              Finds the specified where.
            </summary>
            <param name = "where">The where.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.Find(MongoDB.Document)">
            <summary>
              Finds the specified spec.
            </summary>
            <param name = "spec">The spec.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.Find(MongoDB.Document,System.Int32,System.Int32)">
            <summary>
              Finds the specified spec.
            </summary>
            <param name = "spec">The spec.</param>
            <param name = "limit">The limit.</param>
            <param name = "skip">The skip.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.Find(MongoDB.Document,System.Int32,System.Int32,MongoDB.Document)">
            <summary>
              Finds the specified spec.
            </summary>
            <param name = "spec">The spec.</param>
            <param name = "limit">The limit.</param>
            <param name = "skip">The skip.</param>
            <param name = "fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.FindAndModify(MongoDB.Document,MongoDB.Document)">
            <summary>
              Executes a query and atomically applies a modifier operation to the first document returning the original document
              by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.FindAndModify(MongoDB.Document,MongoDB.Document,MongoDB.Document)">
            <summary>
              Executes a query and atomically applies a modifier operation to the first document returning the original document
              by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
            <see cref="T:MongoDB.IndexOrder"/>
        </member>
        <member name="M:MongoDB.MongoCollection.FindAndModify(MongoDB.Document,MongoDB.Document,System.Boolean)">
            <summary>
              Executes a query and atomically applies a modifier operation to the first document returning the original document
              by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.FindAndModify(MongoDB.Document,MongoDB.Document,MongoDB.Document,System.Boolean)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the
            <see cref="T:MongoDB.IndexOrder"/></param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.FindAndModify(MongoDB.Document,MongoDB.Document,MongoDB.Document,MongoDB.Document,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the
            <see cref="T:MongoDB.IndexOrder"/></param>
            <param name="fields">The fields.</param>
            <param name="remove">if set to <c>true</c> [remove].</param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <param name="upsert">if set to <c>true</c> [upsert].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.MapReduce">
            <summary>
              Maps the reduce.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.Count">
            <summary>
              Counts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.Count(MongoDB.Document)">
            <summary>
              Counts the specified spec.
            </summary>
            <param name = "spec">The spec.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection.Insert(MongoDB.Document)">
            <summary>
              Inserts the specified doc.
            </summary>
            <param name = "document">The document.</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Insert(MongoDB.Document,System.Boolean)">
            <summary>
              Inserts the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Insert(System.Collections.Generic.IEnumerable{MongoDB.Document})">
            <summary>
              Inserts the specified docs.
            </summary>
            <param name = "documents">The docs.</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Insert(System.Collections.Generic.IEnumerable{MongoDB.Document},System.Boolean)">
            <summary>
              Inserts the specified docs.
            </summary>
            <param name = "documents">The docs.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Delete(MongoDB.Document)">
            <summary>
              Deletes the specified selector.
            </summary>
            <param name = "selector">The selector.</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Remove(MongoDB.Document)">
            <summary>
              Removes the specified selector.
            </summary>
            <param name = "selector">The selector.</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Delete(MongoDB.Document,System.Boolean)">
            <summary>
              Deletes the specified selector.
            </summary>
            <param name = "selector">The selector.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Remove(MongoDB.Document,System.Boolean)">
            <summary>
              Removes the specified selector.
            </summary>
            <param name = "selector">The selector.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Update(MongoDB.Document,System.Boolean)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Update(MongoDB.Document)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Update(MongoDB.Document,MongoDB.Document)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Update(MongoDB.Document,MongoDB.Document,System.Boolean)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Update(MongoDB.Document,MongoDB.Document,MongoDB.UpdateFlags)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
            <param name = "flags">The flags.</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Update(MongoDB.Document,MongoDB.Document,MongoDB.UpdateFlags,System.Boolean)">
            <summary>
              Updates the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
            <param name = "flags">The flags.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection.UpdateAll(MongoDB.Document,MongoDB.Document)">
            <summary>
              Updates all.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
        </member>
        <member name="M:MongoDB.MongoCollection.UpdateAll(MongoDB.Document,MongoDB.Document,System.Boolean)">
            <summary>
              Updates all.
            </summary>
            <param name = "document">The document.</param>
            <param name = "selector">The selector.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Save(MongoDB.Document)">
            <summary>
              Saves the specified doc.
            </summary>
            <param name = "document">The document.</param>
        </member>
        <member name="M:MongoDB.MongoCollection.Save(MongoDB.Document,System.Boolean)">
            <summary>
              Saves the specified doc.
            </summary>
            <param name = "document">The document.</param>
            <param name = "safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="P:MongoDB.MongoCollection.Database">
            <summary>
              Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:MongoDB.MongoCollection.Name">
            <summary>
              Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MongoDB.MongoCollection.DatabaseName">
            <summary>
              Gets the name of the database.
            </summary>
            <value>The name of the database.</value>
        </member>
        <member name="P:MongoDB.MongoCollection.FullName">
            <summary>
              Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:MongoDB.MongoCollection.Metadata">
            <summary>
              Gets the meta data.
            </summary>
            <value>The meta data.</value>
        </member>
        <member name="T:MongoDB.MongoOperationException">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.MongoOperationException.#ctor(System.String,MongoDB.Document)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoOperationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:MongoDB.MongoOperationException.#ctor(System.String,MongoDB.Document,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoOperationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:MongoDB.MongoOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoOperationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="P:MongoDB.MongoOperationException.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Model.MemberMapBase">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.MemberMapBase.#ctor(System.String,System.Type,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Model.MemberMapBase"/> class.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="memberReturnType">Type of the member return.</param>
            <param name="getter">The getter.</param>
            <param name="setter">The setter.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.MemberMapBase.GetValue(System.Object)">
            <summary>
              Gets the value.
            </summary>
            <param name = "instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.MemberMapBase.SetValue(System.Object,System.Object)">
            <summary>
              Sets the value on the specified instance.
            </summary>
            <param name = "instance">The instance.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.MemberMapBase.MemberName">
            <summary>
              Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.MemberMapBase.MemberReturnType">
            <summary>
              Gets the type of the member return.
            </summary>
            <value>The type of the member return.</value>
        </member>
        <member name="T:MongoDB.Configuration.Builders.IdOverridesBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Builders.IdOverridesBuilder.#ctor(MongoDB.Configuration.Mapping.Auto.IdOverrides)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Builders.MemberOverridesBuilder"/> class.
            </summary>
            <param name="overrides">The overrides.</param>
        </member>
        <member name="M:MongoDB.Configuration.Builders.IdOverridesBuilder.GeneratedBy``1">
            <summary>
            Generateds the by.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.IdOverridesBuilder.GeneratedBy(MongoDB.Configuration.IdGenerators.IIdGenerator)">
            <summary>
            Generateds the by.
            </summary>
            <param name="generator">The generator.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.IdOverridesBuilder.UnsavedValue(System.Object)">
            <summary>
            Unsaveds the value.
            </summary>
            <param name="unsavedValue">The unsaved value.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.UpdateFlags">
            <summary>
            Update flags.
            </summary>
            <remarks>
            Bits 2-31 are Reserved and must be set to 0. 
            </remarks>
        </member>
        <member name="F:MongoDB.UpdateFlags.None">
            <summary>
            Default none.
            </summary>
        </member>
        <member name="F:MongoDB.UpdateFlags.Upsert">
            <summary>
            If set, the database will insert the supplied object into the collection if no matching document is found.
            </summary>
        </member>
        <member name="F:MongoDB.UpdateFlags.MultiUpdate">
            <summary>
            If set, the database will update all matching objects in the collection. Otherwise only updates first matching doc.
            </summary>
        </member>
        <member name="T:MongoDB.Serialization.DocumentObjectDescriptorAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Serialization.DocumentObjectDescriptorAdapter.GenerateId(System.Object)">
            <summary>
            Generates the id.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.DocumentObjectDescriptorAdapter.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="mongoName">Name of the mongo.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.DocumentObjectDescriptorAdapter.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="mongoName">Name of the mongo.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Serialization.DocumentObjectDescriptorAdapter.GetMongoPropertyNames(System.Object)">
            <summary>
            Gets the mongo property names.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Results.CommandResultBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Results.CommandResultBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Results.CommandResultBase"/> class.
            </summary>
        </member>
        <member name="P:MongoDB.Results.CommandResultBase.ErrorMessage">
            <summary>
            Gets or sets the server error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:MongoDB.Results.CommandResultBase.Success">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MongoDB.Results.CommandResultBase"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MongoDB.Results.CommandResultBase.ExtendedProperties">
            <summary>
            Gets or sets the extended properties.
            </summary>
            <remarks>
            Stores all propertys which are not maped.
            </remarks>
            <value>The extended properties.</value>
        </member>
        <member name="T:MongoDB.Protocol.OpCode">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.OpCode.Reply">
            <summary>
              Reply to a client request. responseTo is set.
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.OpCode.Msg">
            <summary>
              Generic msg command followed by a string.
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.OpCode.Update">
            <summary>
              update document
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.OpCode.Insert">
            <summary>
              insert new document
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.OpCode.GetByOid">
            <summary>
              is this used?
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.OpCode.Query">
            <summary>
              query a collection
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.OpCode.GetMore">
            <summary>
              Get more data from a query. See Cursors.
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.OpCode.Delete">
            <summary>
              Delete documents
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.OpCode.KillCursors">
            <summary>
              Tell database client is done with a cursor.
            </summary>
        </member>
        <member name="T:MongoDB.Protocol.MsgMessage">
            <summary>
            Deprecated. OP_MSG sends a diagnostic message to the database.  
            The database sends back a fixed resonse.
            </summary>
            <remarks>
            struct {
                MsgHeader header;    // standard message header
                cstring   message;   // message for the database
            }
            </remarks>
        </member>
        <member name="M:MongoDB.Protocol.MsgMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.MsgMessage"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Protocol.MsgMessage.WriteBody(MongoDB.Bson.BsonWriter)">
            <summary>
            Writes the body.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:MongoDB.Protocol.MsgMessage.CalculateBodySize(MongoDB.Bson.BsonWriter)">
            <summary>
            Calculates the size of the body.
            </summary>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Protocol.MsgMessage.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:MongoDB.Protocol.MessageHeader">
            <summary>
            In general, each Message consists of a standard message header followed by request-specific data.
            </summary>
            <remarks>
            struct {
                 int32   messageLength;  // total size of the message, including the 4 bytes of length
                 int32   requestID;      // client or database-generated identifier for this message
                 int32   responseTo;     // requestID from the original request (used in reponses from db)
                 int32   opCode;         // request type - see table below
            }
            </remarks>
        </member>
        <member name="M:MongoDB.Protocol.MessageHeader.#ctor(MongoDB.Protocol.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.MessageHeader"/> class.
            </summary>
            <param name="opCode">The op code.</param>
        </member>
        <member name="M:MongoDB.Protocol.MessageHeader.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MongoDB.Protocol.MessageHeader.MessageLength">
            <summary>
            Total size of the message, including the 4 bytes of length.
            </summary>
            <value>The length of the message.</value>
        </member>
        <member name="P:MongoDB.Protocol.MessageHeader.RequestId">
            <summary>
            Client or database-generated identifier for this message.
            </summary>
            <value>The request id.</value>
        </member>
        <member name="P:MongoDB.Protocol.MessageHeader.ResponseTo">
            <summary>
            RequestID from the original request (used in reponses from db).
            </summary>
            <value>The response to.</value>
        </member>
        <member name="P:MongoDB.Protocol.MessageHeader.OpCode">
            <summary>
            Request type
            </summary>
            <value>The op code.</value>
        </member>
        <member name="T:MongoDB.ICursor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.ICursor.Spec(MongoDB.Document)">
            <summary>
            Specs the specified spec.
            </summary>
            <param name="spec">The spec.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor.Limit(System.Int32)">
            <summary>
            Limits the specified limit.
            </summary>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor.Skip(System.Int32)">
            <summary>
            Skips the specified skip.
            </summary>
            <param name="skip">The skip.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor.Fields(MongoDB.Document)">
            <summary>
            Fieldses the specified fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor.Options(MongoDB.QueryOptions)">
            <summary>
            Optionses the specified options.
            </summary>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor.Sort(System.String)">
            <summary>
            Sorts the specified field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor.Sort(System.String,MongoDB.IndexOrder)">
            <summary>
            Sorts the specified field.
            </summary>
            <param name="field">The field.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor.Sort(MongoDB.Document)">
            <summary>
            Sorts the specified fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor.Hint(MongoDB.Document)">
            <summary>
            Hints the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>        
        </member>
        <member name="M:MongoDB.ICursor.KeepCursor(System.Boolean)">
            <summary>
            Keeps the cursor open.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
            <remarks>
            By default cursors are closed automaticly after documents 
            are Enumerated. 
            </remarks>
        </member>
        <member name="M:MongoDB.ICursor.Snapshot">
            <summary>
            Snapshots this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor.Explain">
            <summary>
            Explains this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MongoDB.ICursor.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MongoDB.ICursor.IsModifiable">
            <summary>
            Gets a value indicating whether this instance is modifiable.
            </summary>
            <value>
            	<c>true</c> if this instance is modifiable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.ICursor.Documents">
            <summary>
            Gets the documents.
            </summary>
            <value>The documents.</value>
        </member>
        <member name="T:MongoDB.MongoRegexOption">
            <summary>
            Mongo Regex options
            </summary>
        </member>
        <member name="F:MongoDB.MongoRegexOption.None">
            <summary>
            Specifies that no options are set.
            </summary>
        </member>
        <member name="F:MongoDB.MongoRegexOption.IgnoreCase">
            <summary>
            i - Specifies case-insensitive matching.
            </summary>
        </member>
        <member name="F:MongoDB.MongoRegexOption.Multiline">
            <summary>
            m - Multiline mode. Changes the meaning of ^ and $ so they match at the beginning 
            and end, respectively, of any line, and not just the beginning and end of the 
            entire string. 
            </summary>
        </member>
        <member name="F:MongoDB.MongoRegexOption.IgnorePatternWhitespace">
            <summary>
            g - Eliminates unescaped white space from the pattern. 
            </summary>
        </member>
        <member name="T:MongoDB.MongoDatabase">
            <summary>
            </summary>
        </member>
        <member name="T:MongoDB.IMongoDatabase">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.IMongoDatabase.GetCollectionNames">
            <summary>
            Gets the collection names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.GetCollection(System.String)">
            <summary>
            Gets the collection.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.GetCollection``1(System.String)">
            <summary>
            Gets the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.GetCollection``1">
            <summary>
            Gets the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.FollowReference(MongoDB.DBRef)">
            <summary>
            Gets the document that a reference is pointing to.
            </summary>
            <param name="reference">The reference.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.FollowReference``1(MongoDB.DBRef)">
            <summary>
            Follows the reference.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reference">The reference.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.GetLastError">
            <summary>
            Most operations do not have a return code in order to save the client from having to wait for results.
            GetLastError can be called to retrieve the return code if clients want one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.GetLastError(System.Boolean)">
            <summary>
            Retrieves the last error and forces the database to fsync all files before returning.
            </summary>
            <param name="fsync">if set to <c>true</c> [fsync].</param>
            <returns></returns>
            <remarks>
            Server version 1.3+
            </remarks>
        </member>
        <member name="M:MongoDB.IMongoDatabase.GetPreviousError">
            <summary>
            Call after sending a bulk operation to the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.GetSisterDatabase(System.String)">
            <summary>
            Gets the sister database on the same Mongo connection with the given name.
            </summary>
            <param name="sisterDatabaseName">Name of the sister database.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.ResetError">
            <summary>
              Resets last error.  This is good to call before a bulk operation.
            </summary>
        </member>
        <member name="M:MongoDB.IMongoDatabase.Eval(System.String)">
            <summary>
            Evals the specified javascript.
            </summary>
            <param name="javascript">The javascript.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.Eval(System.String,MongoDB.Document)">
            <summary>
            Evals the specified javascript.
            </summary>
            <param name="javascript">The javascript.</param>
            <param name="scope">The scope.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.Eval(MongoDB.CodeWScope)">
            <summary>
            Evals the specified code scope.
            </summary>
            <param name="codeScope">The code scope.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.SendCommand(System.String)">
            <summary>
            Sends the command.
            </summary>
            <param name="commandName">The command name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.SendCommand(MongoDB.Document)">
            <summary>
            Sends the command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.IMongoDatabase.SendCommand(System.Type,MongoDB.Document)">
            <summary>
            Sends the command.
            </summary>
            <param name="rootType">Type of serialization root.</param>
            <param name="command">The CMD.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.IMongoDatabase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MongoDB.IMongoDatabase.Metadata">
            <summary>
            Gets the meta data.
            </summary>
            <value>The meta data.</value>
        </member>
        <member name="P:MongoDB.IMongoDatabase.Javascript">
            <summary>
            Gets the javascript.
            </summary>
            <value>The javascript.</value>
        </member>
        <member name="P:MongoDB.IMongoDatabase.Item(System.String)">
            <summary>
            Gets the <see cref="T:MongoDB.IMongoCollection"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="M:MongoDB.MongoDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoDatabase"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:MongoDB.MongoDatabase.#ctor(MongoDB.Configuration.MongoConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoDatabase"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:MongoDB.MongoDatabase.#ctor(MongoDB.Configuration.MongoConfiguration,MongoDB.Connections.Connection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoDatabase"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="connection">The conn.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:MongoDB.MongoDatabase.GetCollectionNames">
            <summary>
              Gets the collection names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.GetCollection(System.String)">
            <summary>
              Gets the collection.
            </summary>
            <param name = "name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.GetCollection``1(System.String)">
            <summary>
              Gets the collection.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.GetCollection``1">
            <summary>
              Gets the collection.
            </summary>
            <typeparam name = "T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.FollowReference(MongoDB.DBRef)">
            <summary>
              Gets the document that a reference is pointing to.
            </summary>
            <param name = "reference">The reference.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.FollowReference``1(MongoDB.DBRef)">
            <summary>
              Follows the reference.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "reference">The reference.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.GetLastError">
            <summary>
              Most operations do not have a return code in order to save the client from having to wait for results.
              GetLastError can be called to retrieve the return code if clients want one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.GetLastError(System.Boolean)">
            <summary>
              Retrieves the last error and forces the database to fsync all files before returning.
            </summary>
            <param name = "fsync">if set to <c>true</c> [fsync].</param>
            <returns></returns>
            <remarks>
              Server version 1.3+
            </remarks>
        </member>
        <member name="M:MongoDB.MongoDatabase.GetPreviousError">
            <summary>
              Call after sending a bulk operation to the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.GetSisterDatabase(System.String)">
            <summary>
              Gets the sister database on the same Mongo connection with the given name.
            </summary>
            <param name = "sisterDatabaseName">Name of the sister database.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.ResetError">
            <summary>
              Resets last error.  This is good to call before a bulk operation.
            </summary>
        </member>
        <member name="M:MongoDB.MongoDatabase.Eval(System.String)">
            <summary>
              Evals the specified javascript.
            </summary>
            <param name = "javascript">The javascript.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.Eval(System.String,MongoDB.Document)">
            <summary>
              Evals the specified javascript.
            </summary>
            <param name = "javascript">The javascript.</param>
            <param name = "scope">The scope.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.Eval(MongoDB.CodeWScope)">
            <summary>
              Evals the specified code scope.
            </summary>
            <param name = "codeScope">The code scope.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.SendCommand(System.String)">
            <summary>
              Sends the command.
            </summary>
            <param name = "commandName">The command name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.SendCommand(MongoDB.Document)">
            <summary>
              Sends the command.
            </summary>
            <param name = "command">The CMD.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.SendCommand(System.Type,MongoDB.Document)">
            <summary>
              Sends the command.
            </summary>
            <param name = "rootType">Type of serialization root.</param>
            <param name = "command">The CMD.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.SendCommand``1(System.String)">
            <summary>
              Sends the command.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "commandName">Name of the command.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.SendCommand``1(System.Object)">
            <summary>
              Sends the command.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoDatabase.SendCommand``1(System.Type,System.Object)">
            <summary>
              Sends the command.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "rootType">Type of serialization root.</param>
            <param name = "command">The command.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.MongoDatabase.Name">
            <summary>
              Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MongoDB.MongoDatabase.Metadata">
            <summary>
              Gets the meta data.
            </summary>
            <value>The meta data.</value>
        </member>
        <member name="P:MongoDB.MongoDatabase.Javascript">
            <summary>
              Gets the javascript.
            </summary>
            <value>The javascript.</value>
        </member>
        <member name="P:MongoDB.MongoDatabase.Item(System.String)">
            <summary>
              Gets the <see cref="T:MongoDB.IMongoCollection"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:MongoDB.MongoCollection`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.MongoCollection`1.#ctor(MongoDB.Configuration.MongoConfiguration,MongoDB.Connections.Connection,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoCollection`1"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="connection">The connection.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="collectionName">The name.</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.FindOne(System.String)">
            <summary>
            Finds and returns the first document in a selector query.
            </summary>
            <param name="javascriptWhere">The where.</param>
            <returns>
            A <see cref="T:MongoDB.Document"/> from the collection.
            </returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.FindOne(System.Object)">
            <summary>
            Finds and returns the first document in a query.
            </summary>
            <param name="spec">A <see cref="T:MongoDB.Document"/> representing the query.</param>
            <returns>
            A <see cref="T:MongoDB.Document"/> from the collection.
            </returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.FindAll">
            <summary>
            Finds all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Find(System.String)">
            <summary>
            Finds the specified where.
            </summary>
            <param name="javascriptWhere">The where.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Find(System.Object)">
            <summary>
            Finds the specified spec.
            </summary>
            <param name="spec">The spec.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Find(System.Object,System.Object)">
            <summary>
            Finds the specified spec.
            </summary>
            <param name="spec">The spec.</param>
            <param name="fields"></param>
            <returns>A <see cref="T:MongoDB.ICursor"/></returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Find(System.Object,System.Int32,System.Int32)">
            <summary>
            Finds the specified spec.
            </summary>
            <param name="spec">The spec.</param>
            <param name="limit">The limit.</param>
            <param name="skip">The skip.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Find(System.Object,System.Int32,System.Int32,System.Object)">
            <summary>
            Finds the specified spec.
            </summary>
            <param name="spec">The spec.</param>
            <param name="limit">The limit.</param>
            <param name="skip">The skip.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.FindAndModify(System.Object,System.Object)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.FindAndModify(System.Object,System.Object,System.Object)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
            <see cref="T:MongoDB.IndexOrder"/>
        </member>
        <member name="M:MongoDB.MongoCollection`1.FindAndModify(System.Object,System.Object,System.Boolean)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.FindAndModify(System.Object,System.Object,System.Object,System.Boolean)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the
            <see cref="T:MongoDB.IndexOrder"/></param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.FindAndModify(System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Executes a query and atomically applies a modifier operation to the first document returning the original document
            by default.
            </summary>
            <param name="document">The document.</param>
            <param name="spec"><see cref="T:MongoDB.Document"/> to find the document.</param>
            <param name="sort"><see cref="T:MongoDB.Document"/> containing the names of columns to sort on with the values being the
            <see cref="T:MongoDB.IndexOrder"/></param>
            <param name="fields">The fields.</param>
            <param name="remove">if set to <c>true</c> [remove].</param>
            <param name="returnNew">if set to <c>true</c> [return new].</param>
            <param name="upsert">if set to <c>true</c> [upsert].</param>
            <returns>A <see cref="T:MongoDB.Document"/></returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.MapReduce">
            <summary>
            Entrypoint into executing a map/reduce query against the collection.
            </summary>
            <returns>A <see cref="M:MongoDB.MongoCollection`1.MapReduce"/></returns>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Count">
            <summary>
              Count all items in the collection.
            </summary>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Count(System.Object)">
            <summary>
            Count all items in a collection that match the query spec.
            </summary>
            <param name="spec">The spec.</param>
            <returns></returns>
            <remarks>
            It will return 0 if the collection doesn't exist yet.
            </remarks>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Insert(System.Object,System.Boolean)">
            <summary>
              Inserts the Document into the collection.
            </summary>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Insert(System.Object)">
            <summary>
            Inserts the specified doc.
            </summary>
            <param name="document">The doc.</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Inserts all.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="documents">The documents.</param>
            <param name="safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inserts the specified documents.
            </summary>
            <param name="documents">The documents.</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Delete(System.Object,System.Boolean)">
            <summary>
            Deletes documents from the collection according to the spec.
            </summary>
            <param name="selector">The selector.</param>
            <param name="safemode">if set to <c>true</c> [safemode].</param>
            <remarks>
            An empty document will match all documents in the collection and effectively truncate it.
            </remarks>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Remove(System.Object,System.Boolean)">
            <summary>
            Remove documents from the collection according to the selector.
            </summary>
            <param name="selector">The selector.</param>
            <param name="safemode">if set to <c>true</c> [safemode].</param>
            <remarks>
            An empty document will match all documents in the collection and effectively truncate it.
            See the safemode description in the class description
            </remarks>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Delete(System.Object)">
            <summary>
            Deletes documents from the collection according to the spec.
            </summary>
            <param name="selector">The selector.</param>
            <remarks>
            An empty document will match all documents in the collection and effectively truncate it.
            </remarks>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Remove(System.Object)">
            <summary>
            Remove documents from the collection according to the selector.
            </summary>
            <param name="selector">The selector.</param>
            <remarks>
            An empty document will match all documents in the collection and effectively truncate it.
            </remarks>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Update(System.Object,System.Boolean)">
            <summary>
            Updates the specified document.
            </summary>
            <param name="document">The document.</param>
            <param name="safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Update(System.Object)">
            <summary>
            Updates a document with the data in doc as found by the selector.
            </summary>
            <param name="document">The document.</param>
            <remarks>
            _id will be used in the document to create a selector.  If it isn't in
            the document then it is assumed that the document is new and an upsert is sent to the database
            instead.
            </remarks>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Update(System.Object,System.Object,System.Boolean)">
            <summary>
            Updates the specified document.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Update(System.Object,System.Object)">
            <summary>
            Updates a document with the data in doc as found by the selector.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Update(System.Object,System.Object,MongoDB.UpdateFlags,System.Boolean)">
            <summary>
            Updates the specified document.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="flags">The flags.</param>
            <param name="safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Update(System.Object,System.Object,MongoDB.UpdateFlags)">
            <summary>
            Updates a document with the data in doc as found by the selector.
            </summary>
            <param name="document">The <see cref="T:MongoDB.Document"/> to update with</param>
            <param name="selector">The query spec to find the document to update.</param>
            <param name="flags"><see cref="T:MongoDB.UpdateFlags"/></param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.UpdateAll(System.Object,System.Object)">
            <summary>
            Runs a multiple update query against the database.  It will wrap any
            doc with $set if the passed in doc doesn't contain any '$' ops.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.UpdateAll(System.Object,System.Object,System.Boolean)">
            <summary>
            Updates all.
            </summary>
            <param name="document">The document.</param>
            <param name="selector">The selector.</param>
            <param name="safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Save(System.Object)">
            <summary>
            Saves a document to the database using an upsert.
            </summary>
            <param name="document">The document.</param>
            <remarks>
            The document will contain the _id that is saved to the database.  This is really just an alias
            to Update(Document) to maintain consistency between drivers.
            </remarks>
        </member>
        <member name="M:MongoDB.MongoCollection`1.Save(System.Object,System.Boolean)">
            <summary>
            Saves a document to the database using an upsert.
            </summary>
            <param name="document">The document.</param>
            <param name="safemode">if set to <c>true</c> [safemode].</param>
            <remarks>
            The document will contain the _id that is saved to the database.  This is really just an alias
            to Update(Document) to maintain consistency between drivers.
            </remarks>
        </member>
        <member name="M:MongoDB.MongoCollection`1.CheckError(System.Boolean)">
            <summary>
            Checks the error.
            </summary>
            <param name="safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.CheckPreviousError(System.Boolean)">
            <summary>
            Checks the previous error.
            </summary>
            <param name="safemode">if set to <c>true</c> [safemode].</param>
        </member>
        <member name="M:MongoDB.MongoCollection`1.EnsureUpdateDocument(System.Object)">
            <summary>
            Ensures the update document.
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.MongoCollection`1.Database">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:MongoDB.MongoCollection`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MongoDB.MongoCollection`1.DatabaseName">
            <summary>
            Gets or sets the name of the database.
            </summary>
            <value>The name of the database.</value>
        </member>
        <member name="P:MongoDB.MongoCollection`1.FullName">
            <summary>
            Gets the full name including database name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:MongoDB.MongoCollection`1.Metadata">
            <summary>
            Gets the meta data.
            </summary>
            <value>The meta data.</value>
        </member>
        <member name="T:MongoDB.MongoDuplicateKeyUpdateException">
            <summary>
            Raised when an update action causes a unique constraint violation in an index.
            </summary>
            <remarks>
            It is only another class because Mongo makes a distinction and it may be helpful.
            </remarks>
        </member>
        <member name="T:MongoDB.MongoDuplicateKeyException">
            <summary>
            Raised when an action causes a unique constraint violation in an index. 
            </summary>
        </member>
        <member name="M:MongoDB.MongoDuplicateKeyException.#ctor(System.String,MongoDB.Document)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoDuplicateKeyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:MongoDB.MongoDuplicateKeyException.#ctor(System.String,MongoDB.Document,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoDuplicateKeyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:MongoDB.MongoDuplicateKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoDuplicateKeyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:MongoDB.MongoDuplicateKeyUpdateException.#ctor(System.String,MongoDB.Document)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoDuplicateKeyUpdateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:MongoDB.MongoDuplicateKeyUpdateException.#ctor(System.String,MongoDB.Document,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoDuplicateKeyUpdateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:MongoDB.MongoDuplicateKeyUpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoDuplicateKeyUpdateException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:MongoDB.MongoCommandException">
            <summary>
              Raised when a command returns a failure message.
            </summary>
        </member>
        <member name="M:MongoDB.MongoCommandException.#ctor(System.String,MongoDB.Document,MongoDB.Document)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.MongoCommandException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:MongoDB.MongoCommandException.#ctor(System.String,MongoDB.Document,MongoDB.Document,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.MongoCommandException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
            <param name="command">The command.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:MongoDB.MongoCommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoCommandException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="P:MongoDB.MongoCommandException.Error">
            <summary>
              Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:MongoDB.MongoCommandException.Command">
            <summary>
              Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="T:MongoDB.Connections.RawConnection">
            <summary>
            Represents a raw connection on the wire which is managed by the 
            connection pool.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.RawConnection.#ctor(MongoDB.MongoServerEndPoint,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Connections.RawConnection"/> class.
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="connectionTimeout">The connection timeout.</param>
        </member>
        <member name="M:MongoDB.Connections.RawConnection.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:MongoDB.Connections.RawConnection"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.RawConnection.GetStream">
            <summary>
            Gets the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.RawConnection.IsAuthenticated(System.String)">
            <summary>
            Determines whether the specified database name is authenticated.
            </summary>
            <param name="databaseName">Name of the database.</param>
            <returns>
            	<c>true</c> if the specified database name is authenticated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MongoDB.Connections.RawConnection.MarkAuthenticated(System.String)">
            <summary>
            Marks as authenticated.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.RawConnection.MarkAsInvalid">
            <summary>
            Marks as invalid.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.RawConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:MongoDB.Connections.RawConnection.IsInvalid">
            <summary>
            Gets or sets a value indicating whether this instance is invalid.
            </summary>
            <value>
            	<c>true</c> if this instance is invalid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Connections.RawConnection.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Connections.RawConnection.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>The creation time.</value>
        </member>
        <member name="P:MongoDB.Connections.RawConnection.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
            <value>The end point.</value>
        </member>
        <member name="T:MongoDB.Configuration.Section.ConnectionElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:MongoDB.Configuration.Section.ConnectionElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MongoDB.Configuration.Section.ConnectionElement.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MongoDB.Configuration.Section.ConnectionElement.IsDefault">
            <summary>
            Gets a value indicating whether this instance is default.
            </summary>
            <value>
            	<c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DefaultIdGeneratorConvention">
            <summary>
            
            </summary>
        </member>
        <member name="F:MongoDB.Configuration.Mapping.Conventions.DefaultIdGeneratorConvention.Instance">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DefaultIdGeneratorConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DefaultIdGeneratorConvention"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DefaultIdGeneratorConvention.GetGenerator(System.Type)">
            <summary>
            Gets the generator.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.IMemberFinder">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IMemberFinder.FindMembers(System.Type)">
            <summary>
            Finds the members.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.DictionaryAdapters.GenericDictionaryDictionaryAdapter`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.DictionaryAdapters.GenericDictionaryDictionaryAdapter`2.CreateDictionary(MongoDB.Document)">
            <summary>
            Creates the dictionary.
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.DictionaryAdapters.GenericDictionaryDictionaryAdapter`2.GetDocument(System.Object)">
            <summary>
            Gets the pairs.
            </summary>
            <param name="dictionary">The collection.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Configuration.DictionaryAdapters.GenericDictionaryDictionaryAdapter`2.KeyType">
            <summary>
            Gets the type of the key.
            </summary>
            <value>The type of the key.</value>
        </member>
        <member name="P:MongoDB.Configuration.DictionaryAdapters.GenericDictionaryDictionaryAdapter`2.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="T:MongoDB.Bson.IBsonObjectDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectDescriptor.BeginObject(System.Object)">
            <summary>
            Begins the object.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectDescriptor.BeginArray(System.Object)">
            <summary>
            Begins the array.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectDescriptor.GetProperties(System.Object)">
            <summary>
            Gets the propertiess.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectDescriptor.BeginProperty(System.Object,MongoDB.Bson.BsonProperty)">
            <summary>
            Begins the property.
            </summary>
            <param name="instance">The instance.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectDescriptor.EndProperty(System.Object,MongoDB.Bson.BsonProperty)">
            <summary>
            Ends the property.
            </summary>
            <param name="instance">The instance.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectDescriptor.EndArray(System.Object)">
            <summary>
            Ends the array.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectDescriptor.EndObject(System.Object)">
            <summary>
            Ends the object.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectDescriptor.IsArray(System.Object)">
            <summary>
            Determines whether the specified instance is array.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            	<c>true</c> if the specified instance is array; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MongoDB.Bson.IBsonObjectDescriptor.IsObject(System.Object)">
            <summary>
            Determines whether the specified instance is object.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            	<c>true</c> if the specified instance is object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MongoDB.Linq.MongoQueryProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryProvider.#ctor(MongoDB.IMongoDatabase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Linq.MongoQueryProvider"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="collectionName">Name of the collection.</param>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates the query.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable"/> object that can evaluate the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the specified expression tree.
            </returns>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryProvider.GetQueryObject(System.Linq.Expressions.Expression)">
            <summary>
            Gets the query object.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryProvider.ExecuteQueryObject(MongoDB.Linq.MongoQueryObject)">
            <summary>
            Executes the query object.
            </summary>
            <param name="queryObject">The query object.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryProvider.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether this instance [can be evaluated locally] the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>
            	<c>true</c> if this instance [can be evaluated locally] the specified expression; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryProvider.ExecuteCount(MongoDB.Linq.MongoQueryObject)">
            <summary>
            Executes the count.
            </summary>
            <param name="queryObject">The query object.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryProvider.CollectionName">
            <summary>
            Gets the name of the collection.
            </summary>
            <value>The name of the collection.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryProvider.Database">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Linq.MongoQueryObject"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryObject.AddSort(System.String,System.Int32)">
            <summary>
            Adds the sort.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryObject.SetQueryDocument(MongoDB.Document)">
            <summary>
            Sets the query document.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryObject.SetWhereClause(System.String)">
            <summary>
            Sets the where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryObject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.Aggregator">
            <summary>
            Gets or sets the aggregator.
            </summary>
            <value>The aggregator.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.CollectionName">
            <summary>
            Gets or sets the name of the collection.
            </summary>
            <value>The name of the collection.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.Database">
            <summary>
            Gets or sets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.DocumentType">
            <summary>
            Gets or sets the type of the document.
            </summary>
            <value>The type of the document.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.FinalizerFunction">
            <summary>
            Gets or sets the finalizer function.
            </summary>
            <value>The finalizer function.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.IsCount">
            <summary>
            Gets or sets a value indicating whether this is a count query.
            </summary>
            <value><c>true</c> if this is a count query; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.IsMapReduce">
            <summary>
            Gets or sets a value indicating whether this instance is map reduce.
            </summary>
            <value>
            	<c>true</c> if this instance is map reduce; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.MapFunction">
            <summary>
            Gets or sets the map function.
            </summary>
            <value>The map function.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.ReduceFunction">
            <summary>
            Gets or sets the reduce function.
            </summary>
            <value>The reduce function.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.NumberToSkip">
            <summary>
            Gets or sets the number to skip.
            </summary>
            <value>The number to skip.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.NumberToLimit">
            <summary>
            Gets or sets the number to limit.
            </summary>
            <value>The number to limit.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.Projector">
            <summary>
            Gets or sets the projector.
            </summary>
            <value>The projector.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.Query">
            <summary>
            Gets or sets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="P:MongoDB.Linq.MongoQueryObject.Sort">
            <summary>
            Gets the sort.
            </summary>
            <value>The sort.</value>
        </member>
        <member name="T:MongoDB.Connections.SimpleConnectionFactory">
            <summary>
            Simple connection factory which only creates and closes connections.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.SimpleConnectionFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Connections.SimpleConnectionFactory"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:MongoDB.Connections.SimpleConnectionFactory.Open">
            <summary>
            Opens a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.SimpleConnectionFactory.Close(MongoDB.Connections.RawConnection)">
            <summary>
            Closes the specified connection.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Model.PersistentMemberMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.PersistentMemberMap.#ctor(System.String,System.Type,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Object,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Model.PersistentMemberMap"/> class.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="memberReturnType">Type of the member return.</param>
            <param name="getter">The getter.</param>
            <param name="setter">The setter.</param>
            <param name="defaultValue">The default value.</param>
            <param name="alias">The alias.</param>
            <param name="persistDefaultValue">if set to <c>true</c> [persist default value].</param>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.PersistentMemberMap.Alias">
            <summary>
            Gets the alias in which to store the value.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.PersistentMemberMap.DefaultValue">
            <summary>
            Gets a value indicating whether [default value].
            </summary>
            <value><c>true</c> if [default value]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.PersistentMemberMap.PersistDefaultValue">
            <summary>
            Gets or sets a value indicating whether the default value should be persisted.
            </summary>
            <value><c>true</c> if the default value should be persisted; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Model.IdMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.IdMap.#ctor(System.String,System.Type,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},MongoDB.Configuration.IdGenerators.IIdGenerator,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Model.IdMap"/> class.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="memberType">Type of the member.</param>
            <param name="getter">The getter.</param>
            <param name="setter">The setter.</param>
            <param name="generator">The generator.</param>
            <param name="unsavedValue">The unsaved value.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.IdMap.Generate(System.Object)">
            <summary>
            Generates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.IdMap.UnsavedValue">
            <summary>
            Gets the id's unsaved value.
            </summary>
            <value>The unsaved value.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.AutoMapper">
            <summary>
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.IAutoMapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.IAutoMapper.CreateClassMap(System.Type,System.Func{System.Type,MongoDB.Configuration.Mapping.Model.IClassMap})">
            <summary>
            Creates the class map.
            </summary>
            <param name="classType">Type of the entity.</param>
            <param name="classMapFinder">The class map finder.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMapper.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Auto.AutoMapper"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMapper.#ctor(MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Auto.AutoMapper"/> class.
            </summary>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMapper.#ctor(System.Func{System.Type,System.Boolean})">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Auto.AutoMapper"/> class.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMapper.#ctor(MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile,System.Func{System.Type,System.Boolean})">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Auto.AutoMapper"/> class.
            </summary>
            <param name="profile">The profile.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMapper.CreateClassMap(System.Type,System.Func{System.Type,MongoDB.Configuration.Mapping.Model.IClassMap})">
            <summary>
              Creates the class map.
            </summary>
            <param name = "classType">Type of the entity.</param>
            <param name = "classMapFinder">The class map finder.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AutoMapper.CreateClassMap(System.Type)">
            <summary>
              Creates the class map.
            </summary>
            <param name = "classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.IdGenerators.GuidCombGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.IdGenerators.GuidCombGenerator.Generate(System.Object,MongoDB.Configuration.Mapping.Model.IdMap)">
            <summary>
            Generates an id for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="idMap">The id map.</param>
            <returns></returns>
            <remarks>
            This code was taken from NHibernate.
            </remarks>
        </member>
        <member name="T:MongoDB.Configuration.CollectionAdapters.GenericSetCollectionAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.CollectionAdapters.GenericSetCollectionAdapter.CreateCollection(System.Type,System.Object[])">
            <summary>
            Adds the element to instance.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="elements">The elements.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.CollectionAdapters.GenericSetCollectionAdapter.GetElementsFromCollection(System.Object)">
            <summary>
            Gets the elements from collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Code">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Code.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Code"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Code.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Code"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Code.Equals(MongoDB.Code)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name = "other">An object to compare with this object.</param>
            <returns>
              true if the current object is equal to the <paramref name = "other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.Code.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
              The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:MongoDB.Code.op_Equality(MongoDB.Code,MongoDB.Code)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Code.op_Inequality(MongoDB.Code,MongoDB.Code)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Code.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MongoDB.Code.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MongoDB.Code.Value">
            <summary>
              Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MongoDB.Bson.BsonProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Bson.BsonProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Bson.BsonProperty"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:MongoDB.Bson.BsonProperty.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MongoDB.Bson.BsonProperty.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MongoDB.Attributes.MongoIgnoreAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptorBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptorBase.ClassMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptorBase.#ctor(MongoDB.Configuration.Mapping.IMappingStore,MongoDB.Configuration.Mapping.Model.IClassMap)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptorBase"/> class.
            </summary>
            <param name="mappingStore">The mapping store.</param>
            <param name="classMap">The class map.</param>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptorBase.GetProperties">
            <summary>
            Gets the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptorBase.CreateProperty(System.String,System.Type,System.Object,System.Boolean)">
            <summary>
            Creates the property.
            </summary>
            <param name="alias">The alias.</param>
            <param name="valueType">Type of the value.</param>
            <param name="value">The value.</param>
            <param name="isDictionary">if set to <c>true</c> [is dictionary].</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptorBase.CreateProperty(System.String,MongoDB.Serialization.Descriptors.BsonPropertyValue)">
            <summary>
            Creates the property.
            </summary>
            <param name="alias">The alias.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptorBase.ShouldAddDiscriminator">
            <summary>
            Shoulds the persist discriminator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptorBase.GetAliasFromMemberName(System.String)">
            <summary>
            Gets the name of the alias from member.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptorBase.JavascriptMemberNameReplacer">
            <summary>
            This is an extremely rudimentary lexer designed solely for efficiency.
            </summary>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.DocumentClassMapPropertyDescriptor.#ctor(MongoDB.Configuration.Mapping.IMappingStore,MongoDB.Configuration.Mapping.Model.IClassMap,MongoDB.Document)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.Descriptors.DocumentClassMapPropertyDescriptor"/> class.
            </summary>
            <param name="mappingStore">The mapping store.</param>
            <param name="classMap">The class map.</param>
            <param name="document">The document.</param>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.DocumentClassMapPropertyDescriptor.GetProperties">
            <summary>
            Gets the property names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.DocumentClassMapPropertyDescriptor.GetValue(System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Protocol.InsertMessage">
            <summary>
            The OP_INSERT message is used to insert one or more documents into a collection.
            </summary>
            <remarks>
            struct {
            MsgHeader header;             // standard message header
            int32     ZERO;               // 0 - reserved for future use
            cstring   fullCollectionName; // "dbname.collectionname"
            BSON[]    documents;          // one or more documents to insert into the collection
            }
            </remarks>
        </member>
        <member name="M:MongoDB.Protocol.InsertMessage.#ctor(MongoDB.Bson.BsonWriterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.InsertMessage"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Protocol.InsertMessage.Write(System.IO.Stream)">
            <summary>
            Writes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:MongoDB.Protocol.InsertMessage.ChunkMessage(MongoDB.Bson.BsonWriter)">
            <summary>
              Breaks down an insert message that may be too large into managable sizes.  
              When inserting only one document there will be only one chunk.  However chances
              are that when inserting thousands of documents at once there will be many.
            </summary>
        </member>
        <member name="M:MongoDB.Protocol.InsertMessage.CalculateBaseSize(MongoDB.Bson.BsonWriter)">
            <summary>
              The base size that all chunks will have.
            </summary>
        </member>
        <member name="M:MongoDB.Protocol.InsertMessage.WriteChunk(System.IO.Stream,MongoDB.Protocol.InsertMessage.MessageChunk)">
            <summary>
              Writes out a header and the chunk of documents.
            </summary>
            <param name = "stream"></param>
            <param name = "chunk"></param>
        </member>
        <member name="M:MongoDB.Protocol.InsertMessage.WriteHeader(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes the header.
            </summary>
            <param name="writer">The writer.</param>
            <param name="messageSize">Size of the MSG.</param>
        </member>
        <member name="P:MongoDB.Protocol.InsertMessage.FullCollectionName">
            <summary>
            Gets or sets the full name of the collection.
            </summary>
            <value>The full name of the collection.</value>
        </member>
        <member name="P:MongoDB.Protocol.InsertMessage.Documents">
            <summary>
            Gets or sets the documents.
            </summary>
            <value>The documents.</value>
        </member>
        <member name="T:MongoDB.Protocol.InsertMessage.MessageChunk">
            <summary>
            
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.InsertMessage.MessageChunk.Documents">
            <summary>
            
            </summary>
        </member>
        <member name="F:MongoDB.Protocol.InsertMessage.MessageChunk.Size">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.DBRef">
            <summary>
              Native type that maps to a database reference.  Use Database.FollowReference(DBRef) to retrieve the document
              that it refers to.
            </summary>
            <remarks>
              DBRefs are just a specification for a specially formatted Document.  At this time the database
              does no special handling of them. Any referential integrity must be maintained by the application
              not the database.
            </remarks>
        </member>
        <member name="M:MongoDB.DBRef.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.DBRef"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.DBRef.#ctor(MongoDB.Document)">
            <summary>
              Constructs a DBRef from a document that matches the DBref specification.
            </summary>
        </member>
        <member name="M:MongoDB.DBRef.#ctor(MongoDB.DBRef)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.DBRef"/> class.
            </summary>
            <param name="databaseReference">The database reference.</param>
        </member>
        <member name="M:MongoDB.DBRef.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.DBRef"/> class.
            </summary>
            <param name="collectionName">Name of the collection.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:MongoDB.DBRef.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:MongoDB.DBRef.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MongoDB.DBRef.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MongoDB.DBRef.FromDocument(MongoDB.Document)">
            <summary>
              Deprecated.  Use the new DBRef(Document) constructor instead.
            </summary>
        </member>
        <member name="M:MongoDB.DBRef.IsDocumentDBRef(MongoDB.Document)">
            <summary>
            Determines whether [is document DB ref] [the specified document].
            </summary>
            <param name="document">The document.</param>
            <returns>
            	<c>true</c> if [is document DB ref] [the specified document]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MongoDB.DBRef.op_Explicit(MongoDB.DBRef)~MongoDB.Document">
            <summary>
            Performs an explicit conversion from <see cref="T:MongoDB.DBRef"/> to <see cref="T:MongoDB.Document"/>.
            </summary>
            <param name="dbRef">The db ref.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MongoDB.DBRef.Equals(MongoDB.DBRef)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.DBRef.op_Equality(MongoDB.DBRef,MongoDB.DBRef)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.DBRef.op_Inequality(MongoDB.DBRef,MongoDB.DBRef)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:MongoDB.DBRef.CollectionName">
            <summary>
              The name of the collection the referenced document is in.
            </summary>
        </member>
        <member name="P:MongoDB.DBRef.Id">
            <summary>
              Object value of the id.  It isn't an Oid because document ids are not required to be oids.
            </summary>
        </member>
        <member name="P:MongoDB.DBRef.MetaData">
            <summary>
            An extension to the spec that allows storing of arbitrary data about a reference.
            </summary>
            <value>The meta data.</value>
            <remarks>
            This is a non-standard feature.
            </remarks>
        </member>
        <member name="T:MongoDB.Connections.Connection">
            <summary>
            Connection is a managment unit which uses a RawConnection from connection pool
            to comunicate with the server.
            <remarks>
            If an connection error occure, the RawConnection is transparently replaced
            by a new fresh connection.
            </remarks>
            </summary>
        </member>
        <member name="M:MongoDB.Connections.Connection.#ctor(MongoDB.Connections.IConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Connections.Connection"/> class.
            </summary>
            <param name="factory">The pool.</param>
        </member>
        <member name="M:MongoDB.Connections.Connection.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:MongoDB.Connections.Connection"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.Connection.SendTwoWayMessage(MongoDB.Protocol.IRequestMessage,System.String)">
            <summary>
            Sends the two way message.
            </summary>
            <param name="message">The MSG.</param>
            <param name="database">The database.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.Connection.SendTwoWayMessage``1(MongoDB.Protocol.IRequestMessage,MongoDB.Bson.BsonReaderSettings,System.String)">
            <summary>
            Used for sending a message that gets a reply such as a query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message.</param>
            <param name="readerSettings">The reader settings.</param>
            <param name="database">The database.</param>
            <returns></returns>
            <exception cref="T:System.IO.IOException">A reconnect will be issued but it is up to the caller to handle the error.</exception>
        </member>
        <member name="M:MongoDB.Connections.Connection.SendTwoWayMessageCore``1(MongoDB.Protocol.IRequestMessage,MongoDB.Bson.BsonReaderSettings)">
            <summary>
            Sends the two way message core.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message.</param>
            <param name="readerSettings">The reader settings.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.Connection.SendMessage(MongoDB.Protocol.IRequestMessage,System.String)">
            <summary>
            Used for sending a message that gets no reply such as insert or update.
            </summary>
            <param name="message">The message.</param>
            <param name="database">The database.</param>
            <exception cref="T:System.IO.IOException">A reconnect will be issued but it is up to the caller to handle the error.</exception>
        </member>
        <member name="M:MongoDB.Connections.Connection.SendMessageCore(MongoDB.Protocol.IRequestMessage)">
            <summary>
            Sends the message core.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MongoDB.Connections.Connection.SendMsgMessage(System.String)">
            <summary>
            Just sends a simple message string to the database. 
            </summary>
            <param name="message">
            A <see cref="T:System.String"/>
            </param>
        </member>
        <member name="M:MongoDB.Connections.Connection.Open">
            <summary>
            Opens this instance.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.Connection.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.Connection.ReplaceInvalidConnection">
            <summary>
            Replaces the invalid connection.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.Connection.GetStream">
            <summary>
            Gets the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.Connection.SendCommand(MongoDB.Serialization.ISerializationFactory,System.String,System.Type,MongoDB.Document)">
            <summary>
            Sends the command.
            </summary>
            <param name="factory">The factory.</param>
            <param name="database">The database.</param>
            <param name="rootType">Type of the command.</param>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.Connection.SendCommand``1(MongoDB.Serialization.ISerializationFactory,System.String,System.Type,System.Object)">
            <summary>
            Sends the command.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <param name="database">The database.</param>
            <param name="rootType">Type of serialization root.</param>
            <param name="command">The spec.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.Connection.SendCommandCore``1(MongoDB.Serialization.ISerializationFactory,System.String,System.Type,System.Object)">
            <summary>
            Sends the command core.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <param name="database">The database.</param>
            <param name="rootType">Type of serialization root.</param>
            <param name="command">The spec.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.Connection.AuthenticateIfRequired(System.String)">
            <summary>
            Authenticates the on first request.
            </summary>
            <param name="databaseName">Name of the database.</param>
        </member>
        <member name="M:MongoDB.Connections.Connection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.Connection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MongoDB.Connections.Connection.EnsureOpenConnection">
            <summary>
            Ensures the open connection.
            </summary>
        </member>
        <member name="P:MongoDB.Connections.Connection.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MongoDB.Connections.Connection.EndPoint">
            <summary>
            Gets the end point.
            </summary>
            <value>The end point.</value>
        </member>
        <member name="P:MongoDB.Connections.Connection.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Model.ExtendedPropertiesMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ExtendedPropertiesMap.#ctor(System.String,System.Type,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Model.ExtendedPropertiesMap"/> class.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="memberReturnType">Type of the member return.</param>
            <param name="getter">The getter.</param>
            <param name="setter">The setter.</param>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.#ctor(MongoDB.Configuration.Mapping.Auto.IAutoMappingProfile,MongoDB.Configuration.Mapping.Auto.ClassOverridesMap)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Auto.AutoMappingProfile"/> class.
            </summary>
            <param name="profile">The profile.</param>
            <param name="overrides">The overrides.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.FindExtendedPropertiesMember(System.Type)">
            <summary>
              Finds the extended properties member.
            </summary>
            <param name = "classType">Type of the class.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.FindIdMember(System.Type)">
            <summary>
              Gets the id member for the class type.
            </summary>
            <param name = "classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.FindMembers(System.Type)">
            <summary>
              Finds the members to map for the class type.
            </summary>
            <param name = "classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetAlias(System.Type,System.Reflection.MemberInfo)">
            <summary>
              Gets the property name for the member.
            </summary>
            <param name = "classType">Type of the entity.</param>
            <param name = "member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetCollectionName(System.Type)">
            <summary>
              Gets the collection name for the class type.
            </summary>
            <param name = "classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetCollectionAdapter(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
              Gets the type of the collection.
            </summary>
            <param name = "classType">Type of the class.</param>
            <param name = "member">The member.</param>
            <param name = "memberReturnType">Type of the member return.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetCollectionElementType(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
              Gets the type of the collection element.
            </summary>
            <param name = "classType">Type of the class.</param>
            <param name = "member">The member.</param>
            <param name = "memberReturnType">Type of the member return.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetDefaultValue(System.Type,System.Reflection.MemberInfo)">
            <summary>
              Gets the default value.
            </summary>
            <param name = "classType">Type of the class.</param>
            <param name = "member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetDictionaryAdapter(System.Type,System.Reflection.MemberInfo,System.Type)">
            <summary>
              Gets the dictionary adadpter.
            </summary>
            <param name = "classType">Type of the class.</param>
            <param name = "member">The member.</param>
            <param name = "memberReturnType">Type of the member return.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetDiscriminator(System.Type)">
            <summary>
              Gets the descriminator for the class type.
            </summary>
            <param name = "classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetDiscriminatorAlias(System.Type)">
            <summary>
              Gets the property name of the discriminator for the class type.
            </summary>
            <param name = "classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetIdGenerator(System.Type,System.Reflection.MemberInfo)">
            <summary>
              Gets the id generator for the member.
            </summary>
            <param name = "classType"></param>
            <param name = "member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetIdUnsavedValue(System.Type,System.Reflection.MemberInfo)">
            <summary>
              Gets the unsaved value for the id.
            </summary>
            <param name = "classType">Type of the entity.</param>
            <param name = "member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetPersistDefaultValue(System.Type,System.Reflection.MemberInfo)">
            <summary>
              Gets a value indicating whether the member should be persisted if it is null.
            </summary>
            <param name = "classType">Type of the class.</param>
            <param name = "member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.IsSubClass(System.Type)">
            <summary>
              Indicates whether the class type is a sub class.
            </summary>
            <param name = "classType">Type of the class.</param>
            <returns>
              <c>true</c> if the classType is a sub class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.OverridableAutoMappingProfile.GetClassOverrideValue``1(System.Type,System.Func{MongoDB.Configuration.Mapping.Auto.ClassOverrides,``0},System.Func{``0,System.Boolean},``0)">
            <summary>
              Gets the class override value.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "classType">Type of the class.</param>
            <param name = "overrides">The overrides.</param>
            <param name = "accept">The accept.</param>
            <param name = "defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.DefaultMemberFinder">
            <summary>
            
            </summary>
        </member>
        <member name="F:MongoDB.Configuration.Mapping.Auto.DefaultMemberFinder.Instance">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.DefaultMemberFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Auto.DefaultMemberFinder"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.DefaultMemberFinder.FindMembers(System.Type)">
            <summary>
            Finds the members.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.BinarySubtype">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.BinarySubtype.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.BinarySubtype.General">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.BinarySubtype.Md5">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.BinarySubtype.UserDefined">
            <summary>
            </summary>
        </member>
        <member name="T:MongoDB.Attributes.MongoAliasAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Attributes.MongoAliasAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Attributes.MongoAliasAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:MongoDB.Attributes.MongoAliasAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:MongoDB.Serialization.SerializationFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.Serialization.ISerializationFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Serialization.ISerializationFactory.GetBsonWriterSettings(System.Type)">
            <summary>
            Gets the bson writer settings.
            </summary>
            <param name="rootType">Type of the root.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.ISerializationFactory.GetCollectionName(System.Type)">
            <summary>
            Gets the name of the collection given the rootType.
            </summary>
            <param name="rootType">Type of the root.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.ISerializationFactory.GetObjectDescriptor(System.Type)">
            <summary>
            Gets the object descriptor.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.ISerializationFactory.GetBsonReaderSettings(System.Type)">
            <summary>
            Gets the bson reader settings.
            </summary>
            <param name="rootType">Type of the root.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.SerializationFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.SerializationFactory"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Serialization.SerializationFactory.#ctor(MongoDB.Configuration.MongoConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.SerializationFactory"/> class.
            </summary>
            <param name="configuration">The mongo configuration.</param>
        </member>
        <member name="M:MongoDB.Serialization.SerializationFactory.GetBsonBuilder(System.Type)">
            <summary>
            Gets the builder.
            </summary>
            <param name="rootType">Type of the root.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.SerializationFactory.GetBsonDescriptor(System.Type)">
            <summary>
            Gets the descriptor.
            </summary>
            <param name="rootType">Type of the root.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.SerializationFactory.GetBsonReaderSettings(System.Type)">
            <summary>
            Gets the bson reader settings.
            </summary>
            <param name="rootType">Type of the root.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.SerializationFactory.GetBsonWriterSettings(System.Type)">
            <summary>
            Gets the bson writer settings.
            </summary>
            <param name="rootType">Type of the root.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.SerializationFactory.GetCollectionName(System.Type)">
            <summary>
            Gets the name of the collection given the rootType.
            </summary>
            <param name="rootType">Type of the root.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.SerializationFactory.GetObjectDescriptor(System.Type)">
            <summary>
            Gets the object descriptor.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.DocumentPropertyDescriptor.#ctor(MongoDB.Document)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.Descriptors.DocumentPropertyDescriptor"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.DocumentPropertyDescriptor.GetProperties">
            <summary>
            Gets the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.DocumentPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Builders.ArrayBuilder.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.Builders.ArrayBuilder"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
        </member>
        <member name="M:MongoDB.Serialization.Builders.ArrayBuilder.AddProperty(System.String,System.Object)">
            <summary>
            Adds the property.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Serialization.Builders.ArrayBuilder.BuildObject">
            <summary>
            Builds the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Builders.ArrayBuilder.GetTypedList">
            <summary>
            Gets the typed list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Builders.ArrayBuilder.GetPropertyDescriptor(System.String)">
            <summary>
            Gets the type of the property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Builders.ArrayBuilder.GetResultListType">
            <summary>
              Gets the type of the result list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Builders.ArrayBuilder.CreateTypedList(System.Type)">
            <summary>
            Creates the typed list.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Serialization.Builders.ArrayBuilder.IsDocumentArray">
            <summary>
            Gets a value indicating whether this instance is document array.
            </summary>
            <value>
            	<c>true</c> if this instance is document array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MongoDB.MongoConnectionException">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.MongoConnectionException.#ctor(System.String,System.String,MongoDB.MongoServerEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="connectionString">The connection string.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionException.#ctor(System.String,System.String,MongoDB.MongoServerEndPoint,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="connectionString">The connection string.</param>
            <param name="endPoint">The end point.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionException.#ctor(System.String,MongoDB.Connections.Connection)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionException.#ctor(System.String,MongoDB.Connections.Connection,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="connection">The connection.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MongoDB.MongoConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoConnectionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="P:MongoDB.MongoConnectionException.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MongoDB.MongoConnectionException.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
            <value>The end point.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.IAliasConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.IAliasConvention.GetAlias(System.Reflection.MemberInfo)">
            <summary>
            Gets the alias.
            </summary>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Auto.AggregateAutoMapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AggregateAutoMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Auto.AggregateAutoMapper"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AggregateAutoMapper.AddAutoMapper(MongoDB.Configuration.Mapping.Auto.IAutoMapper)">
            <summary>
            Adds the auto mapper.
            </summary>
            <param name="autoMapper">The auto mapper.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Auto.AggregateAutoMapper.CreateClassMap(System.Type,System.Func{System.Type,MongoDB.Configuration.Mapping.Model.IClassMap})">
            <summary>
            Creates the class map.
            </summary>
            <param name="classType">Type of the entity.</param>
            <param name="classMapFinder">The class map finder.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Bson.BsonType">
            <summary>
            
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Number">
            <summary>
            
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.String">
            <summary>
            int32 
            cstring The int32 is the # bytes following (# of bytes in string + 1 for terminating NULL)
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Obj">
            <summary>
            bson object
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Array">
            <summary>
            bson object
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Binary">
            <summary>
            int32 byte byte[]  
            The first int32 is the # of bytes following the byte subtype
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Undefined">
            <summary>
            VOID  
            Conceptually equiValent to Javascript undefined.  Deprecated.
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Oid">
            <summary>
            byte[12]     
            12 byte object id.
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Boolean">
            <summary>
            byte     
            legal values: 0x00 -> false, 0x01 -> true
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Date">
            <summary>
            int64   
            milliseconds since epoch (e.g. new Date.getTime())
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Null">
            <summary>
            VOID   
            Mapped to Null in programming languages which have a Null value or type.  Conceptually equivalent to Javascript null.
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Regex">
            <summary>
            cstring cstring   
            first ctring is regex expression, second cstring are regex options
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Reference">
            <summary>
            int32 cstring byte[12]    
            Deprecated.  Please use a subobject instead
            The int32 is the length in bytes of the cstring.
            The cstring is the Namespace: full collection name.
            The byte array is a 12 byte object id. See note on data_oid.
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Code">
            <summary>
            Int32 cstring
            The int32 is the # bytes following (# of bytes in string + 1 
            for terminating NULL) and then the code as cstring. data_code should 
            be supported in BSON encoders/decoders, but has been deprecated in 
            favor of data_code_w_scope
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Symbol">
            <summary>
            String
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.CodeWScope">
            <summary>
            int32 
            int32 cstring bson_object  The first int32 is the total # of
            bytes (size of cstring + size of bson_object + 8 for the two int32s).
            The second int 32 is the size of the cstring (# of bytes in string + 1 for 
            terminating NULL). The cstring is the code. The bson_object is an object 
            mapping identifiers to values, representing the scope in which the code 
            should be evaluated.
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Integer">
            <summary>
            Int32
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Timestamp">
            <summary>
            Int64 - first 4 byte are a timestamp, next 4 byte are an incremented field
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.Long">
            <summary>
            Int64 - 64 bit integer 
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.MinKey">
            <summary>
            VOID - Special type that compares lower than all other types.
            </summary>
        </member>
        <member name="F:MongoDB.Bson.BsonType.MaxKey">
            <summary>
            VOID - Special type that compares higher than all other types.
            </summary>
        </member>
        <member name="T:MongoDB.Bson.BsonInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Bson.BsonInfo.#cctor">
            <summary>
            Initializes the <see cref="T:MongoDB.Bson.BsonInfo"/> class.
            </summary>
        </member>
        <member name="P:MongoDB.Bson.BsonInfo.Epoch">
            <summary>
            Gets or sets the epoch.
            </summary>
            <value>The epoch.</value>
        </member>
        <member name="P:MongoDB.Bson.BsonInfo.MaxDocumentSize">
            <summary>
            The maximum size a document can be.
            </summary>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ExampleClassMapPropertyDescriptor.#ctor(MongoDB.Configuration.Mapping.IMappingStore,MongoDB.Configuration.Mapping.Model.IClassMap,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.Descriptors.ExampleClassMapPropertyDescriptor"/> class.
            </summary>
            <param name="mappingStore">The mapping store.</param>
            <param name="classMap">The class map.</param>
            <param name="example">The example.</param>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ExampleClassMapPropertyDescriptor.GetProperties">
            <summary>
            Gets the property names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ExampleClassMapPropertyDescriptor.GetValue(System.Reflection.PropertyInfo)">
            <summary>
            Gets the value.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Cursor">
            <summary>
            <see cref="T:MongoDB.ICursor"/>
            </summary>
        </member>
        <member name="M:MongoDB.Cursor.#ctor(MongoDB.ICursor{MongoDB.Document})">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Cursor"/> class.
            </summary>
            <param name="cursor">The cursor.</param>
        </member>
        <member name="M:MongoDB.Cursor.Spec(MongoDB.Document)">
            <summary>
            Specs the specified spec.
            </summary>
            <param name="spec">The spec.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor.Limit(System.Int32)">
            <summary>
            Limits the specified limit.
            </summary>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor.Skip(System.Int32)">
            <summary>
            Skips the specified skip.
            </summary>
            <param name="skip">The skip.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor.Fields(MongoDB.Document)">
            <summary>
            Fieldses the specified fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor.Options(MongoDB.QueryOptions)">
            <summary>
            Optionses the specified options.
            </summary>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor.Sort(System.String)">
            <summary>
            Sorts the specified field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor.Sort(System.String,MongoDB.IndexOrder)">
            <summary>
            Sorts the specified field.
            </summary>
            <param name="field">The field.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor.Sort(MongoDB.Document)">
            <summary>
            Sorts the specified fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor.Hint(MongoDB.Document)">
            <summary>
            Hints the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor.KeepCursor(System.Boolean)">
            <summary>
            Keeps the cursor open.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
            <remarks>
            By default cursors are closed automaticly after documents
            are Enumerated.
            </remarks>
        </member>
        <member name="M:MongoDB.Cursor.Snapshot">
            <summary>
            Snapshots this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor.Explain">
            <summary>
            Explains this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:MongoDB.Cursor.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MongoDB.Cursor.IsModifiable">
            <summary>
            Gets a value indicating whether this instance is modifiable.
            </summary>
            <value>
            	<c>true</c> if this instance is modifiable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Cursor.Documents">
            <summary>
            Gets the documents.
            </summary>
            <value>The documents.</value>
        </member>
        <member name="T:MongoDB.MongoMinKey">
            <summary>
            Class representing the MinKey Bson type.  It will always compare lower than any other type.
            </summary>
        </member>
        <member name="M:MongoDB.MongoMinKey.#cctor">
            <summary>
            Initializes the <see cref="T:MongoDB.MongoMinKey"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.MongoMinKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoMinKey"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.MongoMinKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MongoDB.MongoMinKey.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MongoDB.Linq.MongoQueryable">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Linq.MongoQueryable.Key``1(``0,System.String)">
            <summary>
            Keys the specified document.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="document">The document.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.UnmappedMemberException">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.UnmappedMemberException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.UnmappedMemberException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MongoDB.UnmappedMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.UnmappedMemberException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:MongoDB.Configuration.MongoConfigurationSection">
            <summary>
            
            </summary>
        </member>
        <member name="F:MongoDB.Configuration.MongoConfigurationSection.DefaultSectionName">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfigurationSection.GetSection">
            <summary>
            Gets the section with name Mongo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfigurationSection.GetSection(System.String)">
            <summary>
            Gets the section.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfigurationSection.CreateConfiguration">
            <summary>
            Creates the configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfigurationSection.UpdateConfiguration(MongoDB.Configuration.MongoConfiguration)">
            <summary>
            Updates the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:MongoDB.Configuration.MongoConfigurationSection.Connections">
            <summary>
            Gets the connections.
            </summary>
            <value>The connections.</value>
        </member>
        <member name="P:MongoDB.Configuration.MongoConfigurationSection.ReadLocalTime">
            <summary>
              Reads DataTime from server as local time.
            </summary>
            <value><c>true</c> if [read local time]; otherwise, <c>false</c>.</value>
            <remarks>
              MongoDB stores all time values in UTC timezone. If true the
              time is converted from UTC to local timezone after is was read.
            </remarks>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DefaultDefaultValueConvention">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.IDefaultValueConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.IDefaultValueConvention.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="F:MongoDB.Configuration.Mapping.Conventions.DefaultDefaultValueConvention.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DefaultDefaultValueConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DefaultDefaultValueConvention"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DefaultDefaultValueConvention.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Builders.MemberOverridesBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MemberOverridesBuilder.#ctor(MongoDB.Configuration.Mapping.Auto.MemberOverrides)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Builders.MemberOverridesBuilder"/> class.
            </summary>
            <param name="overrides">The overrides.</param>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MemberOverridesBuilder.Alias(System.String)">
            <summary>
            Aliases the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MemberOverridesBuilder.DefaultValue(System.Object)">
            <summary>
            Defaults the value.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MemberOverridesBuilder.Ignore">
            <summary>
            Ignores this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Builders.MemberOverridesBuilder.PersistDefaultValue">
            <summary>
            Persists the default value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Bson.BsonReaderSettings">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Bson.BsonReaderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Bson.BsonReaderSettings"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Bson.BsonReaderSettings.#ctor(MongoDB.Bson.IBsonObjectBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Bson.BsonReaderSettings"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="P:MongoDB.Bson.BsonReaderSettings.Builder">
            <summary>
            Gets or sets the builder.
            </summary>
            <value>The builder.</value>
        </member>
        <member name="P:MongoDB.Bson.BsonReaderSettings.ReadLocalTime">
            <summary>
            Reads DataTime from server as local time.
            </summary>
            <value><c>true</c> if [read local time]; otherwise, <c>false</c>.</value>
            <remarks>
            MongoDB stores all time values in UTC timezone. If true the
            time is converted from UTC to local timezone after is was read.
            </remarks>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ArrayDescriptor.#ctor(System.Collections.IEnumerable,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.Descriptors.ArrayDescriptor"/> class.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="elementType">Type of the element.</param>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ArrayDescriptor.GetProperties">
            <summary>
            Gets the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ArrayDescriptor.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.MongoRegex">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.MongoRegex.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.MongoRegex"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.MongoRegex.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.MongoRegex"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:MongoDB.MongoRegex.#ctor(System.String,MongoDB.MongoRegexOption)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.MongoRegex"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:MongoDB.MongoRegex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoRegex"/> class.
            </summary>
            <param name="expression">The Regex expression.</param>
            <param name="options">The Regex options.</param>
        </member>
        <member name="M:MongoDB.MongoRegex.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.MongoRegex"/> class.
            </summary>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:MongoDB.MongoRegex.#ctor(System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.MongoRegex"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:MongoDB.MongoRegex.BuildRegex">
            <summary>
            Builds a .Net Regex.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.MongoRegex.Equals(MongoDB.MongoRegex)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name = "other">An object to compare with this object.</param>
            <returns>
              true if the current object is equal to the <paramref name = "other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.MongoRegex.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
              This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref = "T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
              An <see cref = "T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref = "M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref = "M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
        </member>
        <member name="M:MongoDB.MongoRegex.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
              Generates an object from its XML representation.
            </summary>
            <param name = "reader">The <see cref = "T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
        </member>
        <member name="M:MongoDB.MongoRegex.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
              Converts an object into its XML representation.
            </summary>
            <param name = "writer">The <see cref = "T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
        </member>
        <member name="M:MongoDB.MongoRegex.ToggleOption(System.String,System.Boolean)">
            <summary>
              Toggles the option.
            </summary>
            <param name = "option">The option.</param>
            <param name = "enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="M:MongoDB.MongoRegex.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
              The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:MongoDB.MongoRegex.op_Equality(MongoDB.MongoRegex,MongoDB.MongoRegex)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.MongoRegex.op_Inequality(MongoDB.MongoRegex,MongoDB.MongoRegex)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.MongoRegex.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MongoDB.MongoRegex.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MongoDB.MongoRegex.Expression">
            <summary>
              A valid regex string including the enclosing / characters.
            </summary>
        </member>
        <member name="P:MongoDB.MongoRegex.Options">
            <summary>
              Gets or sets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:MongoDB.MongoRegex.RawOptions">
            <summary>
              A string that may contain only the characters 'g', 'i', and 'm'. 
              Because the JS and TenGen representations support a limited range of options, 
              any nonconforming options will be dropped when converting to this representation
            </summary>
        </member>
        <member name="T:MongoDB.Linq.DocumentQuery">
            <summary>
            This class is a construct for writing strongly typed query expressions for Document fields.
            It is not meant to be used outside of expressions, since most functions and operators return
            fake data and are only used to extract parameter information from expressions.
            </summary>
        </member>
        <member name="F:MongoDB.Linq.DocumentQuery.key">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.#ctor(MongoDB.Document,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Linq.DocumentQuery"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Equality(MongoDB.Linq.DocumentQuery,System.String)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Inequality(MongoDB.Linq.DocumentQuery,System.String)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Equality(System.String,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Inequality(System.String,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThan(MongoDB.Linq.DocumentQuery,System.Int32)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThanOrEqual(MongoDB.Linq.DocumentQuery,System.Int32)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThan(MongoDB.Linq.DocumentQuery,System.Int32)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThanOrEqual(MongoDB.Linq.DocumentQuery,System.Int32)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Equality(MongoDB.Linq.DocumentQuery,System.Int32)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Inequality(MongoDB.Linq.DocumentQuery,System.Int32)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThan(System.Int32,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThanOrEqual(System.Int32,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThan(System.Int32,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThanOrEqual(System.Int32,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Equality(System.Int32,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Inequality(System.Int32,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThan(MongoDB.Linq.DocumentQuery,System.Double)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThanOrEqual(MongoDB.Linq.DocumentQuery,System.Double)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThan(MongoDB.Linq.DocumentQuery,System.Double)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThanOrEqual(MongoDB.Linq.DocumentQuery,System.Double)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Equality(MongoDB.Linq.DocumentQuery,System.Double)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Inequality(MongoDB.Linq.DocumentQuery,System.Double)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThan(System.Double,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThanOrEqual(System.Double,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThan(System.Double,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThanOrEqual(System.Double,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Equality(System.Double,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Inequality(System.Double,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThan(MongoDB.Linq.DocumentQuery,System.DateTime)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThanOrEqual(MongoDB.Linq.DocumentQuery,System.DateTime)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThan(MongoDB.Linq.DocumentQuery,System.DateTime)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThanOrEqual(MongoDB.Linq.DocumentQuery,System.DateTime)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Equality(MongoDB.Linq.DocumentQuery,System.DateTime)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Inequality(MongoDB.Linq.DocumentQuery,System.DateTime)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThan(System.DateTime,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_GreaterThanOrEqual(System.DateTime,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThan(System.DateTime,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_LessThanOrEqual(System.DateTime,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Equality(System.DateTime,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.op_Inequality(System.DateTime,MongoDB.Linq.DocumentQuery)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.Equals(MongoDB.Linq.DocumentQuery)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:MongoDB.Linq.DocumentQuery.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:MongoDB.Linq.DocumentQuery.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:MongoDB.Configuration.MongoConfigurationBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfigurationBuilder.BuildConfiguration">
            <summary>
            Builds the configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfigurationBuilder.BuildMappingStore">
            <summary>
            Builds the mapping store.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfigurationBuilder.ConnectionString(System.String)">
            <summary>
            Sets the connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfigurationBuilder.ConnectionString(System.Action{MongoDB.MongoConnectionStringBuilder})">
            <summary>
            Builds the connection string.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfigurationBuilder.ReadConnectionStringFromAppSettings(System.String)">
            <summary>
            Set the apps settings key from which to pull the connection string,
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfigurationBuilder.Mapping(System.Action{MongoDB.Configuration.Builders.MappingStoreBuilder})">
            <summary>
            Configures the mapping.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="T:MongoDB.Configuration.MongoConfiguration">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfiguration.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.MongoConfiguration"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfiguration.TryModify">
            <summary>
              Ensures the modifiable.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.MongoConfiguration.ValidateAndSeal">
            <summary>
              Validates the and seal.
            </summary>
        </member>
        <member name="P:MongoDB.Configuration.MongoConfiguration.Default">
            <summary>
              Gets the default.
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:MongoDB.Configuration.MongoConfiguration.IsModifiable">
            <summary>
            </summary>
        </member>
        <member name="P:MongoDB.Configuration.MongoConfiguration.ConnectionString">
            <summary>
              Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MongoDB.Configuration.MongoConfiguration.SerializationFactory">
            <summary>
              Gets or sets the serialization factory.
            </summary>
            <value>The serialization factory.</value>
        </member>
        <member name="P:MongoDB.Configuration.MongoConfiguration.MappingStore">
            <summary>
              Gets or sets the mapping store.
            </summary>
            <value>The mapping store.</value>
        </member>
        <member name="P:MongoDB.Configuration.MongoConfiguration.ReadLocalTime">
            <summary>
              Reads DataTime from server as local time.
            </summary>
            <value><c>true</c> if [read local time]; otherwise, <c>false</c>.</value>
            <remarks>
              MongoDB stores all time values in UTC timezone. If true the
              time is converted from UTC to local timezone after is was read.
            </remarks>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Model.CollectionMemberMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.CollectionMemberMap.#ctor(System.String,System.Type,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.String,System.Boolean,MongoDB.Configuration.CollectionAdapters.ICollectionAdapter,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Model.CollectionMemberMap"/> class.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="memberReturnType">Type of the member return.</param>
            <param name="getter">The getter.</param>
            <param name="setter">The setter.</param>
            <param name="alias">The alias.</param>
            <param name="persistDefaultValue">if set to <c>true</c> [persist default value].</param>
            <param name="collectionAdapter">Type of the collection.</param>
            <param name="elementType">Type of the element.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.CollectionMemberMap.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.CollectionMemberMap.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value on the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.CollectionMemberMap.ElementType">
            <summary>
            Gets the type of the element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Model.ClassMap">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.ClassMap.#ctor(System.Type)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Model.ClassMap"/> class.
            </summary>
            <param name="classType">Type of the entity.</param>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMap.CollectionName">
            <summary>
              Gets the name of the collection.
            </summary>
            <value>The name of the collection.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMap.DiscriminatorAlias">
            <summary>
              Gets the alias used to store the discriminator.
            </summary>
            <value>The discriminator alias.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMap.ExtendedPropertiesMap">
            <summary>
              Gets the extended properties map.
            </summary>
            <value>The extended properties map.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMap.IdMap">
            <summary>
              Gets the id map.
            </summary>
            <value>The id map.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.ClassMap.IsSubClass">
            <summary>
              Gets a value indicating whether this class map is a subclass.
            </summary>
            <value>
              <c>true</c> if this class map is a subclass; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DelegateAliasConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateAliasConvention.#ctor(System.Func{System.Reflection.MemberInfo,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DelegateAliasConvention"/> class.
            </summary>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateAliasConvention.GetAlias(System.Reflection.MemberInfo)">
            <summary>
            Gets the alias.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.DictionaryAdapters.HashtableDictionaryAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.DictionaryAdapters.HashtableDictionaryAdapter.CreateDictionary(MongoDB.Document)">
            <summary>
            Creates the dictionary.
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.DictionaryAdapters.HashtableDictionaryAdapter.GetDocument(System.Object)">
            <summary>
            Gets the document.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Configuration.DictionaryAdapters.HashtableDictionaryAdapter.KeyType">
            <summary>
            Gets the type of the key.
            </summary>
            <value>The type of the key.</value>
        </member>
        <member name="P:MongoDB.Configuration.DictionaryAdapters.HashtableDictionaryAdapter.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="T:MongoDB.Bson.BsonWriterSettings">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Bson.BsonWriterSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Bson.BsonWriterSettings"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Bson.BsonWriterSettings.#ctor(MongoDB.Bson.IBsonObjectDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Bson.BsonWriterSettings"/> class.
            </summary>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="P:MongoDB.Bson.BsonWriterSettings.Descriptor">
            <summary>
            Gets or sets the descriptor.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="T:MongoDB.Bson.BsonDocumentDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentDescriptor.BeginObject(System.Object)">
            <summary>
            Begins the object.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentDescriptor.BeginArray(System.Object)">
            <summary>
            Begins the array.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentDescriptor.GetProperties(System.Object)">
            <summary>
            Gets the property names.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentDescriptor.BeginProperty(System.Object,MongoDB.Bson.BsonProperty)">
            <summary>
            Begins the property.
            </summary>
            <param name="instance">The instance.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentDescriptor.EndProperty(System.Object,MongoDB.Bson.BsonProperty)">
            <summary>
            Ends the property.
            </summary>
            <param name="instance">The instance.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentDescriptor.EndArray(System.Object)">
            <summary>
            Ends the array.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentDescriptor.EndObject(System.Object)">
            <summary>
            Ends the object.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentDescriptor.IsArray(System.Object)">
            <summary>
            Determines whether the specified obj is array.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            	<c>true</c> if the specified obj is array; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MongoDB.Bson.BsonDocumentDescriptor.IsObject(System.Object)">
            <summary>
            Determines whether the specified obj is object.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            	<c>true</c> if the specified obj is object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MongoDB.Util.OidGenerator">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Util.OidGenerator.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Util.OidGenerator"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Util.OidGenerator.Generate">
            <summary>
              Generates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.OidGenerator.GenerateTime">
            <summary>
              Generates the time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.OidGenerator.GenerateInc">
            <summary>
              Generates the inc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.OidGenerator.GenerateConstants">
            <summary>
              Generates the constants.
            </summary>
        </member>
        <member name="M:MongoDB.Util.OidGenerator.GenerateHostHash">
            <summary>
              Generates the host hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.OidGenerator.GenerateProcId">
            <summary>
              Generates the proc id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Util.MongoHash">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Util.MongoHash.Generate(System.String)">
            <summary>
            Generate a hash for the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Serialization.Descriptors.DictionaryPropertyDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.DictionaryPropertyDescriptor.#ctor(MongoDB.Document,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.Descriptors.DictionaryPropertyDescriptor"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="valueType">Type of the value.</param>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.DictionaryPropertyDescriptor.GetProperties">
            <summary>
            Gets the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Protocol.UpdateMessage">
            <summary>
            The OP_UPDATE message is used to update a document in a collection.
            </summary>
            <remarks>
            struct {
                MsgHeader header;             // standard message header
                int32     ZERO;               // 0 - reserved for future use
                cstring   fullCollectionName; // "dbname.collectionname"
                int32     flags;              // bit vector. see below
                BSON      selector;           // the query to select the document
                BSON      document;           // the document data to update with or insert
            }
            </remarks>
        </member>
        <member name="M:MongoDB.Protocol.UpdateMessage.#ctor(MongoDB.Bson.BsonWriterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.UpdateMessage"/> class.
            </summary>
            <param name="bsonWriterSettings">The bson writer settings.</param>
        </member>
        <member name="M:MongoDB.Protocol.UpdateMessage.WriteBody(MongoDB.Bson.BsonWriter)">
            <summary>
            Writes the body.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:MongoDB.Protocol.UpdateMessage.CalculateBodySize(MongoDB.Bson.BsonWriter)">
            <summary>
            Calculates the size of the body.
            </summary>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Protocol.UpdateMessage.FullCollectionName">
            <summary>
            dbname.collectionname
            </summary>
            <value>The full name of the collection.</value>
        </member>
        <member name="P:MongoDB.Protocol.UpdateMessage.Flags">
            <summary>
            bit vector
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:MongoDB.Protocol.UpdateMessage.Selector">
            <summary>
            The query to select the document.
            </summary>
            <value>The selector.</value>
        </member>
        <member name="P:MongoDB.Protocol.UpdateMessage.Document">
            <summary>
            The document data to update with or insert.
            </summary>
            <value>The document.</value>
        </member>
        <member name="T:MongoDB.MongoServerEndPoint">
            <summary>
            Represents a mongodb server with host and port.
            </summary>
        </member>
        <member name="F:MongoDB.MongoServerEndPoint.DefaultHost">
            <summary>
            The mongo default host name.
            </summary>
        </member>
        <member name="F:MongoDB.MongoServerEndPoint.DefaultPort">
            <summary>
            The mongo default server port.
            </summary>
        </member>
        <member name="F:MongoDB.MongoServerEndPoint.Default">
            <summary>
            The default MongoServerEndPoint.
            </summary>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoServerEndPoint"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoServerEndPoint"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoServerEndPoint"/> class.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoServerEndPoint"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.Equals(MongoDB.MongoServerEndPoint)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.op_Equality(MongoDB.MongoServerEndPoint,MongoDB.MongoServerEndPoint)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.op_Inequality(MongoDB.MongoServerEndPoint,MongoDB.MongoServerEndPoint)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:MongoDB.MongoServerEndPoint.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:MongoDB.MongoServerEndPoint.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:MongoDB.MongoServerEndPoint.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:MongoDB.MapReduce">
            <summary>
              Provides a Fluent interface to build and execute Map/Reduce calls.
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.#ctor(MongoDB.IMongoDatabase,System.String,System.Type)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.MapReduce"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="name">The name.</param>
            <param name="rootType">Type of the root.</param>
        </member>
        <member name="M:MongoDB.MapReduce.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.Map(System.String)">
            <summary>
              The map function references the variable this to inspect the current object under consideration.
              A map function must call emit(key,value) at least once, but may be invoked any number of times, 
              as may be appropriate.
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.Map(MongoDB.Code)">
            <summary>
              The map function references the variable this to inspect the current object under consideration.
              A map function must call emit(key,value) at least once, but may be invoked any number of times, 
              as may be appropriate.
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.Reduce(System.String)">
            <summary>
              The reduce function receives a key and an array of values. To use, reduce the received values, 
              and return a result.
            </summary>
            <remarks>
              The MapReduce engine may invoke reduce functions iteratively; thus, these functions 
              must be idempotent. If you need to perform an operation only once, use a finalize function.
            </remarks>
        </member>
        <member name="M:MongoDB.MapReduce.Reduce(MongoDB.Code)">
            <summary>
              The reduce function receives a key and an array of values. To use, reduce the received values, 
              and return a result.
            </summary>
            <remarks>
              The MapReduce engine may invoke reduce functions iteratively; thus, these functions 
              must be idempotent. If you need to perform an operation only once, use a finalize function.
            </remarks>
        </member>
        <member name="M:MongoDB.MapReduce.Query(MongoDB.Document)">
            <summary>
              Query filter object
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.Sort(MongoDB.Document)">
            <summary>
              Sort the query.  Useful for optimization
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.Limit(System.Int64)">
            <summary>
              Number of objects to return from collection
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.Out(System.String)">
            <summary>
              Name of the final collection the results should be stored in.
            </summary>
            <remarks>
              A temporary collection is still used and then renamed to the target name atomically.
            </remarks>
        </member>
        <member name="M:MongoDB.MapReduce.KeepTemp(System.Boolean)">
            <summary>
              When true the generated collection is not treated as temporary.  Specifying out automatically makes
              the collection permanent
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.Verbose(System.Boolean)">
            <summary>
              Provides statistics on job execution time.
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.Finalize(MongoDB.Code)">
            <summary>
              Function to apply to all the results when finished.
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.Scope(MongoDB.Document)">
            <summary>
              Document where fields go into javascript global scope
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.RetrieveData">
            <summary>
              Retrieves the data.
            </summary>
        </member>
        <member name="M:MongoDB.MapReduce.TryModify">
            <summary>
              Tries the modify.
            </summary>
        </member>
        <member name="P:MongoDB.MapReduce.IsModifiable">
            <summary>
            Gets a value indicating whether this instance is modifiable.
            </summary>
            <value>
            	<c>true</c> if this instance is modifiable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.MapReduce.Result">
            <summary>
              Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:MongoDB.MapReduce.Command">
            <summary>
              Gets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:MongoDB.MapReduce.Documents">
            <summary>
              Gets the documents.
            </summary>
            <value>The documents.</value>
        </member>
        <member name="T:MongoDB.Configuration.CollectionAdapters.ArrayListCollectionAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.CollectionAdapters.ArrayListCollectionAdapter.CreateCollection(System.Type,System.Object[])">
            <summary>
            Adds the element to instance.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="elements">The elements.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.CollectionAdapters.ArrayListCollectionAdapter.GetElementsFromCollection(System.Object)">
            <summary>
            Gets the elements from collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Binary">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Binary.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Binary"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Binary.#ctor(System.Byte[])">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Binary"/> class.
            </summary>
            <param name="bytes">The value.</param>
        </member>
        <member name="M:MongoDB.Binary.#ctor(System.Byte[],MongoDB.BinarySubtype)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Binary"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="subtype">The subtype.</param>
        </member>
        <member name="M:MongoDB.Binary.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:MongoDB.Binary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref = "T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MongoDB.Binary.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
              A <see cref = "T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MongoDB.Binary.op_Implicit(MongoDB.Binary)~System.Byte[]">
            <summary>
            Performs an implicit conversion from <see cref="T:MongoDB.Binary"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="binary">The binary.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MongoDB.Binary.op_Implicit(System.Byte[])~MongoDB.Binary">
            <summary>
              Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:MongoDB.Binary"/>.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MongoDB.Binary.op_Equality(MongoDB.Binary,MongoDB.Binary)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Binary.op_Inequality(MongoDB.Binary,MongoDB.Binary)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "left">The left.</param>
            <param name = "right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Binary.Equals(MongoDB.Binary)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.Binary.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:MongoDB.Binary.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MongoDB.Binary.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MongoDB.Binary.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:MongoDB.Binary.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:MongoDB.Binary.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:MongoDB.Binary.Bytes">
            <summary>
              Gets or sets the bytes.
            </summary>
            <value>The bytes.</value>
        </member>
        <member name="P:MongoDB.Binary.Subtype">
            <summary>
              Gets or sets the subtype.
            </summary>
            <value>The subtype.</value>
        </member>
        <member name="M:MongoDB.Serialization.ClassMapObjectDescriptorAdapter.#ctor(MongoDB.Configuration.Mapping.Model.IClassMap)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.ClassMapObjectDescriptorAdapter"/> class.
            </summary>
            <param name="classMap">The class map.</param>
        </member>
        <member name="M:MongoDB.Serialization.ClassMapObjectDescriptorAdapter.GenerateId(System.Object)">
            <summary>
            Generates the id.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.ClassMapObjectDescriptorAdapter.GetMongoPropertyNames(System.Object)">
            <summary>
            Gets the mongo property names.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.ClassMapObjectDescriptorAdapter.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="mongoName">Name of the mongo.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.ClassMapObjectDescriptorAdapter.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="mongoName">Name of the mongo.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:MongoDB.Results.FindAndModifyResult`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MongoDB.Protocol.ReplyMessage`1">
            <summary>
            The OP_REPLY message is sent by the database in response to an CONTRIB:OP_QUERY  or CONTRIB:OP_GET_MORE  message.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            struct {
                MsgHeader header;                 // standard message header
                int32     responseFlag;           // normally zero, non-zero on query failure
                int64     cursorID;               // id of the cursor created for this query response
                int32     startingFrom;           // indicates where in the cursor this reply is starting
                int32     numberReturned;         // number of documents in the reply
                BSON[]    documents;              // documents
            }
            </remarks>
        </member>
        <member name="M:MongoDB.Protocol.ReplyMessage`1.#ctor(MongoDB.Bson.BsonReaderSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Protocol.ReplyMessage`1"/> class.
            </summary>
            <param name="readerSettings">The reader settings.</param>
        </member>
        <member name="M:MongoDB.Protocol.ReplyMessage`1.Read(System.IO.Stream)">
            <summary>
            Reads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:MongoDB.Protocol.ReplyMessage`1.ReadHeader(System.IO.BinaryReader)">
            <summary>
            Reads the header.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Protocol.ReplyMessage`1.ResponseFlag">
            <summary>
            normally zero, non-zero on query failure     
            </summary>
            <value>The response flag.</value>
        </member>
        <member name="P:MongoDB.Protocol.ReplyMessage`1.CursorId">
            <summary>
            id of the cursor created for this query response 
            </summary>
            <value>The cursor id.</value>
        </member>
        <member name="P:MongoDB.Protocol.ReplyMessage`1.StartingFrom">
            <summary>
            indicates where in the cursor this reply is starting     
            </summary>
            <value>The starting from.</value>
        </member>
        <member name="P:MongoDB.Protocol.ReplyMessage`1.NumberReturned">
            <summary>
            number of documents in the reply       
            </summary>
            <value>The number returned.</value>
        </member>
        <member name="P:MongoDB.Protocol.ReplyMessage`1.Documents">
            <summary>
            Gets or sets the documents.
            </summary>
            <value>The documents.</value>
        </member>
        <member name="T:MongoDB.Oid">
            <summary>
              Oid is an immutable object that represents a Mongo ObjectId.
            </summary>
        </member>
        <member name="M:MongoDB.Oid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Oid"/> class.
            </summary>
            <remarks>
            Needed for some serializers.
            </remarks>
        </member>
        <member name="M:MongoDB.Oid.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Oid"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Oid.#ctor(System.Byte[])">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Oid"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Oid.#ctor(MongoDB.Oid)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Oid"/> class.
            </summary>
            <param name="oid">The oid.</param>
        </member>
        <member name="M:MongoDB.Oid.CompareTo(MongoDB.Oid)">
            <summary>
              Compares the current object with another object of the same type.
            </summary>
            <param name = "other">An object to compare with this object.</param>
            <returns>
              A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
              Value
              Meaning
              Less than zero
              This object is less than the <paramref name = "other" /> parameter.
              Zero
              This object is equal to <paramref name = "other" />.
              Greater than zero
              This object is greater than <paramref name = "other" />.
            </returns>
        </member>
        <member name="M:MongoDB.Oid.Equals(MongoDB.Oid)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name = "other">An object to compare with this object.</param>
            <returns>
              true if the current object is equal to the <paramref name = "other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MongoDB.Oid.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MongoDB.Oid.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MongoDB.Oid.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MongoDB.Oid.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <remarks>
            J = Returns Javascript string
            </remarks>
        </member>
        <member name="M:MongoDB.Oid.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <remarks>
            J = Returns Javascript string
            </remarks>
        </member>
        <member name="M:MongoDB.Oid.ToByteArray">
            <summary>
              Converts the Oid to a byte array.
            </summary>
        </member>
        <member name="M:MongoDB.Oid.NewOid">
            <summary>
              Generates an Oid using OidGenerator.
            </summary>
            <returns>
              A <see cref="T:MongoDB.Oid"/>
            </returns>
        </member>
        <member name="M:MongoDB.Oid.op_Equality(MongoDB.Oid,MongoDB.Oid)">
            <summary>
              Implements the operator ==.
            </summary>
            <param name = "a">A.</param>
            <param name = "b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Oid.op_Inequality(MongoDB.Oid,MongoDB.Oid)">
            <summary>
              Implements the operator !=.
            </summary>
            <param name = "a">A.</param>
            <param name = "b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Oid.op_GreaterThan(MongoDB.Oid,MongoDB.Oid)">
            <summary>
              Implements the operator &gt;.
            </summary>
            <param name = "a">A.</param>
            <param name = "b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Oid.op_LessThan(MongoDB.Oid,MongoDB.Oid)">
            <summary>
              Implements the operator &lt;.
            </summary>
            <param name = "a">A.</param>
            <param name = "b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MongoDB.Oid.ValidateHex(System.String)">
            <summary>
              Validates the hex.
            </summary>
            <param name = "value">The value.</param>
        </member>
        <member name="M:MongoDB.Oid.DecodeHex(System.String)">
            <summary>
              Decodes the hex.
            </summary>
            <param name = "value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Oid.ParseBytes(System.String)">
            <summary>
            Parses the bytes.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:MongoDB.Oid.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:MongoDB.Oid.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:MongoDB.Oid.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:MongoDB.Oid.Created">
            <summary>
              Gets the created.
            </summary>
            <value>The created.</value>
        </member>
        <member name="T:MongoDB.Cursor`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MongoDB.ICursor`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MongoDB.ICursor`1.Spec(System.Object)">
            <summary>
            Specs the specified spec.
            </summary>
            <param name="spec">The spec.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor`1.Limit(System.Int32)">
            <summary>
            Limits the specified limit.
            </summary>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor`1.Skip(System.Int32)">
            <summary>
            Skips the specified skip.
            </summary>
            <param name="skip">The skip.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor`1.Fields(System.Object)">
            <summary>
            Fieldses the specified fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor`1.Options(MongoDB.QueryOptions)">
            <summary>
            Optionses the specified options.
            </summary>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor`1.Sort(System.String)">
            <summary>
            Sorts the specified field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor`1.Sort(System.String,MongoDB.IndexOrder)">
            <summary>
            Sorts the specified field.
            </summary>
            <param name="field">The field.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor`1.Sort(System.Object)">
            <summary>
            Sorts the specified fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor`1.Hint(System.Object)">
            <summary>
            Hints the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor`1.KeepCursor(System.Boolean)">
            <summary>
            Keeps the cursor open.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
            <remarks>
            By default cursors are closed automaticly after documents 
            are Enumerated. 
            </remarks>
        </member>
        <member name="M:MongoDB.ICursor`1.Snapshot">
            <summary>
            Snapshots this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.ICursor`1.Explain">
            <summary>
            Explains this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MongoDB.ICursor`1.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MongoDB.ICursor`1.IsModifiable">
            <summary>
            Gets a value indicating whether this instance is modifiable.
            </summary>
            <value>
            	<c>true</c> if this instance is modifiable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.ICursor`1.Documents">
            <summary>
            Gets the documents.
            </summary>
            <value>The documents.</value>
        </member>
        <member name="M:MongoDB.Cursor`1.#ctor(MongoDB.Serialization.ISerializationFactory,MongoDB.Configuration.Mapping.IMappingStore,MongoDB.Connections.Connection,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Cursor`1"/> class.
            </summary>
            <param name="serializationFactory">The serialization factory.</param>
            <param name="mappingStore">The mapping store.</param>
            <param name="connection">The conn.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="collectionName">Name of the collection.</param>
        </member>
        <member name="M:MongoDB.Cursor`1.#ctor(MongoDB.Serialization.ISerializationFactory,MongoDB.Configuration.Mapping.IMappingStore,MongoDB.Connections.Connection,System.String,System.String,System.Object,System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Cursor`1"/> class.
            </summary>
            <param name="serializationFactory">The serialization factory.</param>
            <param name="mappingStore">The mapping store.</param>
            <param name="connection">The conn.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="collectionName">Name of the collection.</param>
            <param name="spec">The spec.</param>
            <param name="limit">The limit.</param>
            <param name="skip">The skip.</param>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:MongoDB.Cursor`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:MongoDB.Cursor`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:MongoDB.Cursor`1.Spec(System.Object)">
            <summary>
            Specs the specified spec.
            </summary>
            <param name="spec">The spec.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor`1.Limit(System.Int32)">
            <summary>
            Limits the specified limit.
            </summary>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor`1.Skip(System.Int32)">
            <summary>
            Skips the specified skip.
            </summary>
            <param name="skip">The skip.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor`1.Fields(System.Object)">
            <summary>
            Fieldses the specified fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor`1.Sort(System.String)">
            <summary>
              Sorts the specified field.
            </summary>
            <param name = "field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor`1.Sort(System.String,MongoDB.IndexOrder)">
            <summary>
              Sorts the specified field.
            </summary>
            <param name = "field">The field.</param>
            <param name = "order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor`1.Sort(System.Object)">
            <summary>
            Sorts the specified fields.
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor`1.Hint(System.Object)">
            <summary>
            Hints the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor`1.KeepCursor(System.Boolean)">
            <summary>
            Keeps the cursor open.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
            <remarks>
            By default cursors are closed automaticly after documents 
            are Enumerated. 
            </remarks>
        </member>
        <member name="M:MongoDB.Cursor`1.Snapshot">
            <summary>
            Snapshots the specified index.
            </summary>
        </member>
        <member name="M:MongoDB.Cursor`1.Explain">
            <summary>
              Explains this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor`1.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MongoDB.Cursor`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MongoDB.Cursor`1.Options(MongoDB.QueryOptions)">
            <summary>
              Optionses the specified options.
            </summary>
            <param name = "options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor`1.KillCursor(System.Int64)">
            <summary>
            Kills the cursor.
            </summary>
        </member>
        <member name="M:MongoDB.Cursor`1.RetrieveData``1">
            <summary>
            Retrieves the data.
            </summary>
            <typeparam name="TReply">The type of the reply.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Cursor`1.TryModify">
            <summary>
              Tries the modify.
            </summary>
        </member>
        <member name="M:MongoDB.Cursor`1.AddOrRemoveSpecOpt(System.String,System.Object)">
            <summary>
              Adds the or remove spec opt.
            </summary>
            <param name = "key">The key.</param>
            <param name = "doc">The doc.</param>
        </member>
        <member name="M:MongoDB.Cursor`1.BuildSpec">
            <summary>
              Builds the spec.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MongoDB.Cursor`1.FullCollectionName">
            <summary>
            Gets or sets the full name of the collection.
            </summary>
            <value>The full name of the collection.</value>
        </member>
        <member name="P:MongoDB.Cursor`1.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MongoDB.Cursor`1.IsModifiable">
            <summary>
              Gets a value indicating whether this <see cref="T:MongoDB.Cursor`1"/> is modifiable.
            </summary>
            <value><c>true</c> if modifiable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MongoDB.Cursor`1.Documents">
            <summary>
              Gets the documents.
            </summary>
            <value>The documents.</value>
        </member>
        <member name="P:MongoDB.Cursor`1.CursorPosition">
            <summary>
            Gets the cursor position.
            </summary>
            <value>The cursor position.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Util.MemberReflectionOptimizer">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Util.MemberReflectionOptimizer.GetGetter(System.Reflection.MemberInfo)">
            <summary>
              Gets the getter.
            </summary>
            <param name = "memberInfo">The member info.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Util.MemberReflectionOptimizer.GetFieldGetter(System.Reflection.FieldInfo)">
            <summary>
              Gets the field getter.
            </summary>
            <param name = "fieldInfo">The field info.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Util.MemberReflectionOptimizer.GetPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
              Gets the property getter.
            </summary>
            <param name = "propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Util.MemberReflectionOptimizer.GetSetter(System.Reflection.MemberInfo)">
            <summary>
              Gets the setter.
            </summary>
            <param name = "memberInfo">The member info.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Util.MemberReflectionOptimizer.GetFieldSetter(System.Reflection.FieldInfo)">
            <summary>
              Gets the field setter.
            </summary>
            <param name = "fieldInfo">The field info.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Util.MemberReflectionOptimizer.GetPropertySetter(System.Reflection.PropertyInfo)">
            <summary>
              Gets the property setter.
            </summary>
            <param name = "propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Util.MemberReflectionOptimizer.CreateKey(System.Reflection.MemberInfo)">
            <summary>
              Creates the key.
            </summary>
            <param name = "memberInfo">The member info.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Model.SubClassMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.SubClassMap.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Model.SubClassMap"/> class.
            </summary>
            <param name="classType">Type of the entity.</param>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.SubClassMap.CollectionName">
            <summary>
            Gets the name of the collection.
            </summary>
            <value>The name of the collection.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.SubClassMap.DiscriminatorAlias">
            <summary>
            Gets the alias used to store the discriminator.
            </summary>
            <value>The discriminator alias.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.SubClassMap.ExtendedPropertiesMap">
            <summary>
            Gets the extended properties map.
            </summary>
            <value>The extended properties map.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.SubClassMap.IdMap">
            <summary>
            Gets the id map.
            </summary>
            <value>The id map.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.SubClassMap.IsSubClass">
            <summary>
            Gets a value indicating whether this class map is a subclass.
            </summary>
            <value>
            	<c>true</c> if this class map is a subclass; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.SubClassMap.MemberMaps">
            <summary>
            Gets the member maps.
            </summary>
            <value>The member maps.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.SubClassMap.SuperClassMap">
            <summary>
            Gets or sets the super class map.
            </summary>
            <value>The super class map.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DefaultCollectionAdapterConvention">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.Configuration.Mapping.Conventions.DefaultCollectionAdapterConvention.CollectionTypes">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.Configuration.Mapping.Conventions.DefaultCollectionAdapterConvention.ElementTypes">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.Configuration.Mapping.Conventions.DefaultCollectionAdapterConvention.Instance">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DefaultCollectionAdapterConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DefaultCollectionAdapterConvention"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DefaultCollectionAdapterConvention.GetCollectionAdapter(System.Type)">
            <summary>
              Gets the type of the collection.
            </summary>
            <param name = "type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DefaultCollectionAdapterConvention.GetElementType(System.Type)">
            <summary>
              Gets the type of the element.
            </summary>
            <param name = "type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DefaultCollectionAdapterConvention.CollectionTypeFactoryDelegate">
            <summary>
            </summary>
        </member>
        <member name="T:MongoDB.Util.ReflectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Util.ReflectionExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member">The member.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.ReflectionExtensions.GetReturnType(System.Reflection.MemberInfo)">
            <summary>
            Gets the return type of the member.
            </summary>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.ReflectionExtensions.IsOpenTypeAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether [is open type assignable from] [the specified open type].
            </summary>
            <param name="openType">Type of the open.</param>
            <param name="closedType">Type of the closed.</param>
            <returns>
            	<c>true</c> if [is open type assignable from] [the specified open type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MongoDB.Util.JsonFormatter">
            <summary>
              Lightweight routines to handle basic json serializing.
            </summary>
        </member>
        <member name="M:MongoDB.Util.JsonFormatter.Serialize(MongoDB.Document)">
            <summary>
              Serializes the specified doc.
            </summary>
            <param name = "doc">The doc.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.JsonFormatter.SerializeForServerSide(System.Object)">
            <summary>
            Serializes for server side.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.JsonFormatter.SerializeType(System.Object,System.Text.StringBuilder)">
            <summary>
              Serializes the type.
            </summary>
            <param name = "value">The value.</param>
            <param name = "json">The json.</param>
        </member>
        <member name="M:MongoDB.Util.JsonFormatter.Escape(System.String)">
            <summary>
              Escapes any characters that are special to javascript.
            </summary>
        </member>
        <member name="T:MongoDB.Util.Inflector">
            <summary>
              This was ripped out of SubSonic I believe.
            </summary>
        </member>
        <member name="M:MongoDB.Util.Inflector.#cctor">
            <summary>
              Initializes the <see cref="T:MongoDB.Util.Inflector"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Util.Inflector.AddIrregularRule(System.String,System.String)">
            <summary>
              Adds the irregular rule.
            </summary>
            <param name = "singular">The singular.</param>
            <param name = "plural">The plural.</param>
        </member>
        <member name="M:MongoDB.Util.Inflector.AddUnknownCountRule(System.String)">
            <summary>
              Adds the unknown count rule.
            </summary>
            <param name = "word">The word.</param>
        </member>
        <member name="M:MongoDB.Util.Inflector.AddPluralRule(System.String,System.String)">
            <summary>
              Adds the plural rule.
            </summary>
            <param name = "rule">The rule.</param>
            <param name = "replacement">The replacement.</param>
        </member>
        <member name="M:MongoDB.Util.Inflector.AddSingularRule(System.String,System.String)">
            <summary>
              Adds the singular rule.
            </summary>
            <param name = "rule">The rule.</param>
            <param name = "replacement">The replacement.</param>
        </member>
        <member name="M:MongoDB.Util.Inflector.MakePlural(System.String)">
            <summary>
              Makes the plural.
            </summary>
            <param name = "word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.MakeSingular(System.String)">
            <summary>
              Makes the singular.
            </summary>
            <param name = "word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.ApplyRules(System.Collections.Generic.IList{MongoDB.Util.Inflector.InflectorRule},System.String)">
            <summary>
              Applies the rules.
            </summary>
            <param name = "rules">The rules.</param>
            <param name = "word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.ToTitleCase(System.String)">
            <summary>
              Converts the string to title case.
            </summary>
            <param name = "word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.ToHumanCase(System.String)">
            <summary>
              Converts the string to human case.
            </summary>
            <param name = "lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.ToProper(System.String)">
            <summary>
              Convert string to proper case
            </summary>
            <param name = "sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.ToPascalCase(System.String)">
            <summary>
              Converts the string to pascal case.
            </summary>
            <param name = "lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.ToPascalCase(System.String,System.Boolean)">
            <summary>
              Converts text to pascal case...
            </summary>
            <param name = "text">The text.</param>
            <param name = "removeUnderscores">if set to <c>true</c> [remove underscores].</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.ToCamelCase(System.String)">
            <summary>
              Converts the string to camel case.
            </summary>
            <param name = "lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.AddUnderscores(System.String)">
            <summary>
              Adds the underscores.
            </summary>
            <param name = "pascalCasedWord">The pascal cased word.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.ConvertUnderscoresToDashes(System.String)">
            <summary>
              Converts the underscores to dashes.
            </summary>
            <param name = "underscoredWord">The underscored word.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.MakeInitialCaps(System.String)">
            <summary>
              Makes the initial caps.
            </summary>
            <param name = "word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Util.Inflector.MakeInitialLowerCase(System.String)">
            <summary>
              Makes the initial lower case.
            </summary>
            <param name = "word">The word.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Util.Inflector.InflectorRule">
            <summary>
              Summary for the InflectorRule class
            </summary>
        </member>
        <member name="F:MongoDB.Util.Inflector.InflectorRule.regex">
            <summary>
            </summary>
        </member>
        <member name="F:MongoDB.Util.Inflector.InflectorRule.replacement">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Util.Inflector.InflectorRule.#ctor(System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Util.Inflector.InflectorRule"/> class.
            </summary>
            <param name="regexPattern">The regex pattern.</param>
            <param name="replacementText">The replacement text.</param>
        </member>
        <member name="M:MongoDB.Util.Inflector.InflectorRule.Apply(System.String)">
            <summary>
              Applies the specified word.
            </summary>
            <param name = "word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptor.#ctor(MongoDB.Configuration.Mapping.IMappingStore,MongoDB.Configuration.Mapping.Model.IClassMap,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptor"/> class.
            </summary>
            <param name="mappingStore">The mapping store.</param>
            <param name="classMap">The class map.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptor.GetProperties">
            <summary>
            Gets the property names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Serialization.Descriptors.ClassMapPropertyDescriptor.GetValue(System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Results.MapReduceResult">
            <summary>
            </summary>
        </member>
        <member name="M:MongoDB.Results.MapReduceResult.#ctor(MongoDB.Document)">
            <summary>
              Initializes a new instance of the <see cref="T:MongoDB.Results.MapReduceResult"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:MongoDB.Results.MapReduceResult.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MongoDB.Results.MapReduceResult.CollectionName">
            <summary>
              Gets the name of the collection.
            </summary>
            <value>The name of the collection.</value>
        </member>
        <member name="P:MongoDB.Results.MapReduceResult.InputCount">
            <summary>
              Gets the input count.
            </summary>
            <value>The input count.</value>
        </member>
        <member name="P:MongoDB.Results.MapReduceResult.EmitCount">
            <summary>
              Gets the emit count.
            </summary>
            <value>The emit count.</value>
        </member>
        <member name="P:MongoDB.Results.MapReduceResult.OutputCount">
            <summary>
              Gets the output count.
            </summary>
            <value>The output count.</value>
        </member>
        <member name="P:MongoDB.Results.MapReduceResult.Time">
            <summary>
              Gets the time.
            </summary>
            <value>The time.</value>
        </member>
        <member name="P:MongoDB.Results.MapReduceResult.TimeSpan">
            <summary>
              Gets the time span.
            </summary>
            <value>The time span.</value>
        </member>
        <member name="P:MongoDB.Results.MapReduceResult.Ok">
            <summary>
              Gets a value indicating whether this <see cref="T:MongoDB.Results.MapReduceResult"/> is ok.
            </summary>
            <value><c>true</c> if ok; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MongoDB.Results.MapReduceResult.ErrorMessage">
            <summary>
              Gets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:MongoDB.IndexOrder">
            <summary>
            
            </summary>
        </member>
        <member name="F:MongoDB.IndexOrder.Descending">
            <summary>
            
            </summary>
        </member>
        <member name="F:MongoDB.IndexOrder.Ascending">
            <summary>
            
            </summary>
        </member>
        <member name="T:MongoDB.MongoMapReduceException">
            <summary>
            Raised when a map reduce call fails. 
            </summary>
        </member>
        <member name="M:MongoDB.MongoMapReduceException.#ctor(MongoDB.MongoCommandException)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoMapReduceException"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:MongoDB.MongoMapReduceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.MongoMapReduceException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="P:MongoDB.MongoMapReduceException.MapReduceResult">
            <summary>
            Gets or sets the map reduce result.
            </summary>
            <value>The map reduce result.</value>
        </member>
        <member name="T:MongoDB.Connections.ConnectionFactoryFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryFactory.#cctor">
            <summary>
            Initializes the <see cref="T:MongoDB.Connections.ConnectionFactoryFactory"/> class.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryFactory.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryFactory.GetConnection(System.String)">
            <summary>
            Gets the connection.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryFactory.CreateFactory(System.String)">
            <summary>
            Creates the factory.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Connections.ConnectionFactoryFactory.OnMaintenaceWakeup">
            <summary>
            Called when [maintenace wakeup].
            </summary>
        </member>
        <member name="P:MongoDB.Connections.ConnectionFactoryFactory.PoolCount">
            <summary>
            Gets the pool count.
            </summary>
            <value>The pool count.</value>
        </member>
        <member name="T:MongoDB.Configuration.Section.ConnectionCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Section.ConnectionCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:MongoDB.Configuration.Section.ConnectionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:MongoDB.Configuration.Section.ConnectionCollection.IndexOf(MongoDB.Configuration.Section.ConnectionElement)">
            <summary>
            Indexes the of.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Section.ConnectionCollection.Add(MongoDB.Configuration.Section.ConnectionElement)">
            <summary>
            Adds the specified connection.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:MongoDB.Configuration.Section.ConnectionCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a configuration element to the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to add.</param>
        </member>
        <member name="M:MongoDB.Configuration.Section.ConnectionCollection.Remove(MongoDB.Configuration.Section.ConnectionElement)">
            <summary>
            Removes the specified connection.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:MongoDB.Configuration.Section.ConnectionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:MongoDB.Configuration.Section.ConnectionCollection.Remove(System.String)">
            <summary>
            Removes the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:MongoDB.Configuration.Section.ConnectionCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:MongoDB.Configuration.Section.ConnectionCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.
            </returns>
        </member>
        <member name="P:MongoDB.Configuration.Section.ConnectionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MongoDB.Configuration.Section.ConnectionElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:MongoDB.Configuration.Section.ConnectionCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:MongoDB.Configuration.Section.ConnectionElement"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Model.DictionaryMemberMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.DictionaryMemberMap.#ctor(System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.String,System.Boolean,MongoDB.Configuration.DictionaryAdapters.IDictionaryAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Model.DictionaryMemberMap"/> class.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="getter">The getter.</param>
            <param name="setter">The setter.</param>
            <param name="alias">The alias.</param>
            <param name="persistDefaultValue">if set to <c>true</c> [persist default value].</param>
            <param name="dictionaryAdapter">The dictionary adapter.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.DictionaryMemberMap.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Model.DictionaryMemberMap.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value on the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.DictionaryMemberMap.KeyType">
            <summary>
            Gets the type of the key.
            </summary>
            <value>The type of the key.</value>
        </member>
        <member name="P:MongoDB.Configuration.Mapping.Model.DictionaryMemberMap.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DelegateIdConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateIdConvention.#ctor(System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DelegateIdConvention"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateIdConvention.#ctor(System.Func{System.Reflection.MemberInfo,System.Boolean},System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DelegateIdConvention"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="memberTypes">The member types.</param>
            <param name="bindingFlags">The binding flags.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateIdConvention.GetIdMember(System.Type)">
            <summary>
            Gets the member representing the id if one exists.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:MongoDB.Configuration.Mapping.Conventions.DelegateExtendedPropertiesConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateExtendedPropertiesConvention.#ctor(System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DelegateExtendedPropertiesConvention"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateExtendedPropertiesConvention.#ctor(System.Func{System.Reflection.MemberInfo,System.Boolean},System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:MongoDB.Configuration.Mapping.Conventions.DelegateExtendedPropertiesConvention"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="memberTypes">The member types.</param>
            <param name="bindingFlags">The binding flags.</param>
        </member>
        <member name="M:MongoDB.Configuration.Mapping.Conventions.DelegateExtendedPropertiesConvention.GetExtendedPropertiesMember(System.Type)">
            <summary>
            Gets the member representing extended properties if one exists.
            </summary>
            <param name="classType">Type of the entity.</param>
            <returns></returns>
        </member>
    </members>
</doc>
