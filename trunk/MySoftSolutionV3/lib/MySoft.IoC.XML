<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MySoft.IoC</name>
    </assembly>
    <members>
        <member name="T:MySoft.IoC.TimeStatus">
            <summary>
            时间状态信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.SecondStatus">
            <summary>
            每秒服务器状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.SecondStatus.DataFlow">
            <summary>
            数据流量
            </summary>
        </member>
        <member name="P:MySoft.IoC.SecondStatus.RequestCount">
            <summary>
            请求数
            </summary>
        </member>
        <member name="P:MySoft.IoC.SecondStatus.SuccessCount">
            <summary>
            成功计数
            </summary>
        </member>
        <member name="P:MySoft.IoC.SecondStatus.ErrorCount">
            <summary>
            错误数
            </summary>
        </member>
        <member name="P:MySoft.IoC.SecondStatus.ElapsedTime">
            <summary>
            总耗时
            </summary>
        </member>
        <member name="P:MySoft.IoC.SecondStatus.AverageDataFlow">
            <summary>
            平均数据流量（每次请求）
            </summary>
        </member>
        <member name="P:MySoft.IoC.SecondStatus.AverageElapsedTime">
            <summary>
            平均耗时（每次请求）
            </summary>
        </member>
        <member name="P:MySoft.IoC.TimeStatus.CounterTime">
            <summary>
            记数时间
            </summary>
        </member>
        <member name="T:MySoft.IoC.TimeStatusCollection">
            <summary>
            时间状态集合
            </summary>
        </member>
        <member name="M:MySoft.IoC.TimeStatusCollection.GetOrCreate(System.DateTime)">
            <summary>
            获取或创建
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.TimeStatusCollection.ToList">
            <summary>
            返回列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.TimeStatusCollection.GetLast">
            <summary>
            获取最后一条
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.TimeStatusCollection.Clear">
            <summary>
            清除字典中的数据
            </summary>
        </member>
        <member name="T:MySoft.IoC.IStatusService">
            <summary>
            状态服务 (超时为30秒，缓存1秒)
            </summary>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetServiceInfoList">
            <summary>
            获取服务信息列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.ClearStatus">
            <summary>
            清除服务器状态
            </summary>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetServerStatus">
            <summary>
            获取服务状态信息（包括SummaryStatus，HighestStatus，TimeStatus）
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetSummaryStatus">
            <summary>
            获取汇总状态信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetHighestStatus">
            <summary>
            获取最高状态信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetLatestStatus">
            <summary>
            获取最后一次服务状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetTimeStatusList">
            <summary>
            获取时段的服务状态信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.IStatusService.GetConnectInfoList">
            <summary>
            获取所有的客户端信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.CastleService">
            <summary>
            Castle服务
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServerMoniter">
            <summary>
            服务监控
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServerMoniter.GetServiceInfoList">
            <summary>
            获取服务信息列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerMoniter.ClearStatus">
            <summary>
            清除所有服务器状态
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServerMoniter.GetServerStatus">
            <summary>
            服务状态信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerMoniter.GetLatestStatus">
            <summary>
            获取最后一次服务状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerMoniter.GetHighestStatus">
            <summary>
            获取最高状态信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerMoniter.GetSummaryStatus">
            <summary>
            汇总状态信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerMoniter.GetTimeStatusList">
            <summary>
            获取服务状态列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServerMoniter.GetConnectInfoList">
            <summary>
            获取连接客户信息
            </summary>
            <returns></returns>
        </member>
        <member name="E:MySoft.IoC.ServerMoniter.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="E:MySoft.IoC.ServerMoniter.OnError">
            <summary>
            OnError event.
            </summary>
        </member>
        <member name="M:MySoft.IoC.CastleService.#ctor(MySoft.IoC.Configuration.CastleServiceConfiguration)">
            <summary>
            实例化CastleService
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.Start">
            <summary>
            启用服务
            </summary>
        </member>
        <member name="M:MySoft.IoC.CastleService.Start(System.Boolean)">
            <summary>
            启用服务
            </summary>
            <param name="isWriteLog"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.Publish">
            <summary>
            发布服务
            </summary>
        </member>
        <member name="M:MySoft.IoC.CastleService.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:MySoft.IoC.CastleService.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:MySoft.IoC.CastleService.GetSendResponse(MySoft.Net.Sockets.SocketBase,MySoft.IoC.Message.RequestMessage)">
            <summary>
            获取响应信息并发送
            </summary>
            <param name="socket"></param>
            <param name="reqMsg"></param>
        </member>
        <member name="M:MySoft.IoC.CastleService.CallMethod(MySoft.IoC.Message.RequestMessage)">
            <summary>
            调用 方法
            </summary>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleService.IsServiceCounter(MySoft.IoC.Message.RequestMessage)">
            <summary>
            判断是否需要计数
            </summary>
            <param name="request"></param>
        </member>
        <member name="P:MySoft.IoC.CastleService.Container">
            <summary>
            服务容器
            </summary>
        </member>
        <member name="P:MySoft.IoC.CastleService.ServerUrl">
            <summary>
            获取服务的ServerUrl地址
            </summary>
        </member>
        <member name="P:MySoft.IoC.CastleService.MaxConnect">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:MySoft.IoC.CastleService.BufferSize">
            <summary>
            缓冲区大小
            </summary>
        </member>
        <member name="T:MySoft.IoC.Services.BaseService">
            <summary>
            The base class of services.
            </summary>
        </member>
        <member name="T:MySoft.IoC.IService">
            <summary>
            interface of all services.
            </summary>
        </member>
        <member name="M:MySoft.IoC.IService.CallService(MySoft.IoC.Message.RequestMessage,System.Double)">
            <summary>
            Calls the service.
            </summary>
            <param name="reqMsg">The MSG.</param>
            <returns>The result.</returns>
        </member>
        <member name="P:MySoft.IoC.IService.ServiceName">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="F:MySoft.IoC.Services.BaseService.logger">
            <summary>
             The service logger
            </summary>
        </member>
        <member name="F:MySoft.IoC.Services.BaseService.serviceName">
            <summary>
            The service name.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.BaseService.#ctor(MySoft.Logger.ILog,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.Services.BaseService"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
        </member>
        <member name="M:MySoft.IoC.Services.BaseService.Run(MySoft.IoC.Message.RequestMessage)">
            <summary>
            Runs the specified MSG.
            </summary>
            <param name="reqMsg">The MSG.</param>
            <returns>The msg.</returns>
        </member>
        <member name="M:MySoft.IoC.Services.BaseService.CallService(MySoft.IoC.Message.RequestMessage,System.Double)">
            <summary>
            Calls the service.
            </summary>
            <param name="reqMsg">The MSG.</param>
            <returns>The msg.</returns>
        </member>
        <member name="P:MySoft.IoC.Services.BaseService.ServiceName">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="T:MySoft.IoC.PresenterFactory">
            <summary>
            Presenter Factory
            </summary>
        </member>
        <member name="M:MySoft.IoC.PresenterFactory.Create">
            <summary>
            Creates this singleton instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.PresenterFactory.GetPresenter``1(System.Object)">
            <summary>
            Gets the presenter.
            </summary>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.InterceptorSelector">
            <summary>
            拦截器选择
            </summary>
        </member>
        <member name="T:MySoft.IoC.AspectProxyAttribute">
            <summary>
            拦截器属性
            </summary>
        </member>
        <member name="P:MySoft.IoC.AspectProxyAttribute.InterceptorType">
            <summary>
            拦截器对象
            </summary>
        </member>
        <member name="P:MySoft.IoC.AspectProxyAttribute.Arguments">
            <summary>
            拦截器参数
            </summary>
        </member>
        <member name="T:MySoft.IoC.Configuration.CastleFactoryConfiguration">
            <summary>
            The service factory configuration.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Configuration.CastleFactoryConfiguration.GetConfig">
            <summary>
            获取远程对象配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Configuration.CastleFactoryConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.BufferSize">
            <summary>
            Gets or sets the buffersize
            </summary>
            <value>The buffersize.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.AppName">
            <summary>
            Gets or sets the app name.
            </summary>
            <value>The host name.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.Encrypt">
            <summary>
            Gets or sets the encrypt.
            </summary>
            <value>The encrypt.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.Compress">
            <summary>
            Gets or sets the compress.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.Timeout">
            <summary>
            Gets or sets the timeout
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.CacheTime">
            <summary>
            Gets or sets the cachetime
            </summary>
            <value>The cachetime.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.LogTime">
            <summary>
            Gets or sets the logtime
            </summary>
            <value>The logtime.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.Default">
            <summary>
            Gets or sets the default
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.ThrowError">
            <summary>
            Gets or sets the throwerror
            </summary>
            <value>The throwerror.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleFactoryConfiguration.Nodes">
            <summary>
            Gets or sets the nodes
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="T:MySoft.IoC.Message.ServiceMessageEventArgs">
            <summary>
            服务响应事件参数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.ServiceMessageEventArgs.Result">
            <summary>
            响应的消息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.ServiceMessageEventArgs.Socket">
            <summary>
            返回通讯的Socket对象
            </summary>
        </member>
        <member name="T:MySoft.IoC.Message.ServiceMessageEventHandler">
            <summary>
            服务消息委托
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="T:MySoft.IoC.Configuration.RemoteNode">
            <summary>
            远程节点
            </summary>
        </member>
        <member name="P:MySoft.IoC.Configuration.RemoteNode.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.RemoteNode.IP">
            <summary>
            Gets or sets the ip.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.RemoteNode.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.RemoteNode.MaxPool">
            <summary>
            Gets or sets the maxpool.
            </summary>
            <value>The maxpool.</value>
        </member>
        <member name="T:MySoft.IoC.Message.ServiceMessagePool">
            <summary>
            服务消息池
            </summary>
        </member>
        <member name="F:MySoft.IoC.Message.ServiceMessagePool.pool">
            <summary>
            ServiceRequest栈
            </summary>
        </member>
        <member name="M:MySoft.IoC.Message.ServiceMessagePool.#ctor(System.Int32)">
            <summary>
            初始化ServiceRequest池
            </summary>
            <param name="capacity">最大可能使用的ServiceRequest对象.</param>
        </member>
        <member name="M:MySoft.IoC.Message.ServiceMessagePool.Pop">
            <summary>
            弹出一个ServiceRequest
            </summary>
            <returns>ServiceRequest removed from the pool.</returns>
        </member>
        <member name="M:MySoft.IoC.Message.ServiceMessagePool.Push(MySoft.IoC.Message.ServiceMessage)">
            <summary>
            添加一个 ServiceRequest
            </summary>
            <param name="item">ServiceRequest instance to add to the pool.</param>
        </member>
        <member name="P:MySoft.IoC.Message.ServiceMessagePool.Count">
            <summary>
            返回ServiceRequest池中的 数量
            </summary>
        </member>
        <member name="P:MySoft.IoC.ServiceCache.CacheObject">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="P:MySoft.IoC.ServiceCache.Parameters">
            <summary>
            参数信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.SimpleServiceContainer">
            <summary>
            The simple service container.
            </summary>
        </member>
        <member name="T:MySoft.IoC.IServiceContainer">
            <summary>
            The service container interface.
            </summary>
        </member>
        <member name="M:MySoft.IoC.IServiceContainer.RegisterComponent(System.String,System.Object)">
            <summary>
            Registers the component.
            </summary>
            <param name="key">The key.</param>
            <param name="instance">Type of the class.</param>
        </member>
        <member name="M:MySoft.IoC.IServiceContainer.RegisterComponent(System.String,System.Type,System.Type)">
            <summary>
            Registers the component.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="classType">Type of the class.</param>
        </member>
        <member name="M:MySoft.IoC.IServiceContainer.RegisterComponents(System.Collections.IDictionary)">
            <summary>
            Registers the components.
            </summary>
            <param name="serviceKeyTypes">The service key types.</param>
        </member>
        <member name="M:MySoft.IoC.IServiceContainer.Release(System.Object)">
            <summary>
            Releases the specified obj.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:MySoft.IoC.IServiceContainer.GetInterfaces``1">
            <summary>
            获取约束的接口
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySoft.IoC.IServiceContainer.Kernel">
            <summary>
            Gets the kernel.
            </summary>
            <value>The kernel.</value>
        </member>
        <member name="P:MySoft.IoC.IServiceContainer.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:MySoft.IoC.IServiceContainer.Item(System.Type)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified service type.
            </summary>
            <value></value>
        </member>
        <member name="P:MySoft.IoC.IServiceContainer.Cache">
            <summary>
            缓存依赖
            </summary>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.#ctor(MySoft.IoC.CastleFactoryType)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.SimpleServiceContainer"/> class.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.#ctor(MySoft.IoC.CastleFactoryType,System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.SimpleServiceContainer"/> class.
            </summary>
            <param name="config"></param>
            <param name="serviceKeyTypes">The service key types.</param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.RegisterComponent(System.String,System.Type,System.Type)">
            <summary>
            Registers the component.
            </summary>
            <param name="key">The key.</param>
            <param name="classType">Type of the service.</param>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.RegisterComponent(System.String,System.Object)">
            <summary>
            Registers the component.
            </summary>
            <param name="key">The key.</param>
            <param name="instance">Type of the class.</param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.RegisterComponents(System.Collections.IDictionary)">
            <summary>
            Registers the components.
            </summary>
            <param name="serviceKeyTypes">The service key types.</param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Release(System.Object)">
            <summary>
            Releases the specified obj.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.CallService(MySoft.IoC.Message.RequestMessage,System.Double)">
            <summary>
            Calls the service.
            </summary>
            <param name="reqMsg"></param>
            <param name="logTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.GetInterfaces``1">
            <summary>
            获取约束的接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.WriteLog(System.String,MySoft.Logger.LogType)">
            <summary>
            输出日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:MySoft.IoC.SimpleServiceContainer.WriteError(System.Exception)">
            <summary>
            输出错误
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:MySoft.IoC.SimpleServiceContainer.Cache">
            <summary>
            缓存依赖
            </summary>
        </member>
        <member name="P:MySoft.IoC.SimpleServiceContainer.Kernel">
            <summary>
            Gets the kernel.
            </summary>
            <value>The kernel.</value>
        </member>
        <member name="P:MySoft.IoC.SimpleServiceContainer.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:MySoft.IoC.SimpleServiceContainer.Item(System.Type)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified service type.
            </summary>
            <value></value>
        </member>
        <member name="P:MySoft.IoC.SimpleServiceContainer.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="E:MySoft.IoC.SimpleServiceContainer.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="E:MySoft.IoC.SimpleServiceContainer.OnError">
            <summary>
            OnError event.
            </summary>
        </member>
        <member name="T:MySoft.IoC.AspectFactory">
            <summary>
            AOP工厂类
            </summary>
        </member>
        <member name="M:MySoft.IoC.AspectFactory.CreateProxy(System.Type,MySoft.IoC.AspectInterceptor[])">
            <summary>
            创建一个实例方式的拦截器
            </summary>
            <param name="instance"></param>
            <param name="interceptors"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.AspectFactory.CreateProxy``1(MySoft.IoC.AspectInterceptor[])">
            <summary>
            创建一个实例方式的拦截器
            </summary>
            <typeparam name="TServiceType"></typeparam>
            <param name="interceptors"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.AspectFactory.CreateProxy``2(MySoft.IoC.AspectInterceptor[])">
            <summary>
            创建一个接口方式的拦截器
            </summary>
            <typeparam name="IServiceType"></typeparam>
            <typeparam name="TServiceType"></typeparam>
            <param name="interceptors"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.ServerStatus">
            <summary>
            服务器状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.ServerStatus.StartDate">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.ServerStatus.TotalSeconds">
            <summary>
            汇总时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.ServerStatus.Summary">
            <summary>
            汇总状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.ServerStatus.Highest">
            <summary>
            最高状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.ServerStatus.Latest">
            <summary>
            最新状态信息
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceNodeInfo">
            <summary>
            The service node info.
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceNodeInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.ServiceNodeInfo"/> class.
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceNodeInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:MySoft.IoC.ServiceNodeInfo.Key">
            <summary>
            Gets or sets the DEFAULT_KEY.
            </summary>
            <value>The DEFAULT_KEY.</value>
        </member>
        <member name="P:MySoft.IoC.ServiceNodeInfo.Sevice">
            <summary>
            Gets or sets the sevice.
            </summary>
            <value>The sevice.</value>
        </member>
        <member name="P:MySoft.IoC.ServiceNodeInfo.Implementation">
            <summary>
            Gets or sets the implementation.
            </summary>
            <value>The implementation.</value>
        </member>
        <member name="T:MySoft.IoC.Message.ResponseMessage">
            <summary>
            The response msg.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Message.RequestBase">
            <summary>
            request base
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.RequestBase.ReturnType">
            <summary>
            Gets or sets the returnType.
            </summary>
            <value>The returnType.</value>
        </member>
        <member name="P:MySoft.IoC.Message.RequestBase.TransactionId">
            <summary>
            Gets or sets the transaction id.
            </summary>
            <value>The transaction id.</value>
        </member>
        <member name="P:MySoft.IoC.Message.RequestBase.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:MySoft.IoC.Message.RequestBase.SubServiceName">
            <summary>
            Gets or sets the name of the sub service.
            </summary>
            <value>The name of the sub service.</value>
        </member>
        <member name="P:MySoft.IoC.Message.RequestBase.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:MySoft.IoC.Message.RequestBase.Expiration">
            <summary>
            Gets or sets the expiration.
            </summary>
            <value>The expiration.</value>
        </member>
        <member name="P:MySoft.IoC.Message.RequestBase.Compress">
            <summary>
            Gets or sets the compress of the service.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.RequestBase.Encrypt">
            <summary>
            Gets or sets the encrypt of the service.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.RequestBase.Message">
            <summary>
            响应的消息
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.ResponseMessage.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:MySoft.IoC.Message.ResponseMessage.RowCount">
            <summary>
            记录数
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.ResponseMessage.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:MySoft.IoC.Message.ResponseMessage.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:MySoft.IoC.IoCException">
            <summary>
            IoC异常
            </summary>
        </member>
        <member name="M:MySoft.IoC.IoCException.#ctor(System.String)">
            <summary>
            普通异常的构造方法
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.IoC.IoCException.#ctor(System.String,System.Exception)">
            <summary>
            内嵌异常的构造方法
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:MySoft.IoC.IoCException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info">存储对象序列化和反序列化所需的全部数据</param>
            <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文</param>
        </member>
        <member name="P:MySoft.IoC.IoCException.ApplicationName">
            <summary>
            应用名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.IoCException.ExceptionHeader">
            <summary>
            错误头
            </summary>
        </member>
        <member name="P:MySoft.IoC.IoCException.Message">
            <summary>
            返回消息
            </summary>
        </member>
        <member name="T:MySoft.IoC.AspectSwitcherAttribute">
            <summary>
            切面方法选择器
            </summary>
        </member>
        <member name="P:MySoft.IoC.AspectSwitcherAttribute.InterceptorTypes">
            <summary>
            使用拦截器的类型
            </summary>
        </member>
        <member name="P:MySoft.IoC.AspectSwitcherAttribute.UseAspect">
            <summary>
            是否使用切面处理
            </summary>
        </member>
        <member name="T:MySoft.IoC.WarningException">
            <summary>
            警告异常信息
            </summary>
        </member>
        <member name="M:MySoft.IoC.WarningException.#ctor(System.String)">
            <summary>
            普通异常的构造方法
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MySoft.IoC.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info">存储对象序列化和反序列化所需的全部数据</param>
            <param name="context">描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文</param>
        </member>
        <member name="T:MySoft.IoC.HighestStatus">
            <summary>
            最高峰状态
            </summary>
        </member>
        <member name="P:MySoft.IoC.HighestStatus.DataFlowCounterTime">
            <summary>
            最高流量发生时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.HighestStatus.RequestCountCounterTime">
            <summary>
            最大请求发生时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.HighestStatus.SuccessCountCounterTime">
            <summary>
            最多成功请求发生时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.HighestStatus.ErrorCountCounterTime">
            <summary>
            最多错误请求发生时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.HighestStatus.ElapsedTimeCounterTime">
            <summary>
            最耗时请求发生时间
            </summary>
        </member>
        <member name="T:MySoft.IoC.Configuration.CastleServiceConfiguration">
            <summary>
            The service factory configuration.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Configuration.CastleServiceConfiguration.GetConfig">
            <summary>
            获取远程对象配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Configuration.CastleServiceConfiguration.LoadValuesFromConfigurationXml(System.Xml.XmlNode)">
            <summary>
            从配置文件加载配置值
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.MaxConnect">
            <summary>
            Gets or sets the maxconnect
            </summary>
            <value>The maxconnect.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.BufferSize">
            <summary>
            Gets or sets the buffersize
            </summary>
            <value>The buffersize.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.LogTime">
            <summary>
            Gets or sets the logtime
            </summary>
            <value>The logtime.</value>
        </member>
        <member name="P:MySoft.IoC.Configuration.CastleServiceConfiguration.Records">
            <summary>
            Gets or sets the records
            </summary>
            <value>The records.</value>
        </member>
        <member name="T:MySoft.IoC.CastleFactoryType">
            <summary>
            Service facrory type
            </summary>
        </member>
        <member name="F:MySoft.IoC.CastleFactoryType.Local">
            <summary>
            Local
            </summary>
        </member>
        <member name="F:MySoft.IoC.CastleFactoryType.Remote">
            <summary>
            Remote
            </summary>
        </member>
        <member name="F:MySoft.IoC.CastleFactoryType.LocalRemote">
            <summary>
            LocalRemote
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceConfig">
            <summary>
            服务配置
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_TIMEOUT_NUMBER">
            <summary>
            The default timeout number. 
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_CACHETIME_NUMBER">
            <summary>
            The default cachetime number.
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_LOGTIME_NUMBER">
            <summary>
            The default logtime number.
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_RECORD_NUMBER">
            <summary>
            The default record number.
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_MAXCONNECT_NUMBER">
            <summary>
            The default maxconnect number.
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_BUFFERSIZE_NUMBER">
            <summary>
            The default maxbuffer number.
            </summary>
        </member>
        <member name="F:MySoft.IoC.ServiceConfig.DEFAULT_CLIENTPOOL_NUMBER">
            <summary>
            The default maxpool number.
            </summary>
        </member>
        <member name="T:MySoft.IoC.Message.ResponseData">
            <summary>
            返回的数据
            </summary>
        </member>
        <member name="M:MySoft.IoC.Message.ResponseData.#ctor(MySoft.IoC.Message.RequestBase,System.Byte[],System.Object)">
            <summary>
            实例化ResultData
            </summary>
            <param name="reqBase"></param>
            <param name="keys"></param>
            <param name="value"></param>
        </member>
        <member name="P:MySoft.IoC.Message.ResponseData.Value">
            <summary>
            返回的结果
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.ResponseData.Count">
            <summary>
            记录数
            </summary>
        </member>
        <member name="T:MySoft.IoC.SummaryStatus">
            <summary>
            汇总状态信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.SummaryStatus.RunningSeconds">
            <summary>
            运行总时间
            </summary>
        </member>
        <member name="P:MySoft.IoC.SummaryStatus.AverageDataFlow">
            <summary>
            平均数据流量（每秒）
            </summary>
        </member>
        <member name="P:MySoft.IoC.SummaryStatus.AverageRequestCount">
            <summary>
            平均请求数（每秒）
            </summary>
        </member>
        <member name="P:MySoft.IoC.SummaryStatus.AverageSuccessCount">
            <summary>
            平均成功数（每秒）
            </summary>
        </member>
        <member name="P:MySoft.IoC.SummaryStatus.AverageErrorCount">
            <summary>
            平均错误数（每秒）
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceInfo">
            <summary>
            服务信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.ServiceInfo.Assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="P:MySoft.IoC.ServiceInfo.Name">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:MySoft.IoC.ServiceInfo.Methods">
            <summary>
            服务方法
            </summary>
        </member>
        <member name="T:MySoft.IoC.ProxyService">
            <summary>
            服务代理
            </summary>
        </member>
        <member name="M:MySoft.IoC.ProxyService.GetMessageKey(MySoft.IoC.Message.RequestBase)">
            <summary>
            获取缓存的Key
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ProxyService.CallService(MySoft.IoC.Message.RequestMessage,System.Double)">
            <summary>
            调用方法
            </summary>
            <param name="reqMsg"></param>
            <param name="logTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ProxyService.GetResponse(MySoft.IoC.Message.RequestMessage)">
            <summary>
            获取响应的消息
            </summary>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ProxyService.Dispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="P:MySoft.IoC.ProxyService.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceInterpreter">
            <summary>
            服务解析器
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceInterpreter.ProcessResource(Castle.Core.Resource.IResource,Castle.MicroKernel.SubSystems.Configuration.IConfigurationStore)">
            <summary>
            处理资源
            </summary>
            <param name="source"></param>
            <param name="store"></param>
        </member>
        <member name="T:MySoft.IoC.Message.ServiceMessage">
            <summary>
            服务消息
            </summary>
        </member>
        <member name="M:MySoft.IoC.Message.ServiceMessage.Send(MySoft.Net.Sockets.DataPacket)">
            <summary>
            发送数据包
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.Message.ServiceMessage.SendMessage(MySoft.IoC.Message.ResponseMessage)">
            <summary>
            发送消息
            </summary>
            <param name="resMsg"></param>
        </member>
        <member name="M:MySoft.IoC.Message.ServiceMessage.Dispose">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.ServiceMessage.IsConnected">
            <summary>
            是否连接
            </summary>
        </member>
        <member name="T:MySoft.IoC.IPresenter">
            <summary>
            The extended interface of all presenters
            </summary>
        </member>
        <member name="M:MySoft.IoC.IPresenter.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.IPresenter.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.IPresenter.TypeOfView">
            <summary>
            Gets the type of view.
            </summary>
            <value>The type of view.</value>
        </member>
        <member name="P:MySoft.IoC.IPresenter.TypeOfModels">
            <summary>
            Gets the types of model.
            </summary>
            <value>The types of model.</value>
        </member>
        <member name="T:MySoft.IoC.Presenter`1">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Presenter`1.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="M:MySoft.IoC.Presenter`1.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Presenter`1.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Presenter`1.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Presenter`1"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`1.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`1.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Presenter`2">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Presenter`2.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`2.model">
            <summary>
            The model
            </summary>
        </member>
        <member name="M:MySoft.IoC.Presenter`2.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Presenter`2.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Presenter`2.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Presenter`2"/> is initialized.
            Only when both view and model are binded, a presenter is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`2.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`2.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Presenter`3">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType1"></typeparam>
            <typeparam name="IModelType2"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Presenter`3.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`3.model1">
            <summary>
            The model 1
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`3.model2">
            <summary>
            The model 2
            </summary>
        </member>
        <member name="M:MySoft.IoC.Presenter`3.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Presenter`3.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Presenter`3.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Presenter`3"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`3.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`3.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Presenter`4">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType1"></typeparam>
            <typeparam name="IModelType2"></typeparam>
            <typeparam name="IModelType3"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Presenter`4.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`4.model1">
            <summary>
            The model 1
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`4.model2">
            <summary>
            The model 2
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`4.model3">
            <summary>
            The model 3
            </summary>
        </member>
        <member name="M:MySoft.IoC.Presenter`4.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Presenter`4.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Presenter`4.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Presenter`4"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`4.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`4.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Presenter`5">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType1"></typeparam>
            <typeparam name="IModelType2"></typeparam>
            <typeparam name="IModelType3"></typeparam>
            <typeparam name="IModelType4"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Presenter`5.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`5.model1">
            <summary>
            The model 1
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`5.model2">
            <summary>
            The model 2
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`5.model3">
            <summary>
            The model 3
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`5.model4">
            <summary>
            The model 4
            </summary>
        </member>
        <member name="M:MySoft.IoC.Presenter`5.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Presenter`5.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Presenter`5.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Presenter`5"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`5.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`5.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Presenter`6">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType1"></typeparam>
            <typeparam name="IModelType2"></typeparam>
            <typeparam name="IModelType3"></typeparam>
            <typeparam name="IModelType4"></typeparam>
            <typeparam name="IModelType5"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Presenter`6.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`6.model1">
            <summary>
            The model 1
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`6.model2">
            <summary>
            The model 2
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`6.model3">
            <summary>
            The model 3
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`6.model4">
            <summary>
            The model 4
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`6.model5">
            <summary>
            The model 5
            </summary>
        </member>
        <member name="M:MySoft.IoC.Presenter`6.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Presenter`6.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Presenter`6.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Presenter`6"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`6.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`6.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.Presenter`7">
            <summary>
            Base class of all presenters
            </summary>
            <typeparam name="ViewType"></typeparam>
            <typeparam name="IModelType1"></typeparam>
            <typeparam name="IModelType2"></typeparam>
            <typeparam name="IModelType3"></typeparam>
            <typeparam name="IModelType4"></typeparam>
            <typeparam name="IModelType5"></typeparam>
            <typeparam name="IModelType6"></typeparam>
        </member>
        <member name="F:MySoft.IoC.Presenter`7.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`7.model1">
            <summary>
            The model 1
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`7.model2">
            <summary>
            The model 2
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`7.model3">
            <summary>
            The model 3
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`7.model4">
            <summary>
            The model 4
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`7.model5">
            <summary>
            The model 5
            </summary>
        </member>
        <member name="F:MySoft.IoC.Presenter`7.model6">
            <summary>
            The model 6
            </summary>
        </member>
        <member name="M:MySoft.IoC.Presenter`7.BindView(System.Object)">
            <summary>
            Binds the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:MySoft.IoC.Presenter`7.BindModels(System.Object[])">
            <summary>
            Binds the models.
            </summary>
            <param name="model">The models.</param>
        </member>
        <member name="P:MySoft.IoC.Presenter`7.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:MySoft.IoC.Presenter`7"/> is initialized.
            </summary>
            <value><c>true</c> if initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`7.TypeOfView">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MySoft.IoC.Presenter`7.TypeOfModels">
            <summary>
            Gets the types of the model.
            </summary>
            <value>The types of the model.</value>
        </member>
        <member name="T:MySoft.IoC.AspectInterceptor">
            <summary>
            AOP拦截器
            </summary>
        </member>
        <member name="M:MySoft.IoC.AspectInterceptor.PerformProceed(Castle.DynamicProxy.IInvocation)">
            <summary>
            进行时的方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:MySoft.IoC.AspectInterceptor.PostProceed(Castle.DynamicProxy.IInvocation)">
            <summary>
            处理后的方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:MySoft.IoC.AspectInterceptor.PreProceed(Castle.DynamicProxy.IInvocation)">
            <summary>
            处理前的方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:MySoft.IoC.AspectManager">
            <summary>
            Aspect代理管理器
            </summary>
        </member>
        <member name="M:MySoft.IoC.AspectManager.GetService``1(System.Object)">
            <summary>
            获取Aspect服务
            </summary>
            <typeparam name="IServiceType"></typeparam>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.AspectManager.GetService(System.Object)">
            <summary>
            获取Aspect服务
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.AspectManager.CreateService(System.Type)">
            <summary>
            创建Aspect服务
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Services.AsyncMethodCaller">
            <summary>
            异步调用委托
            </summary>
            <param name="reqMsg"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Services.DynamicService">
            <summary>
            The dynamic service.
            </summary>
        </member>
        <member name="M:MySoft.IoC.Services.DynamicService.#ctor(MySoft.Logger.ILog,System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.Services.DynamicService"/> class.
            </summary>
            <param name="classType">Type of the service interface.</param>
        </member>
        <member name="M:MySoft.IoC.Services.DynamicService.Run(MySoft.IoC.Message.RequestMessage)">
            <summary>
            Runs the specified MSG.
            </summary>
            <param name="reqMsg">The MSG.</param>
            <returns>The msg.</returns>
        </member>
        <member name="T:MySoft.IoC.ServiceNode">
            <summary>
            服务节点
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceNode.Parse(System.String,System.Int32)">
            <summary>
            返回一个远程节点
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.ServiceNode.Parse(System.String)">
            <summary>
            返回一个远程节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.Message.RequestMessage">
            <summary>
            The request msg.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.RequestMessage.AppName">
            <summary>
            Gets or sets the name of the appName.
            </summary>
            <value>The name of the appName.</value>
        </member>
        <member name="P:MySoft.IoC.Message.RequestMessage.HostName">
            <summary>
            Gets or sets the name of the hostName.
            </summary>
            <value>The name of the hostName.</value>
        </member>
        <member name="P:MySoft.IoC.Message.RequestMessage.Timeout">
            <summary>
            Gets or sets the timeout of the service.
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.RequestMessage.IPAddress">
            <summary>
            Gets or sets the request address
            </summary>
        </member>
        <member name="P:MySoft.IoC.Message.RequestMessage.Message">
            <summary>
            请求的消息
            </summary>
        </member>
        <member name="T:MySoft.IoC.Configuration.CastleServiceConfigurationHandler">
            <summary>
            服务配置类
            </summary>
        </member>
        <member name="T:MySoft.IoC.Configuration.CastleFactoryConfigurationHandler">
            <summary>
            服务配置类
            </summary>
        </member>
        <member name="T:MySoft.IoC.ServiceInvocationHandler">
            <summary>
            The base impl class of the service interface, this class is used by service factory to emit service interface impl automatically at runtime.
            </summary>
        </member>
        <member name="M:MySoft.IoC.ServiceInvocationHandler.#ctor(MySoft.IoC.Configuration.CastleFactoryConfiguration,MySoft.IoC.IServiceContainer,MySoft.IoC.IService,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.ServiceInvocationHandler"/> class.
            </summary>
            <param name="container">config.</param>
            <param name="container">The container.</param>
            <param name="serviceInterfaceType">Type of the service interface.</param>
        </member>
        <member name="M:MySoft.IoC.ServiceInvocationHandler.CallService(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Calls the service.
            </summary>
            <param name="methodInfo">Name of the sub service.</param>
            <param name="paramValues">The param values.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:MySoft.IoC.ServiceInvocationHandler.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            响应委托
            </summary>
            <param name="proxy"></param>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:MySoft.IoC.ConnectInfo">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="P:MySoft.IoC.ConnectInfo.IP">
            <summary>
            连接的IP
            </summary>
        </member>
        <member name="P:MySoft.IoC.ConnectInfo.Count">
            <summary>
            连接数
            </summary>
        </member>
        <member name="T:MySoft.IoC.ParameterCollection">
            <summary>
            The parameter collection type used by request msg.
            </summary>
        </member>
        <member name="M:MySoft.IoC.ParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.ParameterCollection"/> class.
            </summary>
        </member>
        <member name="M:MySoft.IoC.ParameterCollection.Remove(System.String)">
            <summary>
            Removes the specified param name.
            </summary>
            <param name="paramName">Name of the param.</param>
        </member>
        <member name="M:MySoft.IoC.ParameterCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MySoft.IoC.ParameterCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:MySoft.IoC.ParameterCollection.GetJsonString(Newtonsoft.Json.Formatting)">
            <summary>
            获取json字符串
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="P:MySoft.IoC.ParameterCollection.SerializedData">
            <summary>
            Gets or sets the serialized data.
            </summary>
            <value>The serialized data.</value>
        </member>
        <member name="P:MySoft.IoC.ParameterCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> with the specified param name.
            </summary>
            <value></value>
        </member>
        <member name="M:MySoft.IoC.Services.BigInteger.Kernel.Multiply(System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts it into
            d [dOffset:dOffset+xLen+yLen].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+xLen+yLen].
            </remarks>
        </member>
        <member name="M:MySoft.IoC.Services.BigInteger.Kernel.MultiplyMod2p32pmod(System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts the low mod words into
            d [dOffset:dOffset+mod].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+mod].
            </remarks>
        </member>
        <member name="T:MySoft.IoC.CastleFactory">
            <summary>
            The service factory.
            </summary>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.#ctor(MySoft.IoC.Configuration.CastleFactoryConfiguration,MySoft.IoC.IServiceContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:MySoft.IoC.CastleFactory"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.CreateNew(MySoft.IoC.Configuration.CastleFactoryConfiguration)">
            <summary>
            Creates this instance. Used in a multithreaded environment
            </summary>
            <param name="config"></param>
            <param name="name">service name</param>
            <returns>The service factoru new instance.</returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.RegisterCacheDependent(MySoft.Cache.ICacheDependent)">
            <summary>
            注册缓存依赖
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.ResolveService``1">
            <summary>
            Gets local the service.
            </summary>
            <returns>The service implemetation instance.</returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetService``1">
            <summary>
            Gets the service.
            </summary>
            <returns>The service implemetation instance.</returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetService``1(MySoft.IoC.ServiceNode)">
            <summary>
            Gets the service.
            </summary>
            <param name="node">The node name.</param>
            <returns></returns>
        </member>
        <member name="M:MySoft.IoC.CastleFactory.GetService``1(System.String)">
            <summary>
            Gets the service.
            </summary>
            <param name="nodeKey">The node key.</param>
            <returns></returns>
        </member>
        <member name="P:MySoft.IoC.CastleFactory.ServiceContainer">
            <summary>
            Gets the service container.
            </summary>
            <value>The service container.</value>
        </member>
        <member name="E:MySoft.IoC.CastleFactory.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="E:MySoft.IoC.CastleFactory.OnError">
            <summary>
            OnError event.
            </summary>
        </member>
    </members>
</doc>
